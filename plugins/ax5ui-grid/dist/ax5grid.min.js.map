{"version":3,"sources":["ax5grid.min.js","ax5grid.js","ax5grid-body.js","ax5grid-collector.js","ax5grid-data.js","ax5grid-excel.js","ax5grid-formatter.js","ax5grid-header.js","ax5grid-inline-editor.js","ax5grid-page.js","ax5grid-scroller.js","ax5grid-tmpl.js","ax5grid-util.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","GRID","UI","ax5","ui","U","util","addClass","className","version","ax5grid","cfg","self","this","instanceId","getGuid","config","theme","animateTime","frozenColumnIndex","frozenRowIndex","showLineNumber","showRowSelector","multipleSelect","height","columnMinWidth","lineNumberColumnWidth","rowSelectorColumnWidth","sortable","undefined","remoteSort","header","align","columnHeight","columnPadding","columnBorderWidth","body","grouping","rightSum","footSum","page","display","navigationItemCount","scroller","size","barMinSize","trackPadding","columnKeys","selected","modified","deleted","disableSelection","xvar","bodyTrHeight","scrollContentWidth","scrollContentHeight","columns","colGroup","footSumColumns","bodyGrouping","list","selectedDataIndexs","deletedList","sortInfo","focusedColumn","selectedColumn","isInlineEditing","inlineEditing","headerTable","leftHeaderData","headerData","rightHeaderData","bodyRowTable","leftBodyRowData","bodyRowData","rightBodyRowData","bodyRowMap","bodyGroupingTable","leftBodyGroupingData","bodyGroupingData","rightBodyGroupingData","footSumTable","leftFootSumData","footSumData","needToPaintSum","initGrid","data","id","$target","html","tmpl","get","$","container","hidden","find","root","panel","aside-header","left-header","header-scroll","right-header","top-aside-body","top-left-body","top-body","top-body-scroll","top-right-body","aside-body","aside-body-scroll","left-body","left-body-scroll","body-scroll","right-body","right-body-scroll","bottom-aside-body","bottom-left-body","bottom-body","bottom-body-scroll","bottom-right-body","livePanelKeys","vertical","vertical-bar","horizontal","horizontal-bar","corner","navigation","status","form","clipboard","resizer","css","initColumns","_columns","deepCopy","makeHeaderTable","call","length","makeBodyRowTable","makeBodyRowMap","rows","colGroupMap","r","rl","row","c","cl","cols","colIndex","jQuery","extend","k","push","onResetColumns","resetColGroupWidth","initFootSum","initBodyGroup","alignGrid","repaint","resize","computedWidth","i","l","CT_WIDTH","width","totalWidth","autoWidthColgroupIndexs","isNumber","_width","right","left","_footSum","isArray","makeFootSumTable","_grouping","by","makeBodyGroupingTable","kl","orderBy","seq","fixed","key","sort","sortFixed","_isFirst","verticalScrollerWidth","horizontalScrollerHeight","CT_HEIGHT","CT_INNER_WIDTH","CT_INNER_HEIGHT","asidePanelWidth","frozenPanelWidth","endIndex","rightPanelWidth","frozenRowHeight","footSumHeight","headerHeight","pageHeight","totalColGroupWidth","bodyWidth","bodyHeight","panelDisplayProcess","vPosition","hPosition","containerType","isHide","hide","scrollerDisplayProcess","scrollerWidth","scrollerHeight","show","sortColumns","_sortInfo","isFunction","that","a","b","initData","clearGroupingData","init","_config","target","console","log","info","getError","onStateChanged","onClick","onLoad","onDataChanged","isObject","error","parseJson","attr","grid","window","bind","document","on","e","isPickerClick","findParentNode","_target","getAttribute","focused","blur","ctrlKeys","33","34","35","36","37","38","39","40","which","eventKeys","ESC","keyDown","originalEvent","RETURN","TAB","stopEvent","UP","shiftKey","DOWN","metaKey","ctrlKey","copySelect","SPACE","Object","keys","setTimeout","processor","KEY_UP","moveFocus","KEY_DOWN","KEY_LEFT","KEY_RIGHT","KEY_HOME","KEY_END","INLINE_EDIT","_e","inlineEdit","active","test","keydown","activeEditLength","columnKey","_act","_data","copysuccess","_rowIndex","_colIndex","_dindex","$clipBoard","copyTextArray","copyText","_di","_column","dindex","rowIndex","originalColumn","__isGrouping","forEach","join","innerText","select","execCommand","setData","set","navigationUpdate","scrollTo","top","getList","_type","setHeight","_height","offsetParent","innerHeight","addRow","_row","_options","add","removeRow","remove","updateRow","update","repaintRow","deleteRow","addColumn","first","concat","last","_cindex","splice","removeColumn","updateColumn","setColumnWidth","columnResizerIndex","getColumnSortInfo","setColumnSort","applySortStatus","_selectObject","selectedClear","clearSelect","updateRowState","selectAll","updateRowStateAll","exportExcel","_fileName","table","getExcelString","excel","main","grid_instance","arguments","setConfig","apply","columnSelect","focusClear","panelName","removeAttr","clear","column","editKey","colspan","selectedRange","start","end","deActive","trl","range","s","Math","min","max","_panels","columnSelector","cell","Number","off","_states","si","cellChecked","checked","_state","col","targetClick","default","item","value","editor","type","newValue","getValue","trueValue","falseValue","setValue","editorConfig","rowSelector","internalCall","lineNumber","resetFrozenColumn","dividedBodyRowObj","divideTableByFrozenColumnIndex","asideBodyRowData","dataTable","label","rowspan","_col","columnAttr","leftData","rightData","dividedBodyGroupingObj","asideBodyGroupingData","dividedFootSumObj","getFieldValue","_list","_item","_index","_value","_key","tagsToReplace","<",">","_editor","inlineEditor","editMode","disabled","getHtml","formatter","returnValue","replace","tag","getGroupingValue","_label","__groupingList","groupBy","__groupingBy","collector","getSumFieldValue","_reset","paintStartRowIndex","floor","abs","position","dataRowCount","isFirstPaint","bodyAlign","paintRowCount","ceil","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","cgi","cgl","di","dl","tri","ci","cellHeight","colAlign","SS","isScrolled","len","rowTable","isGroupingRow","_focusedColumn","_selectedColumn","attrs","tdCSS_class","styleClass","index","_cellHeight","lineHeight","multiLine","paddingTop","empty","innerHTML","repaintSum","isFootSum","scrollConfig","asideColGroup","slice","leftHeaderColGroup","headerColGroup","statusUpdate","repaintCell","_panelName","_newValue","updateCell","updateWith","updateColumnKey","findPanelByColumnIndex","updateWithCell","replaceGroupTr","replaceTr","noRepaint","_position","focus","UD","_dy","while_i","moveResult","nPanelInfo","LR","_dx","isScrollPanel","containerPanelName","$column","newLeft","outerWidth","INDEX","LEFT","RIGHT","HOME","END","_initValue","useReturnToSave","originalValue","initValue","__value","__editor","isNothing","number","money","$inlineEditorCell","$inlineEditor","_msg","editorValue","tagName","val","action","CANCEL","__clear","bindedAx5ui","ax5picker","ax5select","getBody","getSum","po","sum","avg","listLength","round","returnList","dataRealRowCount","appendIndex","compareString","ari","groupingKeys","map","gi","gl","appendRow","appendRowItem","labels","ki","lastIndex","Function","getRealPathForDataItem","_selected","filter","sortInfoArray","getKeyValue","order","_a_val","_b_val","_a","_b","base64","btoa","unescape","encodeURIComponent","uri","getExcelTmpl","tableToExcel","fileName","output","tables","mustache","render","worksheet","arr","t","ti","name","isChrome","navigator","userAgent","indexOf","isSafari","isIE","documentMode","msSaveOrOpenBlob","blob1","Blob","blankWindow","open","write","$iframe","append","iframe","close","anchor","appendChild","createElement","download","href","click","removeChild","export","columnResizerEvent","_columnResizer","$columnResizer","columnResizerPositionLeft","offset","gridTargetOffsetLeft","resizeRange","ENM","mouseObj","getMousePosition","__da","clientX","mousePosition","columnResizerLived","removeClass","unbind","toggleSort","dividedHeaderObj","asideHeaderData","headerAlign","repaintHeader","tableWidth","trCSS_class","_SS","enableFilter","resizerHeight","resizerLeft","AS","sortOrder","multiSort","getHeader","edit_text","_root","_columnKey","_$parent","$el","bindUI","_$el","edit_money","ax5formatter","pattern","edit_number","edit_date","direction","content","state","activePicker","edit_select","eConfig","optionValue","optionText","optionSelected","options","n","activeSelectOptionGroup","edit_checkbox","marginTop","text","date","checkbox","onclickPageMove","callback","_pageNo","currentPage","selectPage","onChange","prev","pageNo","next","totalPages","hasPage","pageSize","totalElements","firstIcon","prevIcon","nextIcon","lastIcon","returns","startI","endI","p","act","fromRowIndex","toRowIndex","convertScrollPosition","_var","_content_height","_panel_height","_scroller_height","_vertical_scroller_height","verticalScrollBarHeight","_content_width","_panel_width","_scroller_width","_horizontal_scroller_width","horizontalScrollBarWidth","convertScrollBarPosition","_top","scrollPositon","_left","scrollBarMover","track","bar","Date","getTime","moveout_timer","trackOffset","barBox","outerHeight","trackBox","innerWidth","getScrollerPosition","newTop","clientY","barOffset","scrollContentMover","wheel","delta","_body_scroll_position","isNaN","_top_is_end","_left_is_end","x","y","getContentPosition","__x_da","__y_da","margin","E","detail","deltaY","wheelDelta","deltaX","addEventListener","supportTouch","page_navigation","page_status","tmplName","_table","_frozenColumnIndex","tempTable_l","tempTable_r","colStartIndex","colEndIndex","leftCol","rightCol","changedTouches","pageX","pageY","mousedown","mousemove","mouseup","maekRows","depth","parentField","field","selfMakeRow","__columns","_footSumColumns","footSumRow","addC","_bodyGroupingColumns","_containerPanelName","_isScrollPanel","_dataPath","path","_path","split"],"mappings":"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","file":"ax5grid.min.js","sourcesContent":["\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n * Copyright (c) 2016. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n// ax5.ui.grid\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var GRID;\n\n    UI.addClass({\n        className: \"grid\",\n        version: \"${VERSION}\"\n    }, function () {\n        /**\n         * @class ax5grid\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var myGrid = new ax5.ui.grid();\n         * ```\n         */\n        var ax5grid = function ax5grid() {\n            var self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n\n                // 틀고정 속성\n                frozenColumnIndex: 0,\n                frozenRowIndex: 0,\n                showLineNumber: false,\n                showRowSelector: false,\n                multipleSelect: true,\n\n                height: 0,\n                columnMinWidth: 100,\n                lineNumberColumnWidth: 30,\n                rowSelectorColumnWidth: 26,\n                sortable: undefined,\n                remoteSort: false,\n\n                header: {\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1\n                },\n                body: {\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1,\n                    grouping: false\n                },\n                rightSum: false,\n                footSum: false,\n                page: {\n                    height: 25,\n                    display: true,\n                    navigationItemCount: 5\n                },\n                scroller: {\n                    size: 15,\n                    barMinSize: 15,\n                    trackPadding: 4\n                },\n                columnKeys: {\n                    selected: '__selected__',\n                    modified: '__modified__',\n                    deleted: '__deleted__',\n                    disableSelection: '__disable_selection__'\n                }\n            };\n            this.xvar = {\n                bodyTrHeight: 0, // 한줄의 높이\n                scrollContentWidth: 0, // 스크롤 될 내용물의 너비 (스크롤 될 내용물 : panel['body-scroll'] 안에 컬럼이 있는)\n                scrollContentHeight: 0 // 스크롤 된 내용물의 높이\n            };\n\n            // 그리드 데이터셋\n            this.columns = []; // config.columns에서 복제된 오브젝트\n            this.colGroup = []; // columns를 table태그로 출력하기 좋게 변환한 오브젝트\n            this.footSumColumns = [];\n            this.bodyGrouping = {};\n\n            this.list = []; // 그리드의 데이터\n            this.page = {}; // 그리드의 페이지 정보\n            this.selectedDataIndexs = [];\n            this.deletedList = [];\n            this.sortInfo = {}; // 그리드의 헤더 정렬 정보\n            this.focusedColumn = {}; // 그리드 바디의 포커스된 셀 정보\n            this.selectedColumn = {}; // 그리드 바디의 선택된 셀 정보\n            this.isInlineEditing = false;\n            this.inlineEditing = {};\n\n            // header\n            this.headerTable = {};\n            this.leftHeaderData = {};\n            this.headerData = {};\n            this.rightHeaderData = {};\n\n            // body\n            this.bodyRowTable = {};\n            this.leftBodyRowData = {};\n            this.bodyRowData = {};\n            this.rightBodyRowData = {};\n            this.bodyRowMap = {};\n\n            this.bodyGroupingTable = {};\n            this.leftBodyGroupingData = {};\n            this.bodyGroupingData = {};\n            this.rightBodyGroupingData = {};\n\n            // footSum\n            this.footSumTable = {}; // footSum의 출력레이아웃\n            this.leftFootSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 왼쪽\n            this.footSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 오른쪽\n            this.needToPaintSum = true; // 데이터 셋이 변경되어 summary 변경 필요여부\n\n            cfg = this.config;\n\n            var onStateChanged = function onStateChanged(_opts, _that) {\n                if (_opts && _opts.onStateChanged) {\n                    _opts.onStateChanged.call(_that, _that);\n                } else if (this.onStateChanged) {\n                    this.onStateChanged.call(_that, _that);\n                }\n                return true;\n            },\n                initGrid = function initGrid() {\n                // 그리드 템플릿에 전달하고자 하는 데이터를 정리합시다.\n\n                var data = {\n                    instanceId: this.id\n                };\n\n                this.$target.html(GRID.tmpl.get(\"main\", data));\n\n                // 그리드 패널 프레임의 각 엘리먼트를 캐쉬합시다.\n                this.$ = {\n                    \"container\": {\n                        \"hidden\": this.$target.find('[data-ax5grid-container=\"hidden\"]'),\n                        \"root\": this.$target.find('[data-ax5grid-container=\"root\"]'),\n                        \"header\": this.$target.find('[data-ax5grid-container=\"header\"]'),\n                        \"body\": this.$target.find('[data-ax5grid-container=\"body\"]'),\n                        \"page\": this.$target.find('[data-ax5grid-container=\"page\"]'),\n                        \"scroller\": this.$target.find('[data-ax5grid-container=\"scroller\"]')\n                    },\n                    \"panel\": {\n                        \"aside-header\": this.$target.find('[data-ax5grid-panel=\"aside-header\"]'),\n                        \"left-header\": this.$target.find('[data-ax5grid-panel=\"left-header\"]'),\n                        \"header\": this.$target.find('[data-ax5grid-panel=\"header\"]'),\n                        \"header-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"header\"]'),\n                        \"right-header\": this.$target.find('[data-ax5grid-panel=\"right-header\"]'),\n                        \"top-aside-body\": this.$target.find('[data-ax5grid-panel=\"top-aside-body\"]'),\n                        \"top-left-body\": this.$target.find('[data-ax5grid-panel=\"top-left-body\"]'),\n                        \"top-body\": this.$target.find('[data-ax5grid-panel=\"top-body\"]'),\n                        \"top-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"top-body\"]'),\n                        \"top-right-body\": this.$target.find('[data-ax5grid-panel=\"top-right-body\"]'),\n                        \"aside-body\": this.$target.find('[data-ax5grid-panel=\"aside-body\"]'),\n                        \"aside-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"aside-body\"]'),\n                        \"left-body\": this.$target.find('[data-ax5grid-panel=\"left-body\"]'),\n                        \"left-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"left-body\"]'),\n                        \"body\": this.$target.find('[data-ax5grid-panel=\"body\"]'),\n                        \"body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"body\"]'),\n                        \"right-body\": this.$target.find('[data-ax5grid-panel=\"right-body\"]'),\n                        \"right-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"right-body\"]'),\n                        \"bottom-aside-body\": this.$target.find('[data-ax5grid-panel=\"bottom-aside-body\"]'),\n                        \"bottom-left-body\": this.$target.find('[data-ax5grid-panel=\"bottom-left-body\"]'),\n                        \"bottom-body\": this.$target.find('[data-ax5grid-panel=\"bottom-body\"]'),\n                        \"bottom-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"bottom-body\"]'),\n                        \"bottom-right-body\": this.$target.find('[data-ax5grid-panel=\"bottom-right-body\"]')\n                    },\n                    \"livePanelKeys\": [], // 현재 사용중인 패널들 (grid-body repaint에서 수집하여 처리)\n                    \"scroller\": {\n                        \"vertical\": this.$target.find('[data-ax5grid-scroller=\"vertical\"]'),\n                        \"vertical-bar\": this.$target.find('[data-ax5grid-scroller=\"vertical-bar\"]'),\n                        \"horizontal\": this.$target.find('[data-ax5grid-scroller=\"horizontal\"]'),\n                        \"horizontal-bar\": this.$target.find('[data-ax5grid-scroller=\"horizontal-bar\"]'),\n                        \"corner\": this.$target.find('[data-ax5grid-scroller=\"corner\"]')\n                    },\n                    \"page\": {\n                        \"navigation\": this.$target.find('[data-ax5grid-page=\"navigation\"]'),\n                        \"status\": this.$target.find('[data-ax5grid-page=\"status\"]')\n                    },\n                    \"form\": {\n                        \"clipboard\": this.$target.find('[data-ax5grid-form=\"clipboard\"]')\n                    },\n                    \"resizer\": {\n                        \"vertical\": this.$target.find('[data-ax5grid-resizer=\"vertical\"]'),\n                        \"horizontal\": this.$target.find('[data-ax5grid-resizer=\"horizontal\"]')\n                    }\n                };\n\n                this.$[\"container\"][\"root\"].css({ height: this.config.height });\n\n                return this;\n            },\n                initColumns = function initColumns(_columns) {\n                this.columns = U.deepCopy(_columns);\n                this.headerTable = GRID.util.makeHeaderTable.call(this, this.columns);\n                this.xvar.frozenColumnIndex = cfg.frozenColumnIndex > this.columns.length ? this.columns.length : cfg.frozenColumnIndex;\n\n                this.bodyRowTable = GRID.util.makeBodyRowTable.call(this, this.columns);\n                this.bodyRowMap = GRID.util.makeBodyRowMap.call(this, this.bodyRowTable);\n                // 바디에 표현될 한줄의 높이를 계산합니다.\n                this.xvar.bodyTrHeight = this.bodyRowTable.rows.length * this.config.body.columnHeight;\n\n                var colGroupMap = {};\n                for (var r = 0, rl = this.headerTable.rows.length; r < rl; r++) {\n                    var row = this.headerTable.rows[r];\n                    for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                        colGroupMap[row.cols[c].colIndex] = jQuery.extend({}, row.cols[c]);\n                    }\n                }\n\n                this.colGroup = [];\n                for (var k in colGroupMap) {\n                    this.colGroup.push(colGroupMap[k]);\n                }\n\n                return this;\n            },\n                onResetColumns = function onResetColumns() {\n                initColumns.call(this, this.config.columns);\n                resetColGroupWidth.call(this);\n                if (this.config.footSum) {\n                    initFootSum.call(this, this.config.footSum);\n                    this.needToPaintSum = true;\n                }\n                if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n                alignGrid.call(this, true);\n                GRID.header.repaint.call(this, true);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n            },\n                resetColGroupWidth = function resetColGroupWidth() {\n                /// !! 그리드 target의 크기가 변경되면 이 함수를 호출하려 this.colGroup의 _width 값을 재 계산 하여야 함. [tom]\n                var CT_WIDTH = this.$[\"container\"][\"root\"].width() - function () {\n                    var width = 0;\n                    if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                    if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                    return width;\n                }();\n                var totalWidth = 0;\n                var computedWidth;\n                var autoWidthColgroupIndexs = [];\n                var colGroup = this.colGroup;\n                var i, l;\n\n                for (i = 0, l = colGroup.length; i < l; i++) {\n                    if (U.isNumber(colGroup[i].width)) {\n                        totalWidth += colGroup[i]._width = colGroup[i].width;\n                    } else if (colGroup[i].width === \"*\") {\n                        autoWidthColgroupIndexs.push(i);\n                    } else if (U.right(colGroup[i].width, 1) === \"%\") {\n                        totalWidth += colGroup[i]._width = CT_WIDTH * U.left(colGroup[i].width, \"%\") / 100;\n                    }\n                }\n                if (autoWidthColgroupIndexs.length > 0) {\n                    computedWidth = (CT_WIDTH - totalWidth) / autoWidthColgroupIndexs.length;\n                    for (i = 0, l = autoWidthColgroupIndexs.length; i < l; i++) {\n                        colGroup[autoWidthColgroupIndexs[i]]._width = computedWidth;\n                    }\n                }\n            },\n                initFootSum = function initFootSum(_footSum) {\n                if (U.isArray(_footSum)) {\n                    this.footSumTable = GRID.util.makeFootSumTable.call(this, this.footSumColumns = _footSum);\n                } else {\n                    this.footSumColumns = [];\n                    this.footSumTable = {};\n                }\n            },\n                initBodyGroup = function initBodyGroup(_grouping) {\n                var grouping = jQuery.extend({}, _grouping);\n                if (\"by\" in grouping && \"columns\" in grouping) {\n\n                    this.bodyGrouping = {\n                        by: grouping.by,\n                        columns: grouping.columns\n                    };\n                    this.bodyGroupingTable = GRID.util.makeBodyGroupingTable.call(this, this.bodyGrouping.columns);\n                    this.sortInfo = function () {\n                        var sortInfo = {};\n                        for (var k = 0, kl = this.bodyGrouping.by.length; k < kl; k++) {\n                            sortInfo[this.bodyGrouping.by[k]] = {\n                                orderBy: \"asc\",\n                                seq: k,\n                                fixed: true\n                            };\n                            for (var c = 0, cl = this.colGroup.length; c < cl; c++) {\n                                if (this.colGroup[c].key === this.bodyGrouping.by[k]) {\n                                    this.colGroup[c].sort = \"asc\";\n                                    this.colGroup[c].sortFixed = true;\n                                }\n                            }\n                        }\n                        return sortInfo;\n                    }.call(this);\n                } else {\n                    cfg.body.grouping = false;\n                }\n            },\n                alignGrid = function alignGrid(_isFirst) {\n                // isFirst : 그리드 정렬 메소드가 처음 호출 되었는지 판단 하는 아규먼트\n                var CT_WIDTH = this.$[\"container\"][\"root\"].width();\n                var CT_HEIGHT = this.$[\"container\"][\"root\"].height();\n                var CT_INNER_WIDTH = CT_WIDTH;\n                var CT_INNER_HEIGHT = CT_HEIGHT;\n\n                var asidePanelWidth = cfg.asidePanelWidth = function () {\n                    var width = 0;\n\n                    if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                    if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                    return width;\n                }();\n\n                var frozenPanelWidth = cfg.frozenPanelWidth = function (colGroup, endIndex) {\n                    var width = 0;\n                    for (var i = 0, l = endIndex; i < l; i++) {\n                        width += colGroup[i]._width;\n                    }\n                    return width;\n                }(this.colGroup, cfg.frozenColumnIndex);\n\n                var rightPanelWidth = 0; // todo : 우측 함계컬럼 넘비 계산\n\n                var frozenRowHeight = function (bodyTrHeight) {\n                    return cfg.frozenRowIndex * bodyTrHeight;\n                }(this.xvar.bodyTrHeight);\n\n                var footSumHeight = function (bodyTrHeight) {\n                    return this.footSumColumns.length * bodyTrHeight;\n                }.call(this, this.xvar.bodyTrHeight);\n\n                var headerHeight = this.headerTable.rows.length * cfg.header.columnHeight;\n                var pageHeight = cfg.page.display ? cfg.page.height : 0;\n\n                // 데이터의 길이가 body보다 높을때. 수직 스크롤러 활성화\n                var verticalScrollerWidth, horizontalScrollerHeight;\n\n                (function () {\n                    verticalScrollerWidth = CT_HEIGHT - headerHeight - pageHeight - footSumHeight < this.list.length * this.xvar.bodyTrHeight ? this.config.scroller.size : 0;\n                    // 남은 너비가 colGroup의 너비보다 넓을때. 수평 스크롤 활성화.\n                    horizontalScrollerHeight = function () {\n                        var totalColGroupWidth = 0;\n                        // aside 빼고 너비\n                        // 수직 스크롤이 있으면 또 빼고 비교\n                        var bodyWidth = CT_WIDTH - asidePanelWidth - verticalScrollerWidth;\n                        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n                            totalColGroupWidth += this.colGroup[i]._width;\n                        }\n                        return totalColGroupWidth > bodyWidth ? this.config.scroller.size : 0;\n                    }.call(this);\n\n                    if (horizontalScrollerHeight > 0) {\n                        verticalScrollerWidth = CT_HEIGHT - headerHeight - pageHeight - footSumHeight - horizontalScrollerHeight < this.list.length * this.xvar.bodyTrHeight ? this.config.scroller.size : 0;\n                    }\n                }).call(this);\n\n                // 수평 너비 결정\n                CT_INNER_WIDTH = CT_WIDTH - verticalScrollerWidth;\n                // 수직 스크롤러의 높이 결정.\n                CT_INNER_HEIGHT = CT_HEIGHT - pageHeight - horizontalScrollerHeight;\n\n                var bodyHeight = CT_INNER_HEIGHT - headerHeight;\n\n                var panelDisplayProcess = function panelDisplayProcess(panel, vPosition, hPosition, containerType) {\n                    var css = {};\n                    var isHide = false;\n\n                    switch (hPosition) {\n                        case \"aside\":\n                            if (asidePanelWidth === 0) {\n                                isHide = true;\n                            } else {\n                                css[\"left\"] = 0;\n                                css[\"width\"] = asidePanelWidth;\n                            }\n                            break;\n                        case \"left\":\n                            if (cfg.frozenColumnIndex === 0) {\n                                isHide = true;\n                            } else {\n                                css[\"left\"] = asidePanelWidth;\n                                css[\"width\"] = frozenPanelWidth;\n                            }\n                            break;\n                        case \"right\":\n                            if (!cfg.rightSum) {\n                                isHide = true;\n                            } else {}\n                            break;\n                        default:\n                            if (containerType !== \"page\") {\n                                if (cfg.frozenColumnIndex === 0) {\n                                    css[\"left\"] = asidePanelWidth;\n                                } else {\n                                    css[\"left\"] = frozenPanelWidth + asidePanelWidth;\n                                }\n                                css[\"width\"] = CT_INNER_WIDTH - asidePanelWidth - frozenPanelWidth - rightPanelWidth;\n                            }\n                            break;\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    if (containerType === \"body\") {\n                        switch (vPosition) {\n                            case \"top\":\n                                if (cfg.frozenRowIndex == 0) {\n                                    isHide = true;\n                                } else {\n                                    css[\"top\"] = 0;\n                                    css[\"height\"] = frozenRowHeight;\n                                }\n                                break;\n                            case \"bottom\":\n                                if (!cfg.footSum) {\n                                    isHide = true;\n                                } else {\n                                    css[\"top\"] = bodyHeight - footSumHeight;\n                                    css[\"height\"] = footSumHeight; // footSum height\n                                }\n                                break;\n                            default:\n\n                                css[\"top\"] = frozenRowHeight;\n                                css[\"height\"] = bodyHeight - frozenRowHeight - footSumHeight;\n\n                                break;\n                        }\n                    } else if (containerType === \"header\") {\n                        css[\"height\"] = headerHeight;\n                    } else if (containerType === \"page\") {\n                        if (pageHeight == 0) {\n                            isHide = true;\n                        } else {\n                            css[\"height\"] = pageHeight;\n                        }\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    panel.css(css);\n                    return this;\n                };\n                var scrollerDisplayProcess = function scrollerDisplayProcess(panel, scrollerWidth, scrollerHeight, containerType) {\n                    var css = {};\n                    var isHide = false;\n\n                    switch (containerType) {\n                        case \"vertical\":\n                            if (scrollerWidth > 0) {\n                                css[\"width\"] = scrollerWidth;\n                                css[\"height\"] = CT_INNER_HEIGHT;\n                                css[\"bottom\"] = scrollerHeight + pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                        case \"horizontal\":\n                            if (scrollerHeight > 0) {\n                                css[\"width\"] = CT_INNER_WIDTH;\n                                css[\"height\"] = scrollerHeight;\n                                css[\"right\"] = scrollerWidth;\n                                css[\"bottom\"] = pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                        case \"corner\":\n                            if (scrollerWidth > 0 && scrollerHeight > 0) {\n                                css[\"width\"] = scrollerWidth;\n                                css[\"height\"] = scrollerHeight;\n                                css[\"bottom\"] = pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    panel.show().css(css);\n                };\n\n                this.$[\"container\"][\"header\"].css({ height: headerHeight });\n                this.$[\"container\"][\"body\"].css({ height: bodyHeight });\n\n                // 각 패널들의 크기 표시여부를 결정합니다\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-header\"], \"\", \"aside\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-header\"], \"\", \"left\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"header\"], \"\", \"\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-header\"], \"\", \"right\", \"header\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-aside-body\"], \"top\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-left-body\"], \"top\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-body\"], \"top\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-right-body\"], \"top\", \"right\", \"body\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-body\"], \"\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-body\"], \"\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"body\"], \"\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-body\"], \"\", \"right\", \"body\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-aside-body\"], \"bottom\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-left-body\"], \"bottom\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-body\"], \"bottom\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-right-body\"], \"bottom\", \"right\", \"body\");\n\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"vertical\"], verticalScrollerWidth, horizontalScrollerHeight, \"vertical\");\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"horizontal\"], verticalScrollerWidth, horizontalScrollerHeight, \"horizontal\");\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"corner\"], verticalScrollerWidth, horizontalScrollerHeight, \"corner\");\n\n                panelDisplayProcess.call(this, this.$[\"container\"][\"page\"], \"\", \"\", \"page\");\n            },\n                sortColumns = function sortColumns(_sortInfo) {\n                GRID.header.repaint.call(this);\n\n                if (U.isFunction(this.config.remoteSort)) {\n                    var that = { sortInfo: [] };\n                    for (var k in _sortInfo) {\n                        that.sortInfo.push({\n                            key: k,\n                            orderBy: _sortInfo[k].orderBy,\n                            seq: _sortInfo[k].seq\n                        });\n                    }\n                    that.sortInfo.sort(function (a, b) {\n                        return a.seq > b.seq;\n                    });\n                    this.config.remoteSort.call(that, that);\n                } else {\n                    if (this.config.body.grouping) {\n                        this.list = GRID.data.initData.call(this, GRID.data.sort.call(this, _sortInfo, GRID.data.clearGroupingData.call(this, this.list)));\n                    } else {\n                        this.list = GRID.data.sort.call(this, _sortInfo, GRID.data.clearGroupingData.call(this, this.list));\n                    }\n                    GRID.body.repaint.call(this, true);\n                    GRID.scroller.resize.call(this);\n                }\n            };\n\n            /// private end\n\n            /**\n             * Preferences of grid UI\n             * @method ax5grid.setConfig\n             * @param {Object} _config - 클래스 속성값\n             * @param {Element} _config.target\n             * @param {Number} [_config.frozenColumnIndex=0]\n             * @param {Number} [_config.frozenRowIndex=0]\n             * @param {Boolean} [_config.showLineNumber=false]\n             * @param {Boolean} [_config.showRowSelector=false]\n             * @param {Boolean} [_config.multipleSelect=true]\n             * @param {Number} [_config.columnMinWidth=100]\n             * @param {Number} [_config.lineNumberColumnWidth=30]\n             * @param {Number} [_config.rowSelectorColumnWidth=25]\n             * @param {Boolean} [_config.sortable=false]\n             * @param {Boolean} [_config.multiSort=false]\n             * @param {Function} [_config.remoteSort=false]\n             * @param {Object} [_config.header]\n             * @param {String} [_config.header.align]\n             * @param {Number} [_config.header.columnHeight=25]\n             * @param {Number} [_config.header.columnPadding=3]\n             * @param {Number} [_config.header.columnBorderWidth=1]\n             * @param {Object} [_config.body]\n             * @param {String} [_config.body.align]\n             * @param {Number} [_config.body.columnHeight=25]\n             * @param {Number} [_config.body.columnPadding=3]\n             * @param {Number} [_config.body.columnBorderWidth=1]\n             * @param {Object} [_config.body.grouping]\n             * @param {Array} [_config.body.grouping.by] - list grouping keys\n             * @param {Array} [_config.body.grouping.columns] - list grouping columns\n             * @param {Object} [_config.page]\n             * @param {Number} [_config.page.height=25]\n             * @param {Boolean} [_config.page.display=true]\n             * @param {Number} [_config.page.navigationItemCount=5]\n             * @param {Object} [_config.scroller]\n             * @param {Number} [_config.scroller.size=15]\n             * @param {Number} [_config.scroller.barMinSize=15]\n             * @param {Number} [_config.scroller.trackPadding=4]\n             * @param {Object} [_config.columnKeys]\n             * @param {String} [_config.columnKeys.selected=\"_SELECTED\"]\n             * @param {Object[]} _config.columns\n             * @param {String} _config.columns[].key\n             * @param {String} _config.columns[].label\n             * @param {Number} _config.columns[].width\n             * @param {(String|Function)} _config.columns[].styleClass\n             * @param {Boolean} _config.columns[].enableFilter\n             * @param {Boolean} _config.columns[].sortable\n             * @param {String} _config.columns[].align\n             * @param {(String|Function)} _config.columns[].formatter\n             * @param {Object} _config.columns[].editor\n             * @param {String} _config.columns[].editor.type - text,number,money,date\n             * @param {Object} _config.columns[].editor.config\n             * @param {Array} _config.columns[].editor.updateWith\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * var firstGrid = new ax5.ui.grid();\n             *\n             * ax5.ui.grid.formatter[\"myType\"] = function () {\n             *     return \"myType\" + (this.value || \"\");\n             * };\n             * ax5.ui.grid.formatter[\"capital\"] = function(){\n             *     return (''+this.value).toUpperCase();\n             * };\n             *\n             * ax5.ui.grid.collector[\"myType\"] = function () {\n             *     return \"myType\" + (this.value || \"\");\n             * };\n             *\n             * var sampleData = [\n             *     {a: \"A\", b: \"A01\", price: 1000, amount: 12, cost: 12000, saleDt: \"2016-08-29\", customer: \"장기영\", saleType: \"A\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1100, amount: 11, cost: 12100, saleDt: \"2016-08-28\", customer: \"장서우\", saleType: \"B\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"C01\", price: 1200, amount: 10, cost: 12000, saleDt: \"2016-08-27\", customer: \"이영희\", saleType: \"A\"},\n             *     {companyJson: {\"대표자명\":\"위세라\"}, a: \"A\", b: \"A01\", price: 1300, amount: 8, cost: 10400, saleDt: \"2016-08-25\", customer: \"황인서\", saleType: \"C\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1400, amount: 5, cost: 7000, saleDt: \"2016-08-29\", customer: \"황세진\", saleType: \"D\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"A01\", price: 1500, amount: 2, cost: 3000, saleDt: \"2016-08-26\", customer: \"이서연\", saleType: \"A\"}\n             * ];\n             *\n             * var gridView = {\n             *     initView: function () {\n             *         firstGrid.setConfig({\n             *             target: $('[data-ax5grid=\"first-grid\"]'),\n             *             columns: [\n             *                 {\n             *                     key: \"companyJson['대표자명']\",\n             *                     label: \"필드A\",\n             *                     width: 80,\n             *                     styleClass: function () {\n             *                         return \"ABC\";\n             *                     },\n             *                     enableFilter: true,\n             *                     align: \"center\",\n             *                     editor: {type:\"text\"}\n             *                 },\n             *                 {key: \"b\", label: \"필드B\", align: \"center\"},\n             *                 {\n             *                     key: undefined, label: \"필드C\", columns: [\n             *                         {key: \"price\", label: \"단가\", formatter: \"money\", align: \"right\"},\n             *                         {key: \"amount\", label: \"수량\", formatter: \"money\", align: \"right\"},\n             *                         {key: \"cost\", label: \"금액\", align: \"right\", formatter: \"money\"}\n             *                     ]\n             *                 },\n             *                 {key: \"saleDt\", label: \"판매일자\", align: \"center\"},\n             *                 {key: \"customer\", label: \"고객명\"},\n             *                 {key: \"saleType\", label: \"판매타입\"}\n             *             ]\n             *         });\n             *         return this;\n             *     },\n             *     setData: function (_pageNo) {\n             *\n             *         firstGrid.setData(sampleData);\n             *\n             *         return this;\n             *     }\n             * };\n             * ```\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5grid\", \"401\", \"init\"));\n                    return this;\n                }\n\n                // 그리드의 이벤트 정의 구간\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.body.onDataChanged;\n                // todo event에 대한 추가 정의 필요\n\n                this.$target = jQuery(cfg.target);\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5grid-config\"), true));\n\n                var grid = this.config = cfg;\n\n                if (!this.config.height) {\n                    this.config.height = this.$target.height();\n                }\n\n                if (!this.id) this.id = this.$target.data(\"data-ax5grid-id\");\n                if (!this.id) {\n                    //this.id = 'ax5grid-' + ax5.getGuid();\n                    this.id = 'ax5grid-' + this.instanceId;\n                    this.$target.data(\"data-ax5grid-id\", grid.id);\n                }\n\n                ///========\n                // 그리드를 그리기 위한 가장 기초적인 작업 뼈대와 틀을 준비합니다. 이 메소드는 초기화 시 한번만 호출 되게 됩니다.\n                initGrid.call(this);\n\n                // columns데이터를 분석하여 미리 처리해야하는 데이터를 정리합니다.\n                initColumns.call(this, grid.columns);\n                resetColGroupWidth.call(this);\n\n                // footSum 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.footSum) initFootSum.call(this, grid.footSum);\n\n                // bodyGrouping 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.body.grouping) initBodyGroup.call(this, grid.body.grouping);\n\n                // 그리드의 각 요소의 크기를 맞춤니다.\n                alignGrid.call(this, true);\n\n                // columns의 데이터로 header데이터를 만들고\n                GRID.header.init.call(this);\n                // header를 출력합니다.\n                GRID.header.repaint.call(this);\n\n                // columns의 데이터로 body데이터를 만들고\n                GRID.body.init.call(this);\n                // body를 출력합니다.\n                GRID.body.repaint.call(this);\n\n                // scroller\n                GRID.scroller.init.call(this);\n                GRID.scroller.resize.call(this);\n\n                jQuery(window).bind(\"resize.ax5grid-\" + this.id, function () {\n                    alignGrid.call(this);\n                    GRID.scroller.resize.call(this);\n                }.bind(this));\n\n                jQuery(document.body).on(\"click.ax5grid-\" + this.id, function (e) {\n                    var isPickerClick = false;\n                    var target = U.findParentNode(e.target, function (_target) {\n                        if (isPickerClick = _target.getAttribute(\"data-ax5grid-inline-edit-picker\")) {\n                            return true;\n                        }\n                        return _target.getAttribute(\"data-ax5grid-container\") === \"root\";\n                    });\n\n                    if (target && target.getAttribute(\"data-ax5grid-instance\") === this.id) {\n                        self.focused = true;\n                    } else {\n                        self.focused = false;\n                        GRID.body.blur.call(this);\n                    }\n                }.bind(this));\n\n                var ctrlKeys = {\n                    \"33\": \"KEY_PAGEUP\",\n                    \"34\": \"KEY_PAGEDOWN\",\n                    \"35\": \"KEY_END\",\n                    \"36\": \"KEY_HOME\",\n                    \"37\": \"KEY_LEFT\",\n                    \"38\": \"KEY_UP\",\n                    \"39\": \"KEY_RIGHT\",\n                    \"40\": \"KEY_DOWN\"\n                };\n                jQuery(window).on(\"keydown.ax5grid-\" + this.instanceId, function (e) {\n                    if (self.focused) {\n                        if (self.isInlineEditing) {\n\n                            if (e.which == ax5.info.eventKeys.ESC) {\n                                self.keyDown(\"ESC\", e.originalEvent);\n                            } else if (e.which == ax5.info.eventKeys.RETURN) {\n                                self.keyDown(\"RETURN\", e.originalEvent);\n                            } else if (e.which == ax5.info.eventKeys.TAB) {\n                                self.keyDown(\"TAB\", e.originalEvent);\n                                U.stopEvent(e);\n                            } else if (e.which == ax5.info.eventKeys.UP) {\n                                self.keyDown(\"RETURN\", { shiftKey: true });\n                            } else if (e.which == ax5.info.eventKeys.DOWN) {\n                                self.keyDown(\"RETURN\", {});\n                            }\n                        } else {\n\n                            if (e.metaKey || e.ctrlKey) {\n                                if (e.which == 67) {\n                                    // c\n                                    self.copySelect();\n                                }\n                            } else {\n                                if (ctrlKeys[e.which]) {\n                                    self.keyDown(ctrlKeys[e.which], e.originalEvent);\n                                    U.stopEvent(e);\n                                } else if (e.which == ax5.info.eventKeys.ESC) {\n                                    if (self.focused) {\n                                        GRID.body.blur.call(self);\n                                    }\n                                } else if (e.which == ax5.info.eventKeys.RETURN) {\n                                    self.keyDown(\"RETURN\", e.originalEvent);\n                                } else if (e.which == ax5.info.eventKeys.TAB) {\n                                    //self.keyDown(\"RETURN\", e.originalEvent);\n                                    U.stopEvent(e);\n                                } else if (e.which != ax5.info.eventKeys.SPACE && Object.keys(self.focusedColumn).length) {\n                                    self.keyDown(\"INLINE_EDIT\", e.originalEvent);\n                                }\n                            }\n                        }\n                    }\n                });\n\n                // 그리드 레이아웃이 모든 준비를 마친시점에 onLoad존재 여부를 확인하고 호출하여 줍니다.\n                setTimeout(function () {\n                    if (this.onLoad) {\n                        this.onLoad.call({\n                            self: this\n                        });\n                    }\n                }.bind(this));\n                return this;\n            };\n\n            /**\n             * align grid size\n             * @method ax5grid.align\n             * @returns {ax5grid}\n             */\n            this.align = function () {\n                alignGrid.call(this);\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.keyDown\n             * @param {String} _keyName\n             * @param {Event|Object} _data\n             * @return {ax5grid}\n             */\n            this.keyDown = function () {\n                var processor = {\n                    \"KEY_UP\": function KEY_UP() {\n                        GRID.body.moveFocus.call(this, \"UP\");\n                    },\n                    \"KEY_DOWN\": function KEY_DOWN() {\n                        GRID.body.moveFocus.call(this, \"DOWN\");\n                    },\n                    \"KEY_LEFT\": function KEY_LEFT() {\n                        GRID.body.moveFocus.call(this, \"LEFT\");\n                    },\n                    \"KEY_RIGHT\": function KEY_RIGHT() {\n                        GRID.body.moveFocus.call(this, \"RIGHT\");\n                    },\n                    \"KEY_HOME\": function KEY_HOME() {\n                        GRID.body.moveFocus.call(this, \"HOME\");\n                    },\n                    \"KEY_END\": function KEY_END() {\n                        GRID.body.moveFocus.call(this, \"END\");\n                    },\n                    \"INLINE_EDIT\": function INLINE_EDIT(_e) {\n                        GRID.body.inlineEdit.active.call(this, this.focusedColumn, _e);\n                        if (!/[0-9a-zA-Z]/.test(_e.key)) {\n                            U.stopEvent(_e);\n                        }\n                    },\n                    \"ESC\": function ESC(_e) {\n                        GRID.body.inlineEdit.keydown.call(this, \"ESC\");\n                    },\n                    \"RETURN\": function RETURN(_e) {\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey);\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, _e.shiftKey ? \"UP\" : \"DOWN\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                                }\n                            }\n                        }\n                        if (activeEditLength == 0) {\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                        }\n                    },\n                    \"TAB\": function TAB(_e) {\n\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey, { moveFocus: true });\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, _e.shiftKey ? \"LEFT\" : \"RIGHT\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\", undefined, { moveFocus: true });\n                                }\n                            }\n                        }\n                    }\n                };\n                return function (_act, _data) {\n                    if (_act in processor) processor[_act].call(this, _data);\n                    return this;\n                };\n            }();\n\n            /**\n             * @method ax5grid.copySelect\n             * @returns {Boolean} copysuccess\n             */\n            this.copySelect = function () {\n                var copysuccess;\n                var $clipBoard = this.$[\"form\"][\"clipboard\"];\n                var copyTextArray = [];\n                var copyText = \"\";\n\n                var _rowIndex, _colIndex, _dindex;\n                var _di = 0;\n                for (var c in this.selectedColumn) {\n                    var _column = this.selectedColumn[c];\n\n                    if (_column) {\n                        if (typeof _dindex === \"undefined\") {\n                            _dindex = _column.dindex;\n                            _rowIndex = _column.rowIndex;\n                            _colIndex = _column.rowIndex;\n                        }\n\n                        if (_dindex != _column.dindex || _rowIndex != _column.rowIndex) {\n                            _di++;\n                        }\n\n                        if (!copyTextArray[_di]) {\n                            copyTextArray[_di] = [];\n                        }\n                        var originalColumn = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                        if (originalColumn) {\n                            if (this.list[_column.dindex].__isGrouping) {\n                                copyTextArray[_di].push(this.list[_column.dindex][_column.colIndex]);\n                            } else {\n                                copyTextArray[_di].push(this.list[_column.dindex][originalColumn.key]);\n                            }\n                        } else {\n                            copyTextArray[_di].push(\"\");\n                        }\n\n                        _dindex = _column.dindex;\n                        _rowIndex = _column.rowIndex;\n                    }\n                }\n\n                copyTextArray.forEach(function (r) {\n                    copyText += r.join('\\t') + \"\\n\";\n                });\n\n                $clipBoard.get(0).innerText = copyText;\n                $clipBoard.select();\n\n                try {\n                    copysuccess = document.execCommand(\"copy\");\n                } catch (e) {\n                    copysuccess = false;\n                }\n                return copysuccess;\n            };\n\n            /**\n             * @method ax5grid.setData\n             * @param {Array} _data\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setData({\n             *  list: [],\n             *  page: {\n             *      currentPage: 0,\n             *      pageSize: 50,\n             *      totalElements: 500,\n             *      totalPages: 100\n             *  }\n             * });\n             *\n             * // onlyList\n             * ax5Grid.setData([]);\n             * ```\n             */\n            this.setData = function (_data) {\n                GRID.data.set.call(this, _data);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this);\n                GRID.scroller.resize.call(this);\n                GRID.page.navigationUpdate.call(this);\n                GRID.body.scrollTo.call(this, { top: 0 });\n                return this;\n            };\n\n            /**\n             * @method ax5grid.getList\n             * @param {String} _type\n             * @returns {Array}\n             * @example\n             * ```js\n             * ax5Grid.getList();\n             * ax5Grid.getList(\"modified\");\n             * ax5Grid.getList(\"deleted\");\n             * ```\n             */\n            this.getList = function (_type) {\n                return GRID.data.getList.call(this, _type);\n            };\n\n            /**\n             * @method ax5grid.setHeight\n             * @param {Number} _height\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setHeight(height);\n             * ```\n             */\n            this.setHeight = function (_height) {\n                //console.log(this.$target);\n                if (_height == \"100%\") {\n                    _height = this.$target.offsetParent().innerHeight();\n                }\n                this.$target.css({ height: _height });\n                this.$[\"container\"][\"root\"].css({ height: _height });\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.addRow\n             * @param {Object} _row\n             * @param {Number|String} [_dindex=last]\n             * @param {Object} [_options] - options of addRow\n             * @param {Boolean} [_options.sort] - sortData\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.addRow($.extend({}, {...}), \"first\");\n             * ```\n             */\n            this.addRow = function (_row, _dindex, _options) {\n                GRID.data.add.call(this, _row, _dindex, _options);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.body.moveFocus.call(this, this.config.body.grouping ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.removeRow\n             * @param {Number|String} [_dindex=last]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.removeRow();\n             * ax5Grid.removeRow(\"first\");\n             * ax5Grid.removeRow(\"last\");\n             * ax5Grid.removeRow(1);\n             * ```\n             */\n            this.removeRow = function (_dindex) {\n                GRID.data.remove.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.body.moveFocus.call(this, this.config.body.grouping ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.updateRow\n             * @param {Object} _row\n             * @param {Number} _dindex\n             * @returns {ax5grid}\n             */\n            this.updateRow = function (_row, _dindex) {\n                GRID.data.update.call(this, _row, _dindex);\n                GRID.body.repaintRow.call(this, _dindex);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.deleteRow\n             * @param {Number|String} _dindex\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.deleteRow(\"first\");\n             * ax5Grid.deleteRow(\"last\");\n             * ax5Grid.deleteRow(1);\n             * ax5Grid.deleteRow(\"selected\");\n             * ```\n             */\n            this.deleteRow = function (_dindex) {\n                GRID.data.deleteRow.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                // 삭제시엔 포커스 ?\n                // GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.addColumn\n             * @param {Object} _column\n             * @param {Number|String} [_cindex=last]\n             * @returns {ax5grid}\n             */\n            this.addColumn = function () {\n                var processor = {\n                    \"first\": function first(_column) {\n                        this.config.columns = [].concat(_column).concat(this.config.columns);\n                    },\n                    \"last\": function last(_column) {\n                        this.config.columns = this.config.columns.concat([].concat(_column));\n                    }\n                };\n\n                return function (_column, _cindex) {\n                    if (typeof _column === \"undefined\") throw '_column must not be null';\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _column);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        this.config.columns.splice(_cindex, [].concat(_column));\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                };\n            }();\n\n            /**\n             * @method ax5grid.removeCloumn\n             * @param {Number|String} [_cindex=last]\n             * @returns {ax5grid}\n             */\n            this.removeColumn = function () {\n                var processor = {\n                    \"first\": function first(_cindex) {\n                        this.config.columns.splice(_cindex, 1);\n                    },\n                    \"last\": function last() {\n                        this.config.columns.splice(this.config.columns.length - 1, 1);\n                    }\n                };\n                return function (_cindex) {\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _cindex);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        //\n                        this.config.columns.splice(_cindex, 1);\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                };\n            }();\n\n            /**\n             * @method ax5grid.updateColumn\n             * @param {Object} _column\n             * @param {Number} _cindex\n             * @returns {ax5grid}\n             */\n            this.updateColumn = function (_column, _cindex) {\n                if (!U.isNumber(_cindex)) {\n                    throw 'invalid argument _cindex';\n                }\n                //\n                this.config.columns.splice(_cindex, 1, _column);\n                onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                return this;\n            };\n\n            /**\n             * @method ax5grid.setColumnWidth\n             * @param {Number} _width\n             * @param {Number} _cindex\n             * @returns {ax5grid}\n             */\n            this.setColumnWidth = function (_width, _cindex) {\n                this.colGroup[this.xvar.columnResizerIndex]._width = _width;\n                this.needToPaintSum = true;\n\n                // 컬럼너비 변경사항 적용.\n                GRID.header.repaint.call(this);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n\n                alignGrid.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.getColumnSortInfo\n             * @returns {Object} sortInfo\n             */\n            this.getColumnSortInfo = function () {\n                var that = { sortInfo: [] };\n                for (var k in this.sortInfo) {\n                    that.sortInfo.push({\n                        key: k,\n                        orderBy: this.sortInfo[k].orderBy,\n                        seq: this.sortInfo[k].seq\n                    });\n                }\n                that.sortInfo.sort(function (a, b) {\n                    return a.seq > b.seq;\n                });\n                return that.sortInfo;\n            };\n\n            /**\n             * @method ax5grid.setColumnSort\n             * @param {Object} _sortInfo\n             * @param {Object} _sortInfo.key\n             * @param {Number} _sortInfo.key.seq - seq of sortOrder\n             * @param {String} _sortInfo.key.orderBy - \"desc\"|\"asc\"\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5grid.setColumnSort({a:{seq:0, orderBy:\"desc\"}, b:{seq:1, orderBy:\"asc\"}});\n             * ```\n             */\n            this.setColumnSort = function (_sortInfo) {\n                if (typeof _sortInfo !== \"undefined\") {\n                    this.sortInfo = _sortInfo;\n                    GRID.header.applySortStatus.call(this, _sortInfo);\n                }\n\n                sortColumns.call(this, _sortInfo || this.sortInfo);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.select\n             * @param {Number|Object} _selectObject\n             * @param {Number} _selectObject.index - index of row\n             * @param {Number} _selectObject.rowIndex - rowIndex of columns\n             * @param {Number} _selectObject.conIndex - colIndex of columns\n             * @param {Object} _options\n             * @param {Boolean} _options.selectedClear\n             * @param {Boolean} _options.selected\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.select(0);\n             * firstGrid.select(0, {selected: true});\n             * firstGrid.select(0, {selected: false});\n             * ```\n             */\n            this.select = function (_selectObject, _options) {\n                if (U.isNumber(_selectObject)) {\n                    var dindex = _selectObject;\n\n                    if (!this.config.multipleSelect) {\n                        this.clearSelect();\n                    } else {\n                        if (_options && _options.selectedClear) {\n                            this.clearSelect();\n                        }\n                    }\n\n                    GRID.data.select.call(this, dindex, _options && _options.selected);\n                    GRID.body.updateRowState.call(this, [\"selected\"], dindex);\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5grid.clearSelect\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.clearSelect();\n             * ```\n             */\n            this.clearSelect = function () {\n                GRID.body.updateRowState.call(this, [\"selectedClear\"]);\n                GRID.data.clearSelect.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.selectAll\n             * @param {Object} _options\n             * @param {Boolean} _options.selected\n             * @param {Function} _options.filter\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.selectAll();\n             * firstGrid.selectAll({selected: true});\n             * firstGrid.selectAll({selected: false});\n             * firstGrid.selectAll({filter: function(){\n             *      return this[\"b\"] == \"A01\";\n             * });\n             * firstGrid.selectAll({selected: true, filter: function(){\n             *      return this[\"b\"] == \"A01\";\n             * });\n             * ```\n             */\n            this.selectAll = function (_options) {\n                GRID.data.selectAll.call(this, _options && _options.selected, _options);\n                GRID.body.updateRowStateAll.call(this, [\"selected\"]);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.exportExcel\n             * @param {String} _fileName\n             * @returns {ax5grid|String}\n             * @example\n             * ```js\n             * firstGrid.exportExcel(\"grid-to-excel.xls\");\n             * console.log(firstGrid.exportExcel());\n             * ```\n             */\n            this.exportExcel = function (_fileName) {\n                var table = [];\n                table.push('<table border=\"1\">');\n                table.push(GRID.header.getExcelString.call(this));\n                table.push(GRID.body.getExcelString.call(this));\n                table.push('</table>');\n\n                if (typeof _fileName === \"undefined\") {\n                    return table.join('');\n                } else {\n                    GRID.excel.export.call(this, [table.join('')], _fileName);\n                }\n\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                UI.grid_instance = UI.grid_instance || [];\n                UI.grid_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n        return ax5grid;\n    }());\n\n    GRID = ax5.ui.grid;\n})();\n\n// todo : excel export\n// todo : merge cells\n// todo : filter\n// todo : body menu\n// todo : column reorder\n// todo : editor 필수값 속성 지정\n\n\n// ax5.ui.grid.body\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var columnSelect = {\n        focusClear: function focusClear() {\n            var self = this;\n            for (var c in self.focusedColumn) {\n                var _column = self.focusedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName].find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]').removeAttr('data-ax5grid-column-focused');\n                }\n            }\n            self.focusedColumn = {};\n        },\n        clear: function clear() {\n            var self = this;\n            for (var c in self.selectedColumn) {\n                var _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName].find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]').removeAttr('data-ax5grid-column-selected');\n                }\n            }\n            self.selectedColumn = {};\n        },\n        init: function init(column) {\n            var self = this;\n            if (this.isInlineEditing) {\n                for (var editKey in this.inlineEditing) {\n                    if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n                        return this;\n                    }\n                }\n            }\n\n            // focus\n            columnSelect.focusClear.call(self);\n            self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n                panelName: column.panelName,\n                dindex: column.dindex,\n                rowIndex: column.rowIndex,\n                colIndex: column.colIndex,\n                colspan: column.colspan\n            };\n\n            // select\n            columnSelect.clear.call(self);\n            self.xvar.selectedRange = {\n                start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n                end: null\n            };\n            self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = function (data) {\n                if (data) {\n                    return false;\n                } else {\n                    return {\n                        panelName: column.panelName,\n                        dindex: column.dindex,\n                        rowIndex: column.rowIndex,\n                        colIndex: column.colIndex,\n                        colspan: column.colspan\n                    };\n                }\n            }(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n            this.$.panel[column.panelName].find('[data-ax5grid-tr-data-index=\"' + column.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + column.colIndex + '\"]').attr('data-ax5grid-column-focused', \"true\").attr('data-ax5grid-column-selected', \"true\");\n\n            if (this.isInlineEditing) {\n                GRID.body.inlineEdit.deActive.call(this, \"RETURN\");\n            }\n        },\n        update: function update(column) {\n            var self = this;\n            var dindex, colIndex, rowIndex, trl;\n\n            self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n            columnSelect.clear.call(self);\n\n            var range = {\n                r: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n                },\n                c: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n                }\n            };\n\n            dindex = range.r.s;\n            for (; dindex <= range.r.e; dindex++) {\n\n                trl = this.bodyRowTable.rows.length;\n                rowIndex = 0;\n                for (; rowIndex < trl; rowIndex++) {\n                    colIndex = range.c.s;\n                    for (; colIndex <= range.c.e; colIndex++) {\n                        var _panels = [],\n                            panelName = \"\";\n\n                        if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n                        if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                        _panels.push(\"body\");\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                        panelName = _panels.join(\"-\");\n\n                        self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n                            panelName: panelName,\n                            dindex: dindex,\n                            rowIndex: rowIndex,\n                            colIndex: colIndex,\n                            colspan: column.colspan\n                        };\n\n                        _panels = null;\n                        panelName = null;\n                    }\n                }\n            }\n            dindex = null;\n            colIndex = null;\n            rowIndex = null;\n\n            for (var c in self.selectedColumn) {\n                var _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName].find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]').attr('data-ax5grid-column-selected', 'true');\n                }\n            }\n        }\n    };\n\n    var columnSelector = {\n        \"on\": function on(cell) {\n            var self = this;\n\n            if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n                return;\n            }\n\n            columnSelect.init.call(self, cell);\n\n            this.$[\"container\"][\"body\"].on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax5grid-column-attr=\"default\"]', function (e) {\n                if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                    columnSelect.update.call(self, {\n                        panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                        dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                        rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                        colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                        colspan: Number(this.getAttribute(\"colspan\"))\n                    });\n                    U.stopEvent(e);\n                }\n            }).on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n                columnSelector.off.call(self);\n            }).on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n                columnSelector.off.call(self);\n            });\n\n            jQuery(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);\n        },\n        \"off\": function off() {\n\n            this.$[\"container\"][\"body\"].off(\"mousemove.ax5grid-\" + this.instanceId).off(\"mouseup.ax5grid-\" + this.instanceId).off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');\n        }\n    };\n\n    var updateRowState = function updateRowState(_states, _dindex, _data) {\n        var self = this;\n        var cfg = this.config;\n\n        var processor = {\n            \"selected\": function selected(_dindex) {\n                var i = this.$.livePanelKeys.length;\n                while (i--) {\n                    this.$.panel[this.$.livePanelKeys[i]].find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]').attr(\"data-ax5grid-selected\", this.list[_dindex][cfg.columnKeys.selected]);\n                }\n            },\n            \"selectedClear\": function selectedClear() {\n                var si = this.selectedDataIndexs.length;\n                while (si--) {\n                    var dindex = this.selectedDataIndexs[si];\n                    var i = this.$.livePanelKeys.length;\n                    while (i--) {\n                        this.$.panel[this.$.livePanelKeys[i]].find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]').attr(\"data-ax5grid-selected\", false);\n                        this.list[dindex][cfg.columnKeys.selected] = false;\n                    }\n                }\n            },\n            \"cellChecked\": function cellChecked(_dindex, _data) {\n                var key = _data.key;\n                var rowIndex = _data.rowIndex;\n                var colIndex = _data.colIndex;\n\n                var panelName = function () {\n                    var _panels = [];\n                    if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n                    if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                    _panels.push(\"body\");\n                    if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                    return _panels.join(\"-\");\n                }.call(this);\n\n                this.$.panel[panelName].find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]').find('[data-ax5grid-column-rowIndex=\"' + rowIndex + '\"][data-ax5grid-column-colIndex=\"' + colIndex + '\"]').find('[data-ax5grid-editor=\"checkbox\"]').attr(\"data-ax5grid-checked\", '' + _data.checked);\n            }\n        };\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _dindex, _data);\n        });\n    };\n\n    var updateRowStateAll = function updateRowStateAll(_states, _data) {\n        var self = this;\n        var cfg = this.config;\n\n        var processor = {\n            \"selected\": function selected(_dindex) {\n                GRID.body.repaint.call(this, true);\n            }\n        };\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _data);\n        });\n    };\n\n    var init = function init() {\n        var self = this;\n\n        this.$[\"container\"][\"body\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            var panelName, attr, row, col, dindex, rowIndex, colIndex, disableSelection;\n            var targetClick = {\n                \"default\": function _default(_column) {\n                    var column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                    var that = {\n                        self: self,\n                        page: self.page,\n                        list: self.list,\n                        item: self.list[_column.dindex],\n                        dindex: _column.dindex,\n                        rowIndex: _column.rowIndex,\n                        colIndex: _column.colIndex,\n                        column: column,\n                        value: self.list[_column.dindex][column.key]\n                    };\n\n                    if (column.editor && column.editor.type == \"checkbox\") {\n                        // todo : GRID.inlineEditor에서 처리 할수 있도록 구문 변경 필요.\n                        var value = GRID.data.getValue.call(self, _column.dindex, column.key);\n\n                        var checked, newValue;\n                        if (column.editor.config && column.editor.config.trueValue) {\n                            if (checked = !(value == column.editor.config.trueValue)) {\n                                newValue = column.editor.config.trueValue;\n                            } else {\n                                newValue = column.editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = value == false || value == \"false\" || value < \"1\" ? \"true\" : \"false\";\n                        }\n\n                        GRID.data.setValue.call(self, _column.dindex, column.key, newValue);\n\n                        updateRowState.call(self, [\"cellChecked\"], _column.dindex, {\n                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                            editorConfig: column.editor.config, checked: checked\n                        });\n                    } else {\n                        if (self.config.body.onClick) {\n                            self.config.body.onClick.call(that);\n                        }\n                    }\n                },\n                \"rowSelector\": function rowSelector(_column) {\n                    if (self.list[_column.dindex][self.config.columnKeys.disableSelection]) {\n                        return false;\n                    }\n\n                    if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.dindex) {\n                        GRID.body.updateRowState.call(self, [\"selectedClear\"]);\n                        GRID.data.clearSelect.call(self);\n                    }\n\n                    GRID.data.select.call(self, _column.dindex, undefined, {\n                        internalCall: true\n                    });\n                    updateRowState.call(self, [\"selected\"], _column.dindex);\n                },\n                \"lineNumber\": function lineNumber(_column) {}\n            };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n\n            if (attr in targetClick) {\n                targetClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            }\n        });\n        this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax5grid-column-attr]', function (e) {\n            var panelName, attr, row, col, dindex, rowIndex, colIndex;\n            var targetClick = {\n                \"default\": function _default(_column) {\n\n                    if (this.isInlineEditing) {\n                        for (var columnKey in this.inlineEditing) {\n                            if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                                return this;\n                            }\n                        }\n                    }\n\n                    var column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                    var value = \"\";\n                    if (column) {\n                        if (!self.list[dindex].__isGrouping) {\n                            value = GRID.data.getValue.call(self, dindex, column.key);\n                        }\n                    }\n                    GRID.body.inlineEdit.active.call(self, self.focusedColumn, e, value);\n                },\n                \"rowSelector\": function rowSelector(_column) {},\n                \"lineNumber\": function lineNumber(_column) {}\n            };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n\n            if (attr in targetClick) {\n                targetClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            }\n        });\n        this.$[\"container\"][\"body\"].on(\"mouseover\", \"tr\", function () {\n            return;\n            var dindex = this.getAttribute(\"data-ax5grid-tr-data-index\");\n            var i = self.$.livePanelKeys.length;\n            while (i--) {\n                if (typeof self.xvar.dataHoveredIndex !== \"undefined\") self.$.panel[self.$.livePanelKeys[i]].find('[data-ax5grid-tr-data-index=\"' + self.xvar.dataHoveredIndex + '\"]').removeClass(\"hover\");\n                self.$.panel[self.$.livePanelKeys[i]].find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]').addClass(\"hover\");\n            }\n            self.xvar.dataHoveredIndex = dindex;\n        });\n        this.$[\"container\"][\"body\"].on(\"mousedown\", '[data-ax5grid-column-attr=\"default\"]', function (e) {\n            if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                columnSelector.on.call(self, {\n                    panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                    dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                    rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                    colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                    colspan: Number(this.getAttribute(\"colspan\"))\n                });\n            }\n        }).on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n        resetFrozenColumn.call(this);\n    };\n\n    var resetFrozenColumn = function resetFrozenColumn() {\n        var cfg = this.config;\n        var dividedBodyRowObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n        this.asideBodyRowData = function (dataTable) {\n            var data = { rows: [] };\n            for (var i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = { cols: [] };\n                if (i === 0) {\n                    var col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    },\n                        _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            label: \"&nbsp;\", key: \"__d-index__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            label: \"\", key: \"__d-checkbox__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            return data;\n        }.call(this, this.bodyRowTable);\n        this.leftBodyRowData = dividedBodyRowObj.leftData;\n        this.bodyRowData = dividedBodyRowObj.rightData;\n\n        if (cfg.body.grouping) {\n            var dividedBodyGroupingObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n            this.asideBodyGroupingData = function (dataTable) {\n                var data = { rows: [] };\n                for (var i = 0, l = dataTable.rows.length; i < l; i++) {\n                    data.rows[i] = { cols: [] };\n                    if (i === 0) {\n                        var col = {\n                            label: \"\",\n                            colspan: 1,\n                            rowspan: dataTable.rows.length,\n                            colIndex: null\n                        },\n                            _col = {};\n\n                        if (cfg.showLineNumber) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.lineNumberColumnWidth,\n                                _width: cfg.lineNumberColumnWidth,\n                                columnAttr: \"lineNumber\",\n                                label: \"&nbsp;\", key: \"__d-index__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                        if (cfg.showRowSelector) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.rowSelectorColumnWidth,\n                                _width: cfg.rowSelectorColumnWidth,\n                                columnAttr: \"rowSelector\",\n                                label: \"\", key: \"__d-checkbox__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                    }\n                }\n\n                return data;\n            }.call(this, this.bodyGroupingTable);\n            this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n            this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n        }\n\n        this.leftFootSumData = {};\n        this.footSumData = {};\n        if (this.config.footSum) {\n            var dividedFootSumObj = GRID.util.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n            this.leftFootSumData = dividedFootSumObj.leftData;\n            this.footSumData = dividedFootSumObj.rightData;\n        }\n    };\n\n    var getFieldValue = function getFieldValue(_list, _item, _index, _col, _value) {\n        var _key = _col.key;\n        var tagsToReplace = {\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        if (_key === \"__d-index__\") {\n            return typeof _item[\"__index\"] !== \"undefined\" ? _item[\"__index\"] + 1 : \"\";\n        } else if (_key === \"__d-checkbox__\") {\n            return '<div class=\"checkBox\"></div>';\n        } else {\n            if (_col.editor && function (_editor) {\n                if (_editor.type in GRID.inlineEditor) {\n                    return GRID.inlineEditor[_editor.type].editMode == \"inline\";\n                }\n                return false;\n            }(_col.editor)) {\n\n                _value = _value || GRID.data.getValue.call(this, _index, _key);\n\n                if (U.isFunction(_col.editor.disabled)) {\n                    if (_col.editor.disabled.call({\n                        list: _list,\n                        dindex: _index,\n                        item: _list[_index],\n                        key: _key,\n                        value: _value\n                    })) {\n                        return _value;\n                    }\n                }\n\n                // print editor\n                return GRID.inlineEditor[_col.editor.type].getHtml(this, _col.editor, _value);\n            }\n            if (_col.formatter) {\n                var that = {\n                    key: _key,\n                    value: _value || GRID.data.getValue.call(this, _index, _key),\n                    dindex: _index,\n                    item: _item,\n                    list: _list\n                };\n                if (U.isFunction(_col.formatter)) {\n                    return _col.formatter.call(that);\n                } else {\n                    return GRID.formatter[_col.formatter].call(that);\n                }\n            } else {\n                var returnValue = \"\";\n\n                if (typeof _value !== \"undefined\") {\n                    returnValue = _value;\n                } else {\n                    _value = GRID.data.getValue.call(this, _index, _key);\n                    if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n                }\n\n                return typeof returnValue === \"number\" ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n                    return tagsToReplace[tag] || tag;\n                });\n            }\n        }\n    };\n\n    var getGroupingValue = function getGroupingValue(_item, _index, _col) {\n        var value,\n            that,\n            _key = _col.key,\n            _label = _col.label;\n\n        if (typeof _key === \"undefined\") {\n            that = {\n                key: _key,\n                list: _item.__groupingList,\n                groupBy: _item.__groupingBy\n            };\n            if (U.isFunction(_label)) {\n                value = _label.call(that);\n            } else {\n                value = _label;\n            }\n            _item[_col.colIndex] = value;\n            return value;\n        } else if (_key === \"__d-index__\") {\n            return '';\n        } else if (_key === \"__d-checkbox__\") {\n            return '';\n        } else {\n            if (_col.collector) {\n                that = {\n                    key: _key,\n                    list: _item.__groupingList\n                };\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n                _item[_col.colIndex] = value;\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    var getSumFieldValue = function getSumFieldValue(_list, _col) {\n        var _key = _col.key,\n            _label = _col.label;\n        //, _collector, _formatter\n        if (typeof _key === \"undefined\") {\n            return _label;\n        } else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n            return '&nbsp;';\n        } else {\n            if (_col.collector) {\n                var that = {\n                    key: _key,\n                    list: _list\n                };\n                var value;\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    var repaint = function repaint(_reset) {\n        var cfg = this.config;\n        var list = this.list;\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            this.xvar.paintStartRowIndex = undefined;\n        }\n        var paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n        if (this.xvar.dataRowCount === list.length && this.xvar.paintStartRowIndex === paintStartRowIndex) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n        var isFirstPaint = typeof this.xvar.paintStartRowIndex === \"undefined\";\n        var asideBodyRowData = this.asideBodyRowData;\n        var leftBodyRowData = this.leftBodyRowData;\n        var bodyRowData = this.bodyRowData;\n        var leftFootSumData = this.leftFootSumData;\n        var footSumData = this.footSumData;\n        var asideBodyGroupingData = this.asideBodyGroupingData;\n        var leftBodyGroupingData = this.leftBodyGroupingData;\n        var bodyGroupingData = this.bodyGroupingData;\n        var bodyAlign = cfg.body.align;\n        var paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1;\n        this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n        this.$.livePanelKeys = [];\n\n        // body-scroll 의 포지션에 의존적이므로..\n        var repaintBody = function repaintBody(_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            var SS = [];\n            var cgi, cgl;\n            var di, dl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n            var isScrolled = function () {\n                // 스크롤값이 변경되거나 처음 호출되었습니까?\n                if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                    _scrollConfig = {\n                        paintStartRowIndex: 0,\n                        paintRowCount: _list.length\n                    };\n                    return false;\n                } else {\n                    return true;\n                }\n            }();\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = function () {\n                var len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            }(); di < dl; di++) {\n\n                var isGroupingRow = false;\n                var rowTable;\n\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n                    SS.push('<tr class=\"tr-' + di % 4 + '\"', isGroupingRow ? ' data-ax5grid-grouping-tr=\"true\"' : '', ' data-ax5grid-tr-data-index=\"' + di + '\"', ' data-ax5grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"', ' data-ax5grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"', '>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        }(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                        column: _col,\n                                        key: _col.key,\n                                        item: _list[di],\n                                        index: di\n                                    }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push(function (_cellHeight) {\n                            var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n                        }(cellHeight), isGroupingRow ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-attr=\"' + \"default\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                    SS.push('</tr>');\n                }\n            }\n            SS.push('</table>');\n\n            if (isScrolled) {\n                _elTarget.css({ paddingTop: (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight });\n            }\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n        var repaintSum = function repaintSum(_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            var SS = [];\n            var cgi, cgl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + tri + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax5grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax5grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    }(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push(function (_cellHeight) {\n                        var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n                    }(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-column-attr=\"' + \"sum\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n        var scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n        // aside\n        if (cfg.asidePanelWidth > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum) {\n                // 바닥 요약 (footSum에 대한 aside 사용안함)\n                //repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n            }\n        }\n\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n\n        repaintBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n\n        //todo : repaintBody 에서 footSum 데이터 예외처리\n\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        this.xvar.paintStartRowIndex = paintStartRowIndex;\n        this.xvar.paintRowCount = paintRowCount;\n        this.xvar.dataRowCount = list.length;\n        this.needToPaintSum = false;\n        GRID.page.statusUpdate.call(this);\n    };\n\n    var repaintCell = function repaintCell(_panelName, _dindex, _rowIndex, _colIndex, _newValue) {\n        var self = this;\n        var cfg = this.config;\n        var list = this.list;\n\n        var updateCell = this.$[\"panel\"][_panelName].find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + _rowIndex + '\"][data-ax5grid-column-colindex=\"' + _colIndex + '\"]').find('[data-ax5grid-cellholder]');\n        var colGroup = this.colGroup;\n        var col = colGroup[_colIndex];\n        updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n        if (col.editor && col.editor.updateWith) {\n            col.editor.updateWith.forEach(function (updateColumnKey) {\n                colGroup.forEach(function (col) {\n                    if (col.key == updateColumnKey) {\n                        var rowIndex = col.rowIndex;\n                        var colIndex = col.colIndex;\n                        var panelName = GRID.util.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName;\n                        var updateWithCell = self.$[\"panel\"][panelName].find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]').find('[data-ax5grid-cellholder]');\n                        updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n                    }\n                });\n            });\n        }\n\n        /// ~~~~~~\n\n        var paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n        var leftFootSumData = this.leftFootSumData;\n        var footSumData = this.footSumData;\n        var asideBodyGroupingData = this.asideBodyGroupingData;\n        var leftBodyGroupingData = this.leftBodyGroupingData;\n        var bodyGroupingData = this.bodyGroupingData;\n        var bodyAlign = cfg.body.align;\n        var paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1;\n        var scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n        var repaintSum = function repaintSum(_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey];\n\n            var SS = [];\n            var cgi, cgl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + tri + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax5grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax5grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    }(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push(function (_cellHeight) {\n                        var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n                    }(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-column-attr=\"' + \"sum\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        var replaceGroupTr = function replaceGroupTr(_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey];\n            var SS = [];\n            var cgi, cgl;\n            var di, dl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n            for (di = _scrollConfig.paintStartRowIndex, dl = function () {\n                var len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            }(); di < dl; di++) {\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    var rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                                var attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            }(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                                var tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push(function (_cellHeight) {\n                                var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n                            }(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-attr=\"' + \"default\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n                }\n                replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    var repaintRow = function repaintRow(_dindex) {\n        var self = this;\n        var cfg = this.config;\n        var list = this.list;\n        /// ~~~~~~\n\n        var paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n        var asideBodyRowData = this.asideBodyRowData;\n        var leftBodyRowData = this.leftBodyRowData;\n        var bodyRowData = this.bodyRowData;\n        var leftFootSumData = this.leftFootSumData;\n        var footSumData = this.footSumData;\n        var asideBodyGroupingData = this.asideBodyGroupingData;\n        var leftBodyGroupingData = this.leftBodyGroupingData;\n        var bodyGroupingData = this.bodyGroupingData;\n        var bodyAlign = cfg.body.align;\n        var paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1;\n        var scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n        var repaintSum = function repaintSum(_elTargetKey, _colGroup, _bodyRow, _list) {\n            var _elTarget = this.$.panel[_elTargetKey];\n\n            var SS = [];\n            var cgi, cgl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + tri + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax5grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax5grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    }(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push(function (_cellHeight) {\n                        var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n                    }(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-column-attr=\"' + \"sum\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        var replaceGroupTr = function replaceGroupTr(_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey];\n            var SS = [];\n            var cgi, cgl;\n            var di, dl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n            for (di = _scrollConfig.paintStartRowIndex, dl = function () {\n                var len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            }(); di < dl; di++) {\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    var rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                                var attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            }(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                                var tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push(function (_cellHeight) {\n                                var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n                            }(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-attr=\"' + \"default\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n        var replaceTr = function replaceTr(_elTargetKey, _colGroup, _bodyRow, _list, di) {\n            var _elTarget = this.$.panel[_elTargetKey];\n            var SS = [];\n            var cgi, cgl;\n            var di, dl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n            var rowTable = _bodyRow;\n            for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                    col = rowTable.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax5grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax5grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    }(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    item: _list[di],\n                                    index: di\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push(function (_cellHeight) {\n                        var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n                    }(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                    SS.push('</td>');\n                }\n                SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-attr=\"' + \"default\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n            }\n\n            //_elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').html(SS.join(''));\n            _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n        };\n\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n            }\n            replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n        }\n\n        replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n                }\n                replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    var scrollTo = function scrollTo(css, noRepaint) {\n        var cfg = this.config;\n\n        if (this.isInlineEditing) {\n            for (var key in this.inlineEditing) {\n                //if(this.inlineEditing[key].editor.type === \"select\") {}\n                // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n                GRID.body.inlineEdit.deActive.call(this, \"ESC\", key);\n            }\n        }\n\n        if (cfg.asidePanelWidth > 0 && \"top\" in css) {\n            this.$.panel[\"aside-body-scroll\"].css({ top: css.top });\n        }\n        if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n            this.$.panel[\"left-body-scroll\"].css({ top: css.top });\n        }\n        if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n            this.$.panel[\"top-body-scroll\"].css({ left: css.left });\n        }\n\n        this.$.panel[\"body-scroll\"].css(css);\n\n        if (cfg.footSum && \"left\" in css) {\n            this.$.panel[\"bottom-body-scroll\"].css({ left: css.left });\n        }\n\n        if (!noRepaint && \"top\" in css) {\n            repaint.call(this);\n        }\n    };\n\n    var blur = function blur() {\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n        if (this.isInlineEditing) {\n            inlineEdit.deActive.call(this);\n        }\n    };\n\n    var moveFocus = function moveFocus(_position) {\n        var focus = {\n            \"UD\": function UD(_dy) {\n                var moveResult = true;\n                var focusedColumn;\n                var originalColumn;\n                var while_i;\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dy > 0) {\n                    if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = 0;\n                        if (focusedColumn.dindex > this.list.length - 1) {\n                            focusedColumn.dindex = this.list.length - 1;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                } else {\n                    if (focusedColumn.rowIndex + _dy < 0) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n                        if (focusedColumn.dindex < 0) {\n                            focusedColumn.dindex = 0;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                }\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == (_dy > 0 ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        moveResult = false;\n                        break;\n                    }\n                    while_i++;\n                }\n\n                var nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex <= this.xvar.paintStartRowIndex) {\n                            scrollTo.call(this, { top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight });\n                            GRID.scroller.resize.call(this);\n                        } else if (focusedColumn.dindex + 1 > this.xvar.paintStartRowIndex + (this.xvar.paintRowCount - 2)) {\n                            scrollTo.call(this, { top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.paintRowCount + 3) * this.xvar.bodyTrHeight });\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName].find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n            },\n            \"LR\": function LR(_dx) {\n                var moveResult = true;\n                var focusedColumn;\n                var originalColumn;\n                var while_i = 0;\n                var isScrollPanel = false;\n                var containerPanelName = \"\";\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dx < 0) {\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                    if (focusedColumn.colIndex < 0) {\n                        focusedColumn.colIndex = 0;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.colIndex = focusedColumn.colIndex + (originalColumn.colspan - 1) + _dx;\n                    if (focusedColumn.colIndex > this.colGroup.length - 1) {\n                        focusedColumn.colIndex = this.colGroup.length - 1;\n                        moveResult = false;\n                    }\n                }\n\n                if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    focusedColumn.rowIndex = 0;\n                }\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    focusedColumn.colIndex--;\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        moveResult = false;\n                        break;\n                    }\n                    while_i++;\n                }\n\n                var nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n                focusedColumn.panelName = nPanelInfo.panelName;\n                containerPanelName = nPanelInfo.containerPanelName;\n                isScrollPanel = nPanelInfo.isScrollPanel;\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n                var $column = this.$.panel[focusedColumn.panelName].find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').attr('data-ax5grid-column-focused', \"true\");\n\n                if ($column && isScrollPanel) {\n                    // 스크롤 패널 이라면~\n                    var newLeft = function () {\n                        if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n                            return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n                        } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n                            return $column.position().left;\n                        } else {\n                            return;\n                        }\n                    }.call(this);\n\n                    //console.log(newLeft);\n\n                    if (typeof newLeft !== \"undefined\") {\n                        GRID.header.scrollTo.call(this, { left: -newLeft });\n                        scrollTo.call(this, { left: -newLeft });\n                        GRID.scroller.resize.call(this);\n                    }\n                }\n\n                return moveResult;\n            },\n            \"INDEX\": function INDEX(_dindex) {\n                var moveResult = true;\n                var focusedColumn;\n                var originalColumn;\n                var while_i;\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) {\n                    focusedColumn = {\n                        rowIndex: 0,\n                        colIndex: 0\n                    };\n                }\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dindex == \"end\") {\n                    _dindex = this.list.length - 1;\n                }\n\n                focusedColumn.dindex = _dindex;\n                focusedColumn.rowIndex = 0;\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == (_dy > 0 ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        break;\n                    }\n                    while_i++;\n                }\n\n                var nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex < this.xvar.paintStartRowIndex) {\n                            scrollTo.call(this, { top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight });\n                            GRID.scroller.resize.call(this);\n                        } else if (focusedColumn.dindex + 1 > this.xvar.paintStartRowIndex + (this.xvar.paintRowCount - 2)) {\n                            scrollTo.call(this, { top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.paintRowCount + 3) * this.xvar.bodyTrHeight });\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName].find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n            }\n        };\n\n        var processor = {\n            \"UP\": function UP() {\n                return focus[\"UD\"].call(this, -1);\n            },\n            \"DOWN\": function DOWN() {\n                return focus[\"UD\"].call(this, 1);\n            },\n            \"LEFT\": function LEFT() {\n                return focus[\"LR\"].call(this, -1);\n            },\n            \"RIGHT\": function RIGHT() {\n                return focus[\"LR\"].call(this, 1);\n            },\n            \"HOME\": function HOME() {\n                return focus[\"INDEX\"].call(this, 0);\n            },\n            \"END\": function END() {\n                return focus[\"INDEX\"].call(this, \"end\");\n            },\n            \"position\": function position(_position) {\n                return focus[\"INDEX\"].call(this, _position);\n            }\n        };\n\n        if (_position in processor) {\n            return processor[_position].call(this);\n        } else {\n            return processor[\"position\"].call(this, _position);\n        }\n    };\n\n    var inlineEdit = {\n        active: function active(_focusedColumn, _e, _initValue) {\n            var self = this;\n            var dindex, colIndex, rowIndex, panelName, colspan;\n            var col, editor;\n\n            // this.inlineEditing = {};\n            for (var key in _focusedColumn) {\n                panelName = _focusedColumn[key].panelName;\n                dindex = _focusedColumn[key].dindex;\n                colIndex = _focusedColumn[key].colIndex;\n                rowIndex = _focusedColumn[key].rowIndex;\n                colspan = _focusedColumn[key].colspan;\n\n                // 인라인 에디팅을 멈춰야 하는 경우 조건\n                col = this.colGroup[colIndex];\n                if (!(editor = col.editor)) return this;\n\n                // editor disabled 체크\n                if (U.isFunction(editor.disabled)) {\n                    if (editor.disabled.call({\n                        list: this.list,\n                        dindex: dindex,\n                        item: this.list[dindex],\n                        key: col.key,\n                        value: _initValue\n                    })) {\n                        return this;\n                    }\n                }\n\n                // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n                if (!function (_editor, _type) {\n                    if (_editor.type in GRID.inlineEditor) {\n                        return GRID.inlineEditor[_editor.type].editMode == \"popup\";\n                    }\n                }(editor)) {\n                    // 체크 박스 타입이면 값 변경 시도\n                    if (editor.type == \"checkbox\") {\n                        var checked, newValue;\n                        if (editor.config && editor.config.trueValue) {\n                            if (checked = !(_initValue == editor.config.trueValue)) {\n                                newValue = editor.config.trueValue;\n                            } else {\n                                newValue = editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = _initValue == false || _initValue == \"false\" || _initValue < \"1\" ? \"true\" : \"false\";\n                        }\n\n                        GRID.data.setValue.call(self, dindex, col.key, newValue);\n                        updateRowState.call(self, [\"cellChecked\"], dindex, {\n                            key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n                            editorConfig: col.editor.config, checked: checked\n                        });\n                    }\n                    return this;\n                }\n\n                if (this.list[dindex].__isGrouping) {\n                    return false;\n                }\n                if (key in this.inlineEditing) {\n                    return false;\n                }\n                this.inlineEditing[key] = {\n                    editor: editor,\n                    panelName: panelName,\n                    columnKey: key,\n                    column: _focusedColumn[key],\n                    useReturnToSave: GRID.inlineEditor[editor.type].useReturnToSave\n                };\n                this.isInlineEditing = true;\n            }\n            if (this.isInlineEditing) {\n\n                var originalValue = GRID.data.getValue.call(self, dindex, col.key);\n                var initValue = function (__value, __editor) {\n                    if (U.isNothing(__value)) {\n                        __value = U.isNothing(originalValue) ? \"\" : originalValue;\n                    }\n\n                    if (__editor.type == \"money\") {\n                        return U.number(__value, { \"money\": true });\n                    } else {\n                        return __value;\n                    }\n                }.call(this, _initValue, editor);\n\n                this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName].find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]').find('[data-ax5grid-cellholder]');\n\n                this.inlineEditing[key].$inlineEditor = GRID.inlineEditor[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n                return true;\n            }\n        },\n        deActive: function deActive(_msg, _key, _value) {\n            // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n            if (!this.inlineEditing[_key]) return this;\n\n            var panelName = this.inlineEditing[_key].panelName;\n            var dindex = this.inlineEditing[_key].column.dindex;\n            var rowIndex = this.inlineEditing[_key].column.rowIndex;\n            var colIndex = this.inlineEditing[_key].column.colIndex;\n\n            var column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex];\n            var editorValue = function ($inlineEditor) {\n                if (typeof _value === \"undefined\") {\n                    if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n                        return $inlineEditor.val();\n                    } else {\n                        _msg = \"CANCEL\";\n                        return false;\n                    }\n                } else {\n                    return _value;\n                }\n            }(this.inlineEditing[_key].$inlineEditor);\n\n            var newValue = function (__value, __editor) {\n                if (__editor.type == \"money\") {\n                    return U.number(__value);\n                } else {\n                    return __value;\n                }\n            }.call(this, editorValue, column.editor);\n\n            var action = {\n                \"CANCEL\": function CANCEL(_dindex, _column, _newValue) {\n                    action[\"__clear\"].call(this);\n                },\n                \"RETURN\": function RETURN(_dindex, _column, _newValue) {\n                    if (GRID.data.setValue.call(this, _dindex, _column.key, _newValue)) {\n                        action[\"__clear\"].call(this);\n                        GRID.body.repaintCell.call(this, panelName, dindex, rowIndex, colIndex, _newValue);\n                    } else {\n                        action[\"__clear\"].call(this);\n                    }\n                },\n                \"__clear\": function __clear() {\n                    this.isInlineEditing = false;\n                    var bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n                    if (bindedAx5ui == \"ax5picker\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n                    } else if (bindedAx5ui == \"ax5select\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n                    }\n\n                    this.inlineEditing[_key].$inlineEditor.remove();\n                    this.inlineEditing[_key].$inlineEditor = null;\n                    this.inlineEditing[_key].$inlineEditorCell = null;\n                    this.inlineEditing[_key] = undefined;\n                    delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n                }\n            };\n\n            if (_msg in action) {\n                action[_msg || \"RETURN\"].call(this, dindex, column, newValue);\n            } else {\n                action[\"__clear\"].call(this);\n            }\n        },\n        keydown: function keydown(key, columnKey, _options) {\n            var processor = {\n                \"ESC\": function ESC() {\n                    for (var columnKey in this.inlineEditing) {\n                        inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n                    }\n                },\n                \"RETURN\": function RETURN() {\n                    if (this.isInlineEditing) {\n                        if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) {\n                            // todo : 네이밍 검증 할 필요있음.\n                            inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n                        }\n                    } else {\n\n                        for (var k in this.focusedColumn) {\n                            var _column = this.focusedColumn[k];\n                            var column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                            var dindex = _column.dindex;\n                            var value = \"\";\n                            if (column) {\n                                if (!this.list[dindex].__isGrouping) {\n                                    value = GRID.data.getValue.call(this, dindex, column.key);\n                                }\n                            }\n\n                            var col = this.colGroup[_column.colIndex];\n\n                            if (GRID.inlineEditor[col.editor.type].editMode === \"inline\") {\n                                if (_options && _options.moveFocus) {} else {\n                                    if (column.editor && column.editor.type == \"checkbox\") {\n\n                                        value = GRID.data.getValue.call(this, dindex, column.key);\n\n                                        var checked, newValue;\n                                        if (column.editor.config && column.editor.config.trueValue) {\n                                            if (checked = !(value == column.editor.config.trueValue)) {\n                                                newValue = column.editor.config.trueValue;\n                                            } else {\n                                                newValue = column.editor.config.falseValue;\n                                            }\n                                        } else {\n                                            newValue = checked = value == false || value == \"false\" || value < \"1\" ? \"true\" : \"false\";\n                                        }\n\n                                        GRID.data.setValue.call(this, _column.dindex, column.key, newValue);\n                                        updateRowState.call(this, [\"cellChecked\"], dindex, {\n                                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                            editorConfig: column.editor.config, checked: checked\n                                        });\n                                    }\n                                }\n                            } else {\n                                GRID.body.inlineEdit.active.call(this, this.focusedColumn, null, value);\n                            }\n                        }\n                    }\n                }\n            };\n\n            if (key in processor) {\n                processor[key].call(this, key, columnKey, _options);\n            }\n        }\n    };\n\n    var getExcelString = function getExcelString() {\n        var cfg = this.config;\n        var list = this.list;\n        var bodyRowData = this.bodyRowData;\n        var footSumData = this.footSumData;\n        var bodyGroupingData = this.bodyGroupingData;\n\n        // body-scroll 의 포지션에 의존적이므로..\n        var getBody = function getBody(_colGroup, _bodyRow, _groupRow, _list) {\n            var SS = [];\n            var di, dl;\n            var tri, trl;\n            var ci, cl;\n            var col;\n\n            //SS.push('<table border=\"1\">');\n            for (di = 0, dl = _list.length; di < dl; di++) {\n                var isGroupingRow = false;\n                var rowTable;\n\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    SS.push('<tr>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n\n                        SS.push('<td ', 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', '>', isGroupingRow ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</td>');\n                    }\n                    SS.push('</tr>');\n                }\n            }\n            //SS.push('</table>');\n            return SS.join('');\n        };\n        var getSum = function getSum(_colGroup, _bodyRow, _list) {\n            var SS = [];\n            var tri, trl;\n            var ci, cl;\n            var col;\n\n            //SS.push('<table border=\"1\">');\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr>');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    SS.push('<td ', 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', '>', getSumFieldValue.call(this, _list, col), '</td>');\n                }\n                SS.push('</tr>');\n            }\n\n            //SS.push('</table>');\n\n            return SS.join('');\n        };\n\n        var po = [];\n        po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n        if (cfg.footSum) {\n            // 바닥 요약\n            po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n        }\n\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        return po.join('');\n    };\n\n    GRID.body = {\n        init: init,\n        repaint: repaint,\n        repaintCell: repaintCell,\n        repaintRow: repaintRow,\n        updateRowState: updateRowState,\n        updateRowStateAll: updateRowStateAll,\n        scrollTo: scrollTo,\n        blur: blur,\n        moveFocus: moveFocus,\n        inlineEdit: inlineEdit,\n        getExcelString: getExcelString\n    };\n})();\n\n// ax5.ui.grid.collector\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n    var sum = function sum() {\n        var value = 0;\n        var i = this.list.length;\n        while (i--) {\n            if (!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n            }\n        }\n        return value;\n    };\n    var avg = function avg() {\n        var value = 0;\n        var i = this.list.length,\n            listLength = 0;\n        while (i--) {\n            if (!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n                listLength++;\n            }\n        }\n        return U.number(value / (listLength || 1), { \"round\": 2 });\n    };\n\n    GRID.collector = {\n        sum: sum,\n        avg: avg\n    };\n})();\n// ax5.ui.grid.layout\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var init = function init() {};\n\n    var clearGroupingData = function clearGroupingData(_list) {\n        var i = 0,\n            l = _list.length;\n        var returnList = [];\n        for (; i < l; i++) {\n            if (_list[i] && !_list[i][\"__isGrouping\"]) {\n                if (_list[i][this.config.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(i);\n                }\n                returnList.push(jQuery.extend({}, _list[i]));\n            }\n        }\n        return returnList;\n    };\n\n    var initData = function initData(_list) {\n        this.selectedDataIndexs = [];\n        var i = 0,\n            l = _list.length;\n        var returnList = [];\n        var appendIndex = 0;\n        var dataRealRowCount;\n\n        if (this.config.body.grouping) {\n            var groupingKeys = U.map(this.bodyGrouping.by, function () {\n                return {\n                    key: this,\n                    compareString: \"\",\n                    grouping: false,\n                    list: []\n                };\n            });\n            var gi = 0,\n                gl = groupingKeys.length,\n                compareString,\n                appendRow = [],\n                ari;\n            for (; i < l + 1; i++) {\n                gi = 0;\n                if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                } else {\n                    compareString = \"\";\n                    appendRow = [];\n                    for (; gi < gl; gi++) {\n                        if (_list[i]) {\n                            compareString += \"$|$\" + _list[i][groupingKeys[gi].key];\n                        }\n                        if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {\n                            var appendRowItem = { keys: [], labels: [], list: groupingKeys[gi].list };\n                            for (var ki = 0; ki < gi + 1; ki++) {\n                                appendRowItem.keys.push(groupingKeys[ki].key);\n                                appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);\n                            }\n                            appendRow.push(appendRowItem);\n                            groupingKeys[gi].list = [];\n                        }\n                        groupingKeys[gi].list.push(_list[i]);\n                        groupingKeys[gi].compareString = compareString;\n                    }\n\n                    ari = appendRow.length;\n                    while (ari--) {\n                        returnList.push({ __isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: { keys: appendRow[ari].keys, labels: appendRow[ari].labels } });\n                    }\n\n                    if (_list[i]) {\n                        if (_list[i][this.config.columnKeys.selected]) {\n                            this.selectedDataIndexs.push(i);\n                        }\n                        dataRealRowCount = _list[i][\"__index\"] = i;\n                        returnList.push(_list[i]);\n                        appendIndex++;\n                    }\n                }\n            }\n        } else {\n            for (; i < l; i++) {\n                if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                } else if (_list[i]) {\n\n                    if (_list[i][this.config.columnKeys.selected]) {\n                        this.selectedDataIndexs.push(i);\n                    }\n                    // __index변수를 추가하여 lineNumber 에 출력합니다. (body getFieldValue 에서 출력함)\n                    dataRealRowCount = _list[i][\"__index\"] = i;\n                    returnList.push(_list[i]);\n                }\n            }\n        }\n\n        // 원본 데이터의 갯수\n        // grouping은 제외하고 수집됨.\n        this.xvar.dataRealRowCount = dataRealRowCount + 1;\n        return returnList;\n    };\n\n    var set = function set(data) {\n        var self = this;\n\n        if (U.isArray(data)) {\n            this.page = null;\n            this.list = initData.call(this, !this.config.remoteSort && Object.keys(this.sortInfo).length ? sort.call(this, this.sortInfo, data) : data);\n            this.deletedList = [];\n        } else if (\"page\" in data) {\n            this.page = jQuery.extend({}, data.page);\n            this.list = initData.call(this, !this.config.remoteSort && Object.keys(this.sortInfo).length ? sort.call(this, this.sortInfo, data.list) : data.list);\n            this.deletedList = [];\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n\n        if (this.config.body.grouping) {}\n        return this;\n    };\n\n    var get = function get(_type) {\n        return {\n            list: this.list,\n            page: this.page\n        };\n    };\n\n    var getList = function getList(_type) {\n        var returnList = [];\n        var i = 0,\n            l = this.list.length;\n        switch (_type) {\n            case \"modified\":\n                for (; i < l; i++) {\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.modified]) {\n                        returnList.push(jQuery.extend({}, this.list[i]));\n                    }\n                }\n                break;\n            case \"selected\":\n                for (; i < l; i++) {\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.selected]) {\n                        returnList.push(jQuery.extend({}, this.list[i]));\n                    }\n                }\n                break;\n            case \"deleted\":\n                //_list = GRID.data.clearGroupingData(this.list);\n                returnList = [].concat(this.deletedList);\n                break;\n            default:\n                returnList = GRID.data.clearGroupingData.call(this, this.list);\n        }\n        return returnList;\n    };\n\n    var add = function add(_row, _dindex, _options) {\n        var list = this.config.body.grouping ? clearGroupingData.call(this, this.list) : this.list;\n        var processor = {\n            \"first\": function first() {\n                list = [].concat(_row).concat(list);\n            },\n            \"last\": function last() {\n                list = list.concat([].concat(_row));\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            _row[this.config.columnKeys.modified] = true;\n            processor[_dindex].call(this, _row);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            //\n            list = list.splice(_dindex, [].concat(_row));\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this, sort.call(this, this.sortInfo, list));\n        } else if (_options && _options.sort && Object.keys(this.sortInfo).length) {\n            list = sort.call(this, this.sortInfo, list);\n        }\n\n        this.list = list;\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    /**\n     * list에서 완전 제거 하는 경우 사용.\n     * ax5grid.data.remove\n     */\n    var remove = function remove(_dindex) {\n        var list = this.config.body.grouping ? clearGroupingData.call(this, this.list) : this.list;\n        var processor = {\n            \"first\": function first() {\n                list.splice(_dindex, 1);\n            },\n            \"last\": function last() {\n                var lastIndex = list.length - 1;\n                list.splice(lastIndex, 1);\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            //\n            list.splice(_dindex, 1);\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this, sort.call(this, this.sortInfo, list));\n        } else if (Object.keys(this.sortInfo).length) {\n            list = sort.call(this, this.sortInfo, list);\n        }\n\n        this.list = list;\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    /**\n     * list에서 deleted 처리 repaint\n     * ax5grid.data.deleteRow\n     */\n    var deleteRow = function deleteRow(_dindex) {\n        var list = this.config.body.grouping ? clearGroupingData.call(this, this.list) : this.list;\n\n        var processor = {\n            \"first\": function first() {\n                list[0][this.config.columnKeys.deleted] = true;\n            },\n            \"last\": function last() {\n                list[list.length - 1][this.config.columnKeys.deleted] = true;\n            },\n            \"selected\": function selected() {\n                var i = list.length;\n                while (i--) {\n                    if (list[i][this.config.columnKeys.selected]) {\n                        list[i][this.config.columnKeys.deleted] = true;\n                    }\n                }\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            list[_dindex][this.config.columnKeys.deleted] = true;\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this, sort.call(this, this.sortInfo, list));\n        } else if (Object.keys(this.sortInfo).length) {\n            list = initData.call(this, sort.call(this, this.sortInfo, list));\n        } else {\n            list = initData.call(this, list);\n        }\n\n        this.list = list;\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    var update = function update(_row, _dindex) {\n        if (!U.isNumber(_dindex)) {\n            throw 'invalid argument _dindex';\n        }\n        //\n        this.needToPaintSum = true;\n        this.list.splice(_dindex, 1, _row);\n\n        if (this.config.body.grouping) {\n            this.list = initData.call(this, clearGroupingData.call(this, this.list));\n        }\n    };\n\n    var setValue = function setValue(_dindex, _key, _value) {\n        var originalValue = getValue.call(this, _dindex, _key);\n        this.needToPaintSum = true;\n\n        if (originalValue !== _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    this.list[_dindex][this.config.columnKeys.modified] = true;\n                    Function(\"val\", \"this\" + GRID.util.getRealPathForDataItem(_key) + \" = val;\").call(this.list[_dindex], _value);\n                } catch (e) {}\n            } else {\n                this.list[_dindex][this.config.columnKeys.modified] = true;\n                this.list[_dindex][_key] = _value;\n            }\n\n            if (this.onDataChanged) {\n                this.onDataChanged.call({\n                    self: this,\n                    list: this.list,\n                    dindex: _dindex,\n                    item: this.list[_dindex],\n                    key: _key,\n                    value: _value\n                });\n            }\n        }\n\n        return true;\n    };\n\n    var getValue = function getValue(_dindex, _key, _value) {\n        if (/[\\.\\[\\]]/.test(_key)) {\n            try {\n                _value = Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\").call(this.list[_dindex]);\n            } catch (e) {}\n        } else {\n            _value = this.list[_dindex][_key];\n        }\n        return _value;\n    };\n\n    var clearSelect = function clearSelect() {\n        this.selectedDataIndexs = [];\n    };\n\n    var select = function select(_dindex, _selected, _options) {\n        var cfg = this.config;\n\n        if (this.list[_dindex].__isGrouping) return false;\n        if (this.list[_dindex][cfg.columnKeys.disableSelection]) return false;\n\n        if (typeof _selected === \"undefined\") {\n            if (this.list[_dindex][cfg.columnKeys.selected] = !this.list[_dindex][cfg.columnKeys.selected]) {\n                this.selectedDataIndexs.push(_dindex);\n            }\n        } else {\n            if (this.list[_dindex][cfg.columnKeys.selected] = _selected) {\n                this.selectedDataIndexs.push(_dindex);\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list,\n                dindex: _dindex,\n                item: this.list[_dindex],\n                key: cfg.columnKeys.selected,\n                value: this.list[_dindex][cfg.columnKeys.selected]\n            });\n        }\n\n        return this.list[_dindex][cfg.columnKeys.selected];\n    };\n\n    var selectAll = function selectAll(_selected, _options) {\n        var cfg = this.config;\n\n        var dindex = this.list.length;\n        if (typeof _selected === \"undefined\") {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        } else {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = _selected) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list\n            });\n        }\n\n        return this.list;\n    };\n\n    var sort = function sort(_sortInfo, _list) {\n        var self = this;\n        var list = _list || this.list;\n        var sortInfoArray = [];\n        var getKeyValue = function getKeyValue(_item, _key, _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    _value = Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\").call(_item);\n                } catch (e) {}\n            } else {\n                _value = _item[_key];\n            }\n            return _value;\n        };\n\n        for (var k in _sortInfo) {\n            sortInfoArray[_sortInfo[k].seq] = { key: k, order: _sortInfo[k].orderBy };\n        }\n        sortInfoArray = U.filter(sortInfoArray, function () {\n            return typeof this !== \"undefined\";\n        });\n\n        var i = 0,\n            l = sortInfoArray.length,\n            _a_val,\n            _b_val;\n\n        list.sort(function (_a, _b) {\n            for (i = 0; i < l; i++) {\n                _a_val = getKeyValue(_a, sortInfoArray[i].key);\n                _b_val = getKeyValue(_b, sortInfoArray[i].key);\n\n                if ((typeof _a_val === \"undefined\" ? \"undefined\" : _typeof(_a_val)) !== (typeof _b_val === \"undefined\" ? \"undefined\" : _typeof(_b_val))) {\n                    _a_val = '' + _a_val;\n                    _b_val = '' + _b_val;\n                }\n                if (_a_val < _b_val) {\n                    return sortInfoArray[i].order === \"asc\" ? -1 : 1;\n                } else if (_a_val > _b_val) {\n                    return sortInfoArray[i].order === \"asc\" ? 1 : -1;\n                }\n            }\n        });\n\n        if (_list) {\n            return list;\n        } else {\n            this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;\n            this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n            GRID.page.navigationUpdate.call(this);\n            return this;\n        }\n    };\n\n    GRID.data = {\n        init: init,\n        set: set,\n        get: get,\n        getList: getList,\n        setValue: setValue,\n        getValue: getValue,\n        clearSelect: clearSelect,\n        select: select,\n        selectAll: selectAll,\n        add: add,\n        remove: remove,\n        deleteRow: deleteRow,\n        update: update,\n        sort: sort,\n        initData: initData,\n        clearGroupingData: clearGroupingData\n    };\n})();\n/*\n * Copyright (c) 2016. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n// ax5.ui.grid.excel\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var base64 = function base64(s) {\n        return window.btoa(unescape(encodeURIComponent(s)));\n    };\n    var uri = \"data:application/vnd.ms-excel;base64,\";\n\n    var getExcelTmpl = function getExcelTmpl() {\n        return \"\\uFEFF\\n{{#tables}}{{{body}}}{{/tables}}\\n\";\n    };\n\n    var tableToExcel = function tableToExcel(table, fileName) {\n        var link, a, output;\n        var tables = [].concat(table);\n\n        output = ax5.mustache.render(getExcelTmpl(), {\n            worksheet: function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({ name: \"Sheet\" + (ti + 1) });\n                });\n                return arr;\n            }(),\n            tables: function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({ body: t });\n                });\n                return arr;\n            }()\n        });\n\n        var isChrome = navigator.userAgent.indexOf(\"Chrome\") > -1;\n        var isSafari = !isChrome && navigator.userAgent.indexOf(\"Safari\") > -1;\n\n        var isIE = /*@cc_on!@*/false || !!document.documentMode; // this works with IE10 and IE11 both :)\n        if (navigator.msSaveOrOpenBlob) {\n            var blob1 = new Blob([output], { type: \"text/html\" });\n            window.navigator.msSaveOrOpenBlob(blob1, fileName);\n        } else if (isSafari) {\n            // 사파리는 지원이 안되므로 그냥 테이블을 클립보드에 복사처리\n            //tables\n            var blankWindow = window.open('about:blank', this.id + '-excel-export', 'width=600,height=400');\n            blankWindow.document.write(output);\n            blankWindow = null;\n        } else {\n            if (isIE && typeof Blob === \"undefined\") {\n\n                //otherwise use the iframe and save\n                //requires a blank iframe on page called txtArea1\n                var $iframe = jQuery('<iframe id=\"' + this.id + '-excel-export\" style=\"display:none\"></iframe>');\n                jQuery(document.body).append($iframe);\n                var iframe = window[this.id + '-excel-export'];\n                iframe.document.open(\"text/html\", \"replace\");\n                iframe.document.write(output);\n                iframe.document.close();\n                iframe.focus();\n                iframe.document.execCommand(\"SaveAs\", true, fileName);\n                $iframe.remove();\n            } else {\n                // Attempt to use an alternative method\n                var anchor = document.body.appendChild(document.createElement(\"a\"));\n\n                // If the [download] attribute is supported, try to use it\n                if (\"download\" in anchor) {\n                    anchor.download = fileName;\n                    //anchor.href = URL.createObjectURL( blob );\n                    anchor.href = uri + base64(output);\n                    anchor.click();\n                    document.body.removeChild(anchor);\n                }\n            }\n        }\n\n        return true;\n    };\n\n    GRID.excel = {\n        export: tableToExcel\n    };\n})();\n// ax5.ui.grid.formatter\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n    var money = function money() {\n        return U.number(this.value, { \"money\": true });\n    };\n\n    GRID.formatter = {\n        money: money\n    };\n})();\n// ax5.ui.grid.header\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var columnResizerEvent = {\n        \"on\": function on(_columnResizer, _colIndex) {\n            var self = this;\n            var $columnResizer = $(_columnResizer);\n            var columnResizerPositionLeft = $columnResizer.offset().left;\n            var gridTargetOffsetLeft = self.$[\"container\"][\"root\"].offset().left;\n            self.xvar.columnResizerIndex = _colIndex;\n            var resizeRange = {\n                min: -self.colGroup[_colIndex]._width + 2,\n                max: self.colGroup[_colIndex + 1] ? self.colGroup[_colIndex + 1]._width : self.$[\"container\"][\"root\"].width() - 2\n            };\n            //console.log(resizeRange);\n\n            jQuery(document.body).bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                var mouseObj = GRID.util.getMousePosition(e);\n                self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n\n                if (resizeRange.min > self.xvar.__da) {\n                    self.xvar.__da = resizeRange.min;\n                } else if (resizeRange.max < self.xvar.__da) {\n                    self.xvar.__da = resizeRange.max;\n                }\n\n                if (!self.xvar.columnResizerLived) {\n                    self.$[\"resizer\"][\"horizontal\"].addClass(\"live\");\n                }\n                self.xvar.columnResizerLived = true;\n                self.$[\"resizer\"][\"horizontal\"].css({\n                    left: columnResizerPositionLeft + self.xvar.__da - gridTargetOffsetLeft\n                });\n            }).bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                columnResizerEvent.off.call(self);\n                U.stopEvent(e);\n            }).bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                columnResizerEvent.off.call(self);\n                U.stopEvent(e);\n            });\n\n            jQuery(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);\n        },\n        \"off\": function off() {\n            this.$[\"resizer\"][\"horizontal\"].removeClass(\"live\");\n            this.xvar.columnResizerLived = false;\n\n            if (typeof this.xvar.__da === \"undefined\") {} else {\n                this.setColumnWidth(this.colGroup[this.xvar.columnResizerIndex]._width + this.xvar.__da, this.xvar.columnResizerIndex);\n            }\n\n            jQuery(document.body).unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId).unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId).unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');\n        }\n    };\n\n    var init = function init() {\n        // 헤더 초기화\n        var self = this;\n\n        this.$[\"container\"][\"header\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            var key = this.getAttribute(\"data-ax5grid-column-key\");\n            var colIndex = this.getAttribute(\"data-ax5grid-column-colindex\");\n            var rowIndex = this.getAttribute(\"data-ax5grid-column-rowindex\");\n            var col = self.colGroup[colIndex];\n\n            if (key === \"__checkbox_header__\") {\n                var selected = this.getAttribute(\"data-ax5grid-selected\");\n                selected = U.isNothing(selected) ? true : selected === \"true\" ? false : true;\n\n                $(this).attr(\"data-ax5grid-selected\", selected);\n                self.selectAll({ selected: selected });\n            } else {\n                if (key && col) {\n                    if ((col.sortable === true || self.config.sortable === true) && col.sortable !== false) {\n                        if (!col.sortFixed) toggleSort.call(self, col.key);\n                    }\n                }\n            }\n\n            GRID.body.blur.call(self);\n        });\n        this.$[\"container\"][\"header\"].on(\"mousedown\", '[data-ax5grid-column-resizer]', function (e) {\n            var colIndex = this.getAttribute(\"data-ax5grid-column-resizer\");\n            self.xvar.mousePosition = GRID.util.getMousePosition(e);\n            columnResizerEvent.on.call(self, this, Number(colIndex));\n            U.stopEvent(e);\n        }).on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n        resetFrozenColumn.call(this);\n    };\n\n    var resetFrozenColumn = function resetFrozenColumn() {\n        var cfg = this.config;\n        var dividedHeaderObj = GRID.util.divideTableByFrozenColumnIndex(this.headerTable, this.config.frozenColumnIndex);\n        this.asideHeaderData = function (dataTable) {\n            var colGroup = [];\n            var data = { rows: [] };\n            for (var i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = { cols: [] };\n                if (i === 0) {\n                    var col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    },\n                        _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            key: \"__index_header__\", label: \"&nbsp;\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            key: \"__checkbox_header__\", label: \"\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            this.asideColGroup = colGroup;\n            return data;\n        }.call(this, this.headerTable);\n        this.leftHeaderData = dividedHeaderObj.leftData;\n        this.headerData = dividedHeaderObj.rightData;\n    };\n\n    var getFieldValue = function getFieldValue(_col) {\n        var cfg = this.config;\n        var colGroup = this.colGroup;\n        var _key = _col.key;\n        var tagsToReplace = {\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        if (_key === \"__checkbox_header__\") {\n            return '<div class=\"checkBox\"></div>';\n        } else {\n            return _col.label || \"&nbsp;\";\n        }\n    };\n\n    var repaint = function repaint(_reset) {\n        var cfg = this.config;\n        var colGroup = this.colGroup;\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            this.xvar.paintStartRowIndex = undefined;\n        }\n        var asideHeaderData = this.asideHeaderData;\n        var leftHeaderData = this.leftHeaderData;\n        var headerData = this.headerData;\n        var headerAlign = cfg.header.align;\n\n        // this.asideColGroup : asideHeaderData에서 처리 함.\n        this.leftHeaderColGroup = colGroup.slice(0, this.config.frozenColumnIndex);\n        this.headerColGroup = colGroup.slice(this.config.frozenColumnIndex);\n\n        var repaintHeader = function repaintHeader(_elTarget, _colGroup, _bodyRow) {\n            var tableWidth = 0;\n            var SS = [];\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n                tableWidth += _colGroup[cgi]._width;\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                var trCSS_class = \"\";\n                SS.push('<tr class=\"' + trCSS_class + '\">');\n                for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    var col = _bodyRow.rows[tri].cols[ci];\n                    var cellHeight = cfg.header.columnHeight * col.rowspan - cfg.header.columnBorderWidth;\n                    var colAlign = headerAlign || col.align;\n                    SS.push('<td ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', function () {\n                        return typeof col.key !== \"undefined\" ? 'data-ax5grid-column-key=\"' + col.key + '\" ' : '';\n                    }(), 'data-ax5grid-column-colindex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-rowindex=\"' + col.rowIndex + '\" ', 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.header.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push(function () {\n                        var lineHeight = cfg.header.columnHeight - cfg.header.columnPadding * 2 - cfg.header.columnBorderWidth;\n                        return '<span data-ax5grid-cellHolder=\"\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + ' style=\"height: ' + (cfg.header.columnHeight - cfg.header.columnBorderWidth) + 'px;line-height: ' + lineHeight + 'px;\">';\n                    }(), function () {\n                        var _SS = \"\";\n\n                        if (!U.isNothing(col.key) && !U.isNothing(col.colIndex) && (cfg.sortable === true || col.sortable === true) && col.sortable !== false) {\n                            _SS += '<span data-ax5grid-column-sort=\"' + col.colIndex + '\" data-ax5grid-column-sort-order=\"' + (colGroup[col.colIndex].sort || \"\") + '\" />';\n                        }\n                        return _SS;\n                    }(), getFieldValue.call(this, col), '</span>');\n\n                    if (!U.isNothing(col.colIndex)) {\n                        if (cfg.enableFilter) {\n                            SS.push('<span data-ax5grid-column-filter=\"' + col.colIndex + '\" data-ax5grid-column-filter-value=\"\"  />');\n                        }\n                    }\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'style=\"height: ' + cfg.header.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                SS.push('</tr>');\n            }\n            SS.push('</table>');\n            _elTarget.html(SS.join(''));\n\n            /// append column-resizer\n            (function () {\n                var resizerHeight = cfg.header.columnHeight * _bodyRow.rows.length - cfg.header.columnBorderWidth;\n                var resizerLeft = 0;\n                var AS = [];\n                for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                    var col = _colGroup[cgi];\n                    if (!U.isNothing(col.colIndex)) {\n                        //_colGroup[cgi]._width\n                        resizerLeft += col._width;\n                        AS.push('<div data-ax5grid-column-resizer=\"' + col.colIndex + '\" style=\"height:' + resizerHeight + 'px;left: ' + (resizerLeft - 4) + 'px;\"  />');\n                    }\n                }\n                _elTarget.append(AS);\n            }).call(this);\n\n            return tableWidth;\n        };\n\n        if (cfg.asidePanelWidth > 0) {\n            repaintHeader.call(this, this.$.panel[\"aside-header\"], this.asideColGroup, asideHeaderData);\n        }\n        if (cfg.frozenColumnIndex > 0) {\n            repaintHeader.call(this, this.$.panel[\"left-header\"], this.leftHeaderColGroup, leftHeaderData);\n        }\n        this.xvar.scrollContentWidth = repaintHeader.call(this, this.$.panel[\"header-scroll\"], this.headerColGroup, headerData);\n\n        if (cfg.rightSum) {}\n    };\n\n    var scrollTo = function scrollTo(css) {\n        this.$.panel[\"header-scroll\"].css(css);\n        return this;\n    };\n\n    var toggleSort = function toggleSort(_key) {\n        var sortOrder = \"\";\n        var sortInfo = {};\n        var seq = 0;\n\n        for (var k in this.sortInfo) {\n            if (this.sortInfo[k].fixed) {\n                sortInfo[k] = this.sortInfo[k];\n                seq++;\n            }\n        }\n\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            if (this.colGroup[i].key == _key) {\n                if (sortOrder == \"\") {\n                    if (typeof this.colGroup[i].sort === \"undefined\") {\n                        sortOrder = \"desc\";\n                    } else if (this.colGroup[i].sort === \"desc\") {\n                        sortOrder = \"asc\";\n                    } else {\n                        sortOrder = undefined;\n                    }\n                }\n                this.colGroup[i].sort = sortOrder;\n            } else if (!this.config.multiSort) {\n                this.colGroup[i].sort = undefined;\n            }\n\n            if (typeof this.colGroup[i].sort !== \"undefined\") {\n                if (!sortInfo[this.colGroup[i].key]) {\n                    sortInfo[this.colGroup[i].key] = {\n                        seq: seq++,\n                        orderBy: this.colGroup[i].sort\n                    };\n                }\n            }\n        }\n\n        this.setColumnSort(sortInfo);\n        return this;\n    };\n\n    var applySortStatus = function applySortStatus(_sortInfo) {\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            for (var _key in _sortInfo) {\n                if (this.colGroup[i].key == _key) {\n                    this.colGroup[i].sort = _sortInfo[_key].orderBy;\n                }\n            }\n        }\n        return this;\n    };\n\n    var select = function select(_options) {\n        GRID.data.select.call(this, dindex, _options && _options.selected);\n        GRID.body.updateRowState.call(this, [\"selected\"], dindex);\n    };\n\n    var getExcelString = function getExcelString() {\n        var cfg = this.config;\n        var colGroup = this.colGroup;\n        var headerData = this.headerData;\n\n        var getHeader = function getHeader(_colGroup, _bodyRow) {\n            var SS = [];\n            //SS.push('<table border=\"1\">');\n            for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr>');\n                for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    var col = _bodyRow.rows[tri].cols[ci];\n                    SS.push('<td ', 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', '>', getFieldValue.call(this, col), '</td>');\n                }\n                SS.push('</tr>');\n            }\n            //SS.push('</table>');\n\n            return SS.join('');\n        };\n\n        return getHeader.call(this, colGroup, headerData);\n    };\n\n    GRID.header = {\n        init: init,\n        repaint: repaint,\n        scrollTo: scrollTo,\n        toggleSort: toggleSort,\n        applySortStatus: applySortStatus,\n        getExcelString: getExcelString\n    };\n})();\n// ax5.ui.grid.inlineEditor\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var edit_text = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function getHtml(_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"text\" value=\"' + _value + '\" >';\n        },\n        init: function init(_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function bindUI(_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.focus().select();\n        }\n    };\n\n    var edit_money = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function getHtml(_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"money\" value=\"' + _value + '\" >';\n        },\n        init: function init(_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function bindUI(_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"money\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_number = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function getHtml(_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"number\" value=\"' + _value + '\" >';\n        },\n        init: function init(_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function bindUI(_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"number\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_date = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function getHtml(_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"calendar\" value=\"' + _value + '\" >';\n        },\n        init: function init(_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function bindUI(_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5picker\");\n            _$el.ax5picker({\n                direction: \"auto\",\n                content: {\n                    type: 'date',\n                    formatter: {\n                        pattern: 'date'\n                    }\n                },\n                onStateChanged: function onStateChanged() {\n                    if (this.state == \"open\") {\n                        this.self.activePicker.attr(\"data-ax5grid-inline-edit-picker\", \"date\");\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey);\n                    }\n                }\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_select = {\n        useReturnToSave: false,\n        editMode: \"popup\",\n        getHtml: function getHtml(_root, _columnKey, _editor, _value) {\n            var po = [];\n            po.push('<div data-ax5select=\"ax5grid-editor\" data-ax5select-config=\"{}\">');\n            po.push('</div>');\n\n            return po.join('');\n        },\n        init: function init(_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function bindUI(_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var eConfig = {\n                columnKeys: {\n                    optionValue: \"value\",\n                    optionText: \"text\",\n                    optionSelected: \"selected\"\n                }\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n\n            eConfig.options.forEach(function (n) {\n                if (n[eConfig.columnKeys.optionValue] == _value) n[eConfig.columnKeys.optionSelected] = true;\n            });\n\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5select\");\n            _$el.ax5select({\n                direction: \"auto\",\n                columnKeys: eConfig.columnKeys,\n                options: eConfig.options,\n                onStateChanged: function onStateChanged() {\n                    if (this.state == \"open\") {\n                        this.self.activeSelectOptionGroup.attr(\"data-ax5grid-inline-edit-picker\", \"select\");\n                    } else if (this.state == \"changeValue\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"ESC\", _columnKey);\n                    }\n                }\n            });\n            _$el.ax5select(\"open\");\n            _$el.ax5select(\"setValue\", _value);\n            _$el.find(\"a\").focus();\n        }\n    };\n\n    var edit_checkbox = {\n        editMode: \"inline\",\n        getHtml: function getHtml(_root, _editor, _value) {\n\n            var lineHeight = _root.config.body.columnHeight - _root.config.body.columnPadding * 2 - _root.config.body.columnBorderWidth;\n            var checked;\n            if (_editor.config && _editor.config.trueValue) {\n                checked = _value == _editor.config.trueValue ? \"true\" : \"false\";\n            } else {\n                checked = _value == false || _value == \"false\" || _value < \"1\" ? \"false\" : \"true\";\n            }\n\n            var eConfig = {\n                marginTop: 2,\n                height: lineHeight - 4\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n            eConfig.marginTop = (lineHeight - eConfig.height) / 2;\n\n            return '<div data-ax5grid-editor=\"checkbox\" data-ax5grid-checked=\"' + checked + '\" style=\"height:' + eConfig.height + 'px;width:' + eConfig.height + 'px;margin-top:' + eConfig.marginTop + 'px;\"></div>';\n        }\n    };\n\n    GRID.inlineEditor = {\n        \"text\": edit_text,\n        \"money\": edit_money,\n        \"number\": edit_number,\n        \"date\": edit_date,\n        \"select\": edit_select,\n        \"checkbox\": edit_checkbox\n    };\n})();\n// ax5.ui.grid.page\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var onclickPageMove = function onclickPageMove(_act) {\n        var callback = function callback(_pageNo) {\n            if (this.page.currentPage != _pageNo) {\n                this.page.selectPage = _pageNo;\n                if (this.config.page.onChange) {\n                    this.config.page.onChange.call({\n                        self: this,\n                        page: this.page,\n                        data: this.data\n                    });\n                }\n            }\n        };\n        var processor = {\n            \"first\": function first() {\n                callback.call(this, 0);\n            },\n            \"prev\": function prev() {\n                var pageNo = this.page.currentPage - 1;\n                if (pageNo < 0) pageNo = 0;\n                callback.call(this, pageNo);\n            },\n            \"next\": function next() {\n                var pageNo = this.page.currentPage + 1;\n                if (pageNo > this.page.totalPages - 1) pageNo = this.page.totalPages - 1;\n                callback.call(this, pageNo);\n            },\n            \"last\": function last() {\n                callback.call(this, this.page.totalPages - 1);\n            }\n        };\n\n        if (_act in processor) {\n            processor[_act].call(this);\n        } else {\n            callback.call(this, _act - 1);\n        }\n    };\n\n    var navigationUpdate = function navigationUpdate() {\n        var self = this;\n        if (this.page) {\n            var page = {\n                hasPage: false,\n                currentPage: this.page.currentPage,\n                pageSize: this.page.pageSize,\n                totalElements: this.page.totalElements,\n                totalPages: this.page.totalPages,\n                firstIcon: this.config.page.firstIcon,\n                prevIcon: this.config.page.prevIcon || \"«\",\n                nextIcon: this.config.page.nextIcon || \"»\",\n                lastIcon: this.config.page.lastIcon\n            };\n            var navigationItemCount = this.config.page.navigationItemCount;\n\n            page[\"@paging\"] = function () {\n                var returns = [];\n\n                var startI = page.currentPage - Math.floor(navigationItemCount / 2);\n                if (startI < 0) startI = 0;\n                var endI = page.currentPage + navigationItemCount;\n                if (endI > page.totalPages) endI = page.totalPages;\n\n                if (endI - startI > navigationItemCount) {\n                    endI = startI + navigationItemCount;\n                }\n\n                if (endI - startI < navigationItemCount) {\n                    startI = endI - navigationItemCount;\n                }\n                if (startI < 0) startI = 0;\n\n                for (var p = startI, l = endI; p < l; p++) {\n                    returns.push({ 'pageNo': p + 1, 'selected': page.currentPage == p });\n                }\n                return returns;\n            }();\n\n            if (page[\"@paging\"].length > 0) {\n                page.hasPage = true;\n            }\n\n            this.$[\"page\"][\"navigation\"].html(GRID.tmpl.get(\"page_navigation\", page));\n            this.$[\"page\"][\"navigation\"].find(\"[data-ax5grid-page-move]\").on(\"click\", function () {\n                var act = this.getAttribute(\"data-ax5grid-page-move\");\n                onclickPageMove.call(self, act);\n            });\n        } else {\n            this.$[\"page\"][\"navigation\"].empty();\n        }\n    };\n\n    var statusUpdate = function statusUpdate() {\n        var fromRowIndex = this.xvar.paintStartRowIndex;\n        var toRowIndex = this.xvar.paintStartRowIndex + this.xvar.paintRowCount - 1;\n        //var totalElements = (this.page && this.page.totalElements) ? this.page.totalElements : this.xvar.dataRowCount;\n        var totalElements = this.xvar.dataRowCount;\n        if (toRowIndex > totalElements) {\n            toRowIndex = totalElements;\n        }\n\n        this.$[\"page\"][\"status\"].html(GRID.tmpl.get(\"page_status\", {\n            fromRowIndex: U.number(fromRowIndex + 1, { \"money\": true }),\n            toRowIndex: U.number(toRowIndex, { \"money\": true }),\n            totalElements: U.number(totalElements, { \"money\": true }),\n            dataRowCount: totalElements !== this.xvar.dataRealRowCount ? U.number(this.xvar.dataRealRowCount, { \"money\": true }) : false\n        }));\n    };\n\n    GRID.page = {\n        navigationUpdate: navigationUpdate,\n        statusUpdate: statusUpdate\n    };\n})();\n// ax5.ui.grid.scroller\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var convertScrollPosition = {\n        \"vertical\": function vertical(css, _var) {\n            var _content_height = _var._content_height - _var._panel_height;\n            var _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight;\n            var top = _content_height * css.top / _scroller_height;\n            if (top < 0) top = 0;else if (_content_height < top) {\n                top = _content_height;\n            }\n            return {\n                top: -top\n            };\n        },\n        \"horizontal\": function horizontal(css, _var) {\n            var _content_width = _var._content_width - _var._panel_width;\n            var _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth;\n            var left = _content_width * css.left / _scroller_width;\n            if (left < 0) left = 0;else if (_content_width < left) {\n                left = _content_width;\n            }\n            return {\n                left: -left\n            };\n        }\n    };\n    var convertScrollBarPosition = {\n        \"vertical\": function vertical(_top, _var) {\n\n            var type = \"vertical\";\n            var _content_height = _var._content_height - _var._panel_height;\n            var _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight;\n            var top = _scroller_height * _top / _content_height;\n\n            if (-top > _scroller_height) {\n                top = -_scroller_height;\n\n                var scrollPositon = convertScrollPosition[type].call(this, { top: -top }, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.body.scrollTo.call(this, scrollPositon);\n            }\n\n            return -top;\n        },\n        \"horizontal\": function horizontal(_left, _var) {\n            var type = \"horizontal\";\n            var _content_width = _var._content_width - _var._panel_width;\n            var _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth;\n            var left = _scroller_width * _left / _content_width;\n\n            if (-left > _scroller_width) {\n                left = -_scroller_width;\n                var scrollPositon = convertScrollPosition[type].call(this, { left: -left }, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.header.scrollTo.call(this, scrollPositon);\n                GRID.body.scrollTo.call(this, scrollPositon);\n            }\n\n            return -left;\n        }\n    };\n    var scrollBarMover = {\n        \"click\": function click(track, bar, type, e) {\n\n            // 마우스 무브 완료 타임과 클릭타임 차이가 20 보다 작으면 클릭이벤트 막기.\n            if (new Date().getTime() - GRID.scroller.moveout_timer < 20) {\n                return false;\n            }\n\n            var self = this,\n                trackOffset = track.offset(),\n                barBox = {\n                width: bar.outerWidth(), height: bar.outerHeight()\n            },\n                trackBox = {\n                width: track.innerWidth(), height: track.innerHeight()\n            },\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n                getScrollerPosition = {\n                \"vertical\": function vertical(e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    // track을 벗어 나지 안도록 범위 체크\n                    var newTop = mouseObj.clientY - trackOffset.top;\n                    if (newTop < 0) {\n                        newTop = 0;\n                    } else if (newTop + barBox.height > trackBox.height) {\n                        newTop = trackBox.height - barBox.height;\n                    }\n                    return { top: newTop };\n                },\n                \"horizontal\": function horizontal(e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    // track을 벗어 나지 안도록 범위 체크\n                    var newLeft = mouseObj.clientX - trackOffset.left;\n                    if (newLeft < 0) {\n                        newLeft = 0;\n                    } else if (newLeft + barBox.width > trackBox.width) {\n                        newLeft = trackBox.width - barBox.width;\n                    }\n                    return { left: newLeft };\n                }\n            };\n\n            var css = getScrollerPosition[type](e);\n            bar.css(css);\n\n            var scrollPositon = convertScrollPosition[type].call(self, css, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            });\n            if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n            GRID.body.scrollTo.call(self, scrollPositon);\n        },\n        \"on\": function on(track, bar, type, e) {\n            var self = this,\n                barOffset = bar.position(),\n                barBox = {\n                width: bar.outerWidth(), height: bar.outerHeight()\n            },\n                trackBox = {\n                width: track.innerWidth(), height: track.innerHeight()\n            },\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n                getScrollerPosition = {\n                \"vertical\": function vertical(e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                    // track을 벗어 나지 안도록 범위 체크\n                    var newTop = barOffset.top + self.xvar.__da;\n                    if (newTop < 0) {\n                        newTop = 0;\n                    } else if (newTop + barBox.height > trackBox.height) {\n                        newTop = trackBox.height - barBox.height;\n                    }\n                    return { top: newTop };\n                },\n                \"horizontal\": function horizontal(e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                    // track을 벗어 나지 안도록 범위 체크\n                    var newLeft = barOffset.left + self.xvar.__da;\n                    if (newLeft < 0) {\n                        newLeft = 0;\n                    } else if (newLeft + barBox.width > trackBox.width) {\n                        newLeft = trackBox.width - barBox.width;\n                    }\n                    return { left: newLeft };\n                }\n            };\n\n            self.xvar.__da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n\n            jQuery(document.body).bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                var css = getScrollerPosition[type](e);\n                bar.css(css);\n\n                var scrollPositon = convertScrollPosition[type].call(self, css, {\n                    _content_width: _content_width,\n                    _content_height: _content_height,\n                    _panel_width: _panel_width,\n                    _panel_height: _panel_height,\n                    _horizontal_scroller_width: _horizontal_scroller_width,\n                    _vertical_scroller_height: _vertical_scroller_height,\n                    verticalScrollBarHeight: verticalScrollBarHeight,\n                    horizontalScrollBarWidth: horizontalScrollBarWidth\n                });\n\n                if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n                GRID.body.scrollTo.call(self, scrollPositon);\n            }).bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                scrollBarMover.off.call(self);\n            }).bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                scrollBarMover.off.call(self);\n            });\n\n            jQuery(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);\n        },\n        \"off\": function off() {\n\n            GRID.scroller.moveout_timer = new Date().getTime();\n\n            jQuery(document.body).unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId).unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId).unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');\n        }\n    };\n    var scrollContentMover = {\n        \"wheel\": function wheel(delta) {\n            var self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth;\n\n            if (isNaN(_content_height) || isNaN(_content_width)) {\n                return false;\n            }\n\n            var newLeft, newTop;\n            var _top_is_end = false;\n            var _left_is_end = false;\n\n            newLeft = _body_scroll_position.left - delta.x;\n            newTop = _body_scroll_position.top - delta.y;\n\n            // newTop이 범위를 넘었는지 체크\n            if (newTop >= 0) {\n                newTop = 0;\n                _top_is_end = true;\n            } else if (newTop <= _panel_height - _content_height) {\n                newTop = _panel_height - _content_height;\n                if (newTop >= 0) newTop = 0;\n                _top_is_end = true;\n            } else {\n                if (delta.y == 0) _top_is_end = true;\n            }\n\n            // newLeft이 범위를 넘었는지 체크\n            if (newLeft >= 0) {\n                newLeft = 0;\n                _left_is_end = true;\n            } else if (newLeft <= _panel_width - _content_width) {\n                newLeft = _panel_width - _content_width;\n                if (newLeft >= 0) newLeft = 0;\n                _left_is_end = true;\n            } else {\n                if (delta.x == 0) _left_is_end = true;\n            }\n\n            //self.$[\"panel\"][\"body-scroll\"].css({left: newLeft, top: newTop});\n            GRID.header.scrollTo.call(this, { left: newLeft });\n            GRID.body.scrollTo.call(this, { left: newLeft, top: newTop });\n            resize.call(this);\n\n            return !_top_is_end || !_left_is_end;\n        },\n        \"on\": function on() {\n            var self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                getContentPosition = function getContentPosition(e) {\n                var mouseObj = GRID.util.getMousePosition(e);\n                var newLeft, newTop;\n\n                self.xvar.__x_da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                self.xvar.__y_da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n\n                newLeft = _body_scroll_position.left + self.xvar.__x_da;\n                newTop = _body_scroll_position.top + self.xvar.__y_da;\n\n                // newTop이 범위를 넘었는지 체크\n                if (newTop >= 0) {\n                    newTop = 0;\n                } else if (newTop <= _panel_height - _content_height) {\n                    newTop = _panel_height - _content_height;\n                    if (newTop >= 0) newTop = 0;\n                }\n\n                // newLeft이 범위를 넘었는지 체크\n                if (newLeft >= 0) {\n                    newLeft = 0;\n                } else if (newLeft <= _panel_width - _content_width) {\n                    newLeft = _panel_width - _content_width;\n                    if (newLeft >= 0) newLeft = 0;\n                }\n\n                return {\n                    left: newLeft, top: newTop\n                };\n            };\n\n            this.xvar.__x_da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n            this.xvar.__y_da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n\n            jQuery(document.body).bind(\"touchmove\" + \".ax5grid-\" + this.instanceId, function (e) {\n                var css = getContentPosition(e);\n                GRID.header.scrollTo.call(self, { left: css.left });\n                GRID.body.scrollTo.call(self, css, \"noRepaint\");\n                resize.call(self);\n                U.stopEvent(e);\n            }).bind(\"touchend\" + \".ax5grid-\" + this.instanceId, function (e) {\n                var css = getContentPosition(e);\n                GRID.header.scrollTo.call(self, { left: css.left });\n                GRID.body.scrollTo.call(self, css);\n                resize.call(self);\n                U.stopEvent(e);\n                scrollContentMover.off.call(self);\n            });\n\n            jQuery(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);\n        },\n        \"off\": function off() {\n\n            jQuery(document.body).unbind(\"touchmove\" + \".ax5grid-\" + this.instanceId).unbind(\"touchend\" + \".ax5grid-\" + this.instanceId);\n\n            jQuery(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');\n        }\n    };\n\n    var init = function init() {\n        var self = this;\n        //this.config.scroller.size\n        var margin = this.config.scroller.trackPadding;\n\n        this.$[\"scroller\"][\"vertical-bar\"].css({ width: this.config.scroller.size - (margin + 1), left: margin / 2 });\n        this.$[\"scroller\"][\"horizontal-bar\"].css({ height: this.config.scroller.size - (margin + 1), top: margin / 2 });\n\n        this.$[\"scroller\"][\"vertical-bar\"].on(GRID.util.ENM[\"mousedown\"], function (e) {\n            this.xvar.mousePosition = GRID.util.getMousePosition(e);\n            scrollBarMover.on.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n        }.bind(this)).on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n        this.$[\"scroller\"][\"vertical\"].on(\"click\", function (e) {\n            if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"vertical\") {\n                scrollBarMover.click.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n            }\n        }.bind(this));\n\n        this.$[\"scroller\"][\"horizontal-bar\"].on(GRID.util.ENM[\"mousedown\"], function (e) {\n            this.xvar.mousePosition = GRID.util.getMousePosition(e);\n            scrollBarMover.on.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n        }.bind(this)).on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n        this.$[\"scroller\"][\"horizontal\"].on(\"click\", function (e) {\n            if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"horizontal\") {\n                scrollBarMover.click.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n            }\n        }.bind(this));\n\n        this.$[\"container\"][\"body\"].on('mousewheel DOMMouseScroll', function (e) {\n            var E = e.originalEvent;\n            var delta = { x: 0, y: 0 };\n            if (E.detail) {\n                delta.y = E.detail * 10;\n            } else {\n                if (typeof E.deltaY === \"undefined\") {\n                    delta.y = -E.wheelDelta;\n                    delta.x = 0;\n                } else {\n                    delta.y = E.deltaY;\n                    delta.x = E.deltaX;\n                }\n            }\n\n            if (scrollContentMover.wheel.call(this, delta)) {\n                U.stopEvent(e);\n            }\n        }.bind(this));\n\n        if (document.addEventListener && ax5.info.supportTouch) {\n            this.$[\"container\"][\"body\"].on(\"touchstart\", '[data-ax5grid-panel]', function (e) {\n                self.xvar.mousePosition = GRID.util.getMousePosition(e);\n                scrollContentMover.on.call(self);\n            });\n        }\n    };\n\n    var resize = function resize() {\n        var _vertical_scroller_height = this.$[\"scroller\"][\"vertical\"].height(),\n            _horizontal_scroller_width = this.$[\"scroller\"][\"horizontal\"].width(),\n            _panel_height = this.$[\"panel\"][\"body\"].height(),\n            _panel_width = this.$[\"panel\"][\"body\"].width(),\n            _content_height = this.xvar.scrollContentHeight,\n            _content_width = this.xvar.scrollContentWidth,\n            verticalScrollBarHeight = _panel_height * _vertical_scroller_height / _content_height,\n            horizontalScrollBarWidth = _panel_width * _horizontal_scroller_width / _content_width;\n\n        if (verticalScrollBarHeight < this.config.scroller.barMinSize) verticalScrollBarHeight = this.config.scroller.barMinSize;\n        if (horizontalScrollBarWidth < this.config.scroller.barMinSize) horizontalScrollBarWidth = this.config.scroller.barMinSize;\n\n        this.$[\"scroller\"][\"vertical-bar\"].css({\n            top: convertScrollBarPosition.vertical.call(this, this.$.panel[\"body-scroll\"].position().top, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            height: verticalScrollBarHeight\n        });\n\n        //console.log(horizontalScrollBarWidth);\n\n        this.$[\"scroller\"][\"horizontal-bar\"].css({\n            left: convertScrollBarPosition.horizontal.call(this, this.$.panel[\"body-scroll\"].position().left, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            width: horizontalScrollBarWidth\n        });\n\n        _vertical_scroller_height = null;\n        _horizontal_scroller_width = null;\n        _panel_height = null;\n        _panel_width = null;\n        _content_height = null;\n        _content_width = null;\n        verticalScrollBarHeight = null;\n        horizontalScrollBarWidth = null;\n    };\n\n    GRID.scroller = {\n        // 타이머\n        moveout_timer: new Date().getTime(),\n        init: init,\n        resize: resize\n    };\n})();\n// ax5.ui.grid.tmpl\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var main = function main() {\n        return \"<div data-ax5grid-container=\\\"root\\\" data-ax5grid-instance=\\\"{{instanceId}}\\\">\\n            <div data-ax5grid-container=\\\"hidden\\\">\\n                <textarea data-ax5grid-form=\\\"clipboard\\\"></textarea>\\n            </div>\\n            <div data-ax5grid-container=\\\"header\\\">\\n                <div data-ax5grid-panel=\\\"aside-header\\\"></div>\\n                <div data-ax5grid-panel=\\\"left-header\\\"></div>\\n                <div data-ax5grid-panel=\\\"header\\\">\\n                    <div data-ax5grid-panel-scroll=\\\"header\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"right-header\\\"></div>\\n            </div>\\n            <div data-ax5grid-container=\\\"body\\\">\\n                <div data-ax5grid-panel=\\\"top-aside-body\\\"></div>\\n                <div data-ax5grid-panel=\\\"top-left-body\\\"></div>\\n                <div data-ax5grid-panel=\\\"top-body\\\">\\n                    <div data-ax5grid-panel-scroll=\\\"top-body\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"top-right-body\\\"></div>\\n                <div data-ax5grid-panel=\\\"aside-body\\\">\\n                    <div data-ax5grid-panel-scroll=\\\"aside-body\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"left-body\\\">\\n                    <div data-ax5grid-panel-scroll=\\\"left-body\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"body\\\">\\n                    <div data-ax5grid-panel-scroll=\\\"body\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"right-body\\\">\\n                  <div data-ax5grid-panel-scroll=\\\"right-body\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"bottom-aside-body\\\"></div>\\n                <div data-ax5grid-panel=\\\"bottom-left-body\\\"></div>\\n                <div data-ax5grid-panel=\\\"bottom-body\\\">\\n                    <div data-ax5grid-panel-scroll=\\\"bottom-body\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"bottom-right-body\\\"></div>\\n            </div>\\n            <div data-ax5grid-container=\\\"page\\\">\\n                <div data-ax5grid-page=\\\"holder\\\">\\n                    <div data-ax5grid-page=\\\"navigation\\\"></div>\\n                    <div data-ax5grid-page=\\\"status\\\"></div>\\n                </div>\\n            </div>\\n            <div data-ax5grid-container=\\\"scroller\\\">\\n                <div data-ax5grid-scroller=\\\"vertical\\\">\\n                    <div data-ax5grid-scroller=\\\"vertical-bar\\\"></div>    \\n                </div>\\n                <div data-ax5grid-scroller=\\\"horizontal\\\">\\n                    <div data-ax5grid-scroller=\\\"horizontal-bar\\\"></div>\\n                </div>\\n                <div data-ax5grid-scroller=\\\"corner\\\"></div>\\n            </div>\\n            <div data-ax5grid-resizer=\\\"vertical\\\"></div>\\n            <div data-ax5grid-resizer=\\\"horizontal\\\"></div>\\n        </div>\";\n    };\n\n    var page_navigation = function page_navigation() {\n        return \"<div data-ax5grid-page-navigation=\\\"holder\\\">\\n            {{#hasPage}}\\n            <div data-ax5grid-page-navigation=\\\"cell\\\">    \\n                {{#firstIcon}}<button data-ax5grid-page-move=\\\"first\\\">{{{firstIcon}}}</button>{{/firstIcon}}\\n                <button data-ax5grid-page-move=\\\"prev\\\">{{{prevIcon}}}</button>\\n            </div>\\n            <div data-ax5grid-page-navigation=\\\"cell-paging\\\">\\n                {{#@paging}}\\n                <button data-ax5grid-page-move=\\\"{{pageNo}}\\\" data-ax5grid-page-selected=\\\"{{selected}}\\\">{{pageNo}}</button>\\n                {{/@paging}}\\n            </div>\\n            <div data-ax5grid-page-navigation=\\\"cell\\\">\\n                <button data-ax5grid-page-move=\\\"next\\\">{{{nextIcon}}}</button>\\n                {{#lastIcon}}<button data-ax5grid-page-move=\\\"last\\\">{{{lastIcon}}}</button>{{/lastIcon}}\\n            </div>\\n            {{/hasPage}}\\n        </div>\";\n    };\n\n    var page_status = function page_status() {\n        return \"<span>{{fromRowIndex}} - {{toRowIndex}} of {{totalElements}}{{#dataRowCount}} ({{dataRowCount}}){{/dataRowCount}}</span>\";\n    };\n\n    GRID.tmpl = {\n        \"main\": main,\n        \"page_navigation\": page_navigation,\n        \"page_status\": page_status,\n\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(GRID.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();\n// ax5.ui.grid.util\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    /**\n     * @method ax5grid.util.divideTableByFrozenColumnIndex\n     * @param _table\n     * @param _frozenColumnIndex\n     * @returns {{leftHeaderData: {rows: Array}, headerData: {rows: Array}}}\n     */\n\n    var divideTableByFrozenColumnIndex = function divideTableByFrozenColumnIndex(_table, _frozenColumnIndex) {\n        var tempTable_l = { rows: [] };\n        var tempTable_r = { rows: [] };\n        for (var r = 0, rl = _table.rows.length; r < rl; r++) {\n            var row = _table.rows[r];\n\n            tempTable_l.rows[r] = { cols: [] };\n            tempTable_r.rows[r] = { cols: [] };\n\n            for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                var col = jQuery.extend({}, row.cols[c]);\n                var colStartIndex = col.colIndex,\n                    colEndIndex = col.colIndex + col.colspan;\n\n                if (colStartIndex < _frozenColumnIndex) {\n                    if (colEndIndex <= _frozenColumnIndex) {\n                        // 좌측편에 변형없이 추가\n                        tempTable_l.rows[r].cols.push(col);\n                    } else {\n                        var leftCol = jQuery.extend({}, col);\n                        var rightCol = jQuery.extend({}, leftCol);\n                        leftCol.colspan = _frozenColumnIndex - leftCol.colIndex;\n                        rightCol.colIndex = _frozenColumnIndex;\n                        rightCol.colspan = col.colspan - leftCol.colspan;\n\n                        tempTable_l.rows[r].cols.push(leftCol);\n                        tempTable_r.rows[r].cols.push(rightCol);\n                    }\n                } else {\n                    // 오른편\n                    tempTable_r.rows[r].cols.push(col);\n                }\n            }\n        }\n\n        return {\n            leftData: tempTable_l,\n            rightData: tempTable_r\n        };\n    };\n\n    var getMousePosition = function getMousePosition(e) {\n        var mouseObj,\n            originalEvent = e.originalEvent ? e.originalEvent : e;\n        mouseObj = 'changedTouches' in originalEvent ? originalEvent.changedTouches[0] : originalEvent;\n        // clientX, Y 쓰면 스크롤에서 문제 발생\n        return {\n            clientX: mouseObj.pageX,\n            clientY: mouseObj.pageY\n        };\n    };\n\n    var ENM = {\n        \"mousedown\": ax5.info.supportTouch ? \"touchstart\" : \"mousedown\",\n        \"mousemove\": ax5.info.supportTouch ? \"touchmove\" : \"mousemove\",\n        \"mouseup\": ax5.info.supportTouch ? \"touchend\" : \"mouseup\"\n    };\n\n    var makeHeaderTable = function makeHeaderTable(_columns) {\n        var columns = U.deepCopy(_columns);\n        var cfg = this.config;\n        var table = {\n            rows: []\n        };\n        var colIndex = 0;\n        var maekRows = function maekRows(_columns, depth, parentField) {\n            var row = { cols: [] };\n            var i = 0,\n                l = _columns.length;\n\n            for (; i < l; i++) {\n                var field = _columns[i];\n                var colspan = 1;\n\n                if (!field.hidden) {\n                    field.colspan = 1;\n                    field.rowspan = 1;\n\n                    field.rowIndex = depth;\n                    field.colIndex = function () {\n                        if (!parentField) {\n                            return colIndex++;\n                        } else {\n                            colIndex = parentField.colIndex + i + 1;\n                            return parentField.colIndex + i;\n                        }\n                    }();\n\n                    row.cols.push(field);\n\n                    if ('columns' in field) {\n                        colspan = maekRows(field.columns, depth + 1, field);\n                    } else {\n                        field.width = 'width' in field ? field.width : cfg.columnMinWidth;\n                    }\n                    field.colspan = colspan;\n                } else {}\n            }\n\n            if (row.cols.length > 0) {\n                if (!table.rows[depth]) {\n                    table.rows[depth] = { cols: [] };\n                }\n                table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                return row.cols.length - 1 + colspan;\n            } else {\n                return colspan;\n            }\n        };\n        maekRows(columns, 0);\n\n        // set rowspan\n        for (var r = 0, rl = table.rows.length; r < rl; r++) {\n            for (var c = 0, cl = table.rows[r].cols.length; c < cl; c++) {\n                if (!('columns' in table.rows[r].cols[c])) {\n                    table.rows[r].cols[c].rowspan = rl - r;\n                }\n            }\n        }\n\n        return table;\n    };\n\n    var makeBodyRowTable = function makeBodyRowTable(_columns) {\n        var columns = U.deepCopy(_columns);\n        var table = {\n            rows: []\n        };\n        var colIndex = 0;\n        var maekRows = function maekRows(_columns, depth, parentField) {\n            var row = { cols: [] };\n            var i = 0,\n                l = _columns.length;\n\n            var selfMakeRow = function selfMakeRow(__columns) {\n                var i = 0,\n                    l = __columns.length;\n                for (; i < l; i++) {\n                    var field = __columns[i];\n                    var colspan = 1;\n\n                    if (!field.hidden) {\n\n                        if ('key' in field) {\n                            field.colspan = 1;\n                            field.rowspan = 1;\n\n                            field.rowIndex = depth;\n                            field.colIndex = function () {\n                                if (!parentField) {\n                                    return colIndex++;\n                                } else {\n                                    colIndex = parentField.colIndex + i + 1;\n                                    return parentField.colIndex + i;\n                                }\n                            }();\n\n                            row.cols.push(field);\n                            if ('columns' in field) {\n                                colspan = maekRows(field.columns, depth + 1, field);\n                            }\n                            field.colspan = colspan;\n                        } else {\n                            if ('columns' in field) {\n                                selfMakeRow(field.columns, depth);\n                            }\n                        }\n                    } else {}\n                }\n            };\n\n            for (; i < l; i++) {\n                var field = _columns[i];\n                var colspan = 1;\n\n                if (!field.hidden) {\n\n                    if ('key' in field) {\n                        field.colspan = 1;\n                        field.rowspan = 1;\n\n                        field.rowIndex = depth;\n                        field.colIndex = function () {\n                            if (!parentField) {\n                                return colIndex++;\n                            } else {\n                                colIndex = parentField.colIndex + i + 1;\n                                return parentField.colIndex + i;\n                            }\n                        }();\n\n                        row.cols.push(field);\n                        if ('columns' in field) {\n                            colspan = maekRows(field.columns, depth + 1, field);\n                        }\n                        field.colspan = colspan;\n                    } else {\n                        if ('columns' in field) {\n                            selfMakeRow(field.columns, depth);\n                        }\n                    }\n                } else {}\n            }\n\n            if (row.cols.length > 0) {\n                if (!table.rows[depth]) {\n                    table.rows[depth] = { cols: [] };\n                }\n                table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                return row.cols.length - 1 + colspan;\n            } else {\n                return colspan;\n            }\n        };\n        maekRows(columns, 0);\n\n        (function (table) {\n            // set rowspan\n            for (var r = 0, rl = table.rows.length; r < rl; r++) {\n                var row = table.rows[r];\n                for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                    var col = row.cols[c];\n                    if (!('columns' in col)) {\n                        col.rowspan = rl - r;\n                    }\n                }\n            }\n        })(table);\n\n        return table;\n    };\n\n    var makeBodyRowMap = function makeBodyRowMap(_table) {\n        var map = {};\n        _table.rows.forEach(function (row) {\n            row.cols.forEach(function (col) {\n                map[col.rowIndex + \"_\" + col.colIndex] = jQuery.extend({}, col);\n            });\n        });\n        return map;\n    };\n\n    var makeFootSumTable = function makeFootSumTable(_footSumColumns) {\n        var table = {\n            rows: []\n        };\n\n        for (var r = 0, rl = _footSumColumns.length; r < rl; r++) {\n            var footSumRow = _footSumColumns[r];\n            table.rows[r] = { cols: [] };\n            var addC = 0;\n            for (var c = 0, cl = footSumRow.length; c < cl; c++) {\n                if (addC > this.columns.length) break;\n                var colspan = footSumRow[c].colspan || 1;\n                if (footSumRow[c].label || footSumRow[c].key) {\n                    table.rows[r].cols.push({\n                        colspan: colspan,\n                        rowspan: 1,\n                        colIndex: addC,\n                        columnAttr: \"sum\",\n                        align: footSumRow[c].align,\n                        label: footSumRow[c].label,\n                        key: footSumRow[c].key,\n                        collector: footSumRow[c].collector,\n                        formatter: footSumRow[c].formatter\n                    });\n                } else {\n                    table.rows[r].cols.push({\n                        colIndex: addC,\n                        colspan: colspan,\n                        rowspan: 1,\n                        label: \"&nbsp;\"\n                    });\n                }\n                addC += colspan;\n            }\n            addC -= 1;\n            if (addC < this.columns.length + 1) {\n                for (var c = addC; c < this.columns.length + 1; c++) {\n                    table.rows[r].cols.push({\n                        colIndex: c + 1,\n                        colspan: 1,\n                        rowspan: 1,\n                        label: \"&nbsp;\"\n                    });\n                }\n            }\n        }\n        return table;\n    };\n\n    var makeBodyGroupingTable = function makeBodyGroupingTable(_bodyGroupingColumns) {\n        var table = {\n            rows: []\n        };\n\n        var r = 0;\n        table.rows[r] = { cols: [] };\n        var addC = 0;\n        for (var c = 0, cl = _bodyGroupingColumns.length; c < cl; c++) {\n            if (addC > this.columns.length) break;\n            var colspan = _bodyGroupingColumns[c].colspan || 1;\n            if (_bodyGroupingColumns[c].label || _bodyGroupingColumns[c].key) {\n                table.rows[r].cols.push({\n                    colspan: colspan,\n                    rowspan: 1,\n                    rowIndex: 0,\n                    colIndex: addC,\n                    columnAttr: \"default\",\n                    align: _bodyGroupingColumns[c].align,\n                    label: _bodyGroupingColumns[c].label,\n                    key: _bodyGroupingColumns[c].key,\n                    collector: _bodyGroupingColumns[c].collector,\n                    formatter: _bodyGroupingColumns[c].formatter\n                });\n            } else {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: addC,\n                    colspan: colspan,\n                    rowspan: 1,\n                    label: \"&nbsp;\"\n                });\n            }\n            addC += colspan;\n        }\n\n        if (addC < this.colGroup.length) {\n            for (var c = addC; c < this.colGroup.length; c++) {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: c + 1,\n                    colspan: 1,\n                    rowspan: 1,\n                    label: \"&nbsp;\"\n                });\n            }\n        }\n\n        return table;\n    };\n\n    var findPanelByColumnIndex = function findPanelByColumnIndex(_dindex, _colIndex, _rowIndex) {\n        var _containerPanelName;\n        var _isScrollPanel = false;\n        var _panels = [];\n\n        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n        if (this.xvar.frozenColumnIndex > _colIndex) _panels.push(\"left\");\n        _panels.push(\"body\");\n\n        if (this.xvar.frozenColumnIndex <= _colIndex || this.xvar.frozenRowIndex <= _dindex) {\n            _containerPanelName = _panels.join(\"-\");\n            _panels.push(\"scroll\");\n            _isScrollPanel = true;\n        }\n\n        return {\n            panelName: _panels.join(\"-\"),\n            containerPanelName: _containerPanelName,\n            isScrollPanel: _isScrollPanel\n        };\n    };\n\n    var getRealPathForDataItem = function getRealPathForDataItem(_dataPath) {\n        var path = [];\n        var _path = [].concat(_dataPath.split(/[\\.\\[\\]]/g));\n        _path.forEach(function (n) {\n            if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n        });\n        _path = null;\n        return path.join(\"\");\n    };\n\n    GRID.util = {\n        divideTableByFrozenColumnIndex: divideTableByFrozenColumnIndex,\n        getMousePosition: getMousePosition,\n        ENM: ENM,\n        makeHeaderTable: makeHeaderTable,\n        makeBodyRowTable: makeBodyRowTable,\n        makeBodyRowMap: makeBodyRowMap,\n        makeFootSumTable: makeFootSumTable,\n        makeBodyGroupingTable: makeBodyGroupingTable,\n        findPanelByColumnIndex: findPanelByColumnIndex,\n        getRealPathForDataItem: getRealPathForDataItem\n    };\n})();","/*\n * Copyright (c) 2016. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n// ax5.ui.grid\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var GRID;\n\n    UI.addClass({\n        className: \"grid\",\n        version: \"${VERSION}\"\n    }, (function () {\n        /**\n         * @class ax5grid\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var myGrid = new ax5.ui.grid();\n         * ```\n         */\n        var ax5grid = function () {\n            var\n                self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n\n                // 틀고정 속성\n                frozenColumnIndex: 0,\n                frozenRowIndex: 0,\n                showLineNumber: false,\n                showRowSelector: false,\n                multipleSelect: true,\n\n                height: 0,\n                columnMinWidth: 100,\n                lineNumberColumnWidth: 30,\n                rowSelectorColumnWidth: 26,\n                sortable: undefined,\n                remoteSort: false,\n\n                header: {\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1\n                },\n                body: {\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1,\n                    grouping: false\n                },\n                rightSum: false,\n                footSum: false,\n                page: {\n                    height: 25,\n                    display: true,\n                    navigationItemCount: 5\n                },\n                scroller: {\n                    size: 15,\n                    barMinSize: 15,\n                    trackPadding: 4\n                },\n                columnKeys: {\n                    selected: '__selected__',\n                    modified: '__modified__',\n                    deleted: '__deleted__',\n                    disableSelection: '__disable_selection__'\n                }\n            };\n            this.xvar = {\n                bodyTrHeight: 0, // 한줄의 높이\n                scrollContentWidth: 0, // 스크롤 될 내용물의 너비 (스크롤 될 내용물 : panel['body-scroll'] 안에 컬럼이 있는)\n                scrollContentHeight: 0 // 스크롤 된 내용물의 높이\n            };\n\n            // 그리드 데이터셋\n            this.columns = []; // config.columns에서 복제된 오브젝트\n            this.colGroup = []; // columns를 table태그로 출력하기 좋게 변환한 오브젝트\n            this.footSumColumns = [];\n            this.bodyGrouping = {};\n\n            this.list = []; // 그리드의 데이터\n            this.page = {}; // 그리드의 페이지 정보\n            this.selectedDataIndexs = [];\n            this.deletedList = [];\n            this.sortInfo = {}; // 그리드의 헤더 정렬 정보\n            this.focusedColumn = {}; // 그리드 바디의 포커스된 셀 정보\n            this.selectedColumn = {}; // 그리드 바디의 선택된 셀 정보\n            this.isInlineEditing = false;\n            this.inlineEditing = {};\n\n            // header\n            this.headerTable = {};\n            this.leftHeaderData = {};\n            this.headerData = {};\n            this.rightHeaderData = {};\n\n            // body\n            this.bodyRowTable = {};\n            this.leftBodyRowData = {};\n            this.bodyRowData = {};\n            this.rightBodyRowData = {};\n            this.bodyRowMap = {};\n\n            this.bodyGroupingTable = {};\n            this.leftBodyGroupingData = {};\n            this.bodyGroupingData = {};\n            this.rightBodyGroupingData = {};\n\n            // footSum\n            this.footSumTable = {}; // footSum의 출력레이아웃\n            this.leftFootSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 왼쪽\n            this.footSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 오른쪽\n            this.needToPaintSum = true; // 데이터 셋이 변경되어 summary 변경 필요여부\n\n            cfg = this.config;\n\n            var\n                onStateChanged = function (_opts, _that) {\n                    if (_opts && _opts.onStateChanged) {\n                        _opts.onStateChanged.call(_that, _that);\n                    }\n                    else if (this.onStateChanged) {\n                        this.onStateChanged.call(_that, _that);\n                    }\n                    return true;\n                },\n                initGrid = function () {\n                    // 그리드 템플릿에 전달하고자 하는 데이터를 정리합시다.\n\n                    var data = {\n                        instanceId: this.id\n                    };\n\n                    this.$target.html(GRID.tmpl.get(\"main\", data));\n\n                    // 그리드 패널 프레임의 각 엘리먼트를 캐쉬합시다.\n                    this.$ = {\n                        \"container\": {\n                            \"hidden\": this.$target.find('[data-ax5grid-container=\"hidden\"]'),\n                            \"root\": this.$target.find('[data-ax5grid-container=\"root\"]'),\n                            \"header\": this.$target.find('[data-ax5grid-container=\"header\"]'),\n                            \"body\": this.$target.find('[data-ax5grid-container=\"body\"]'),\n                            \"page\": this.$target.find('[data-ax5grid-container=\"page\"]'),\n                            \"scroller\": this.$target.find('[data-ax5grid-container=\"scroller\"]')\n                        },\n                        \"panel\": {\n                            \"aside-header\": this.$target.find('[data-ax5grid-panel=\"aside-header\"]'),\n                            \"left-header\": this.$target.find('[data-ax5grid-panel=\"left-header\"]'),\n                            \"header\": this.$target.find('[data-ax5grid-panel=\"header\"]'),\n                            \"header-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"header\"]'),\n                            \"right-header\": this.$target.find('[data-ax5grid-panel=\"right-header\"]'),\n                            \"top-aside-body\": this.$target.find('[data-ax5grid-panel=\"top-aside-body\"]'),\n                            \"top-left-body\": this.$target.find('[data-ax5grid-panel=\"top-left-body\"]'),\n                            \"top-body\": this.$target.find('[data-ax5grid-panel=\"top-body\"]'),\n                            \"top-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"top-body\"]'),\n                            \"top-right-body\": this.$target.find('[data-ax5grid-panel=\"top-right-body\"]'),\n                            \"aside-body\": this.$target.find('[data-ax5grid-panel=\"aside-body\"]'),\n                            \"aside-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"aside-body\"]'),\n                            \"left-body\": this.$target.find('[data-ax5grid-panel=\"left-body\"]'),\n                            \"left-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"left-body\"]'),\n                            \"body\": this.$target.find('[data-ax5grid-panel=\"body\"]'),\n                            \"body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"body\"]'),\n                            \"right-body\": this.$target.find('[data-ax5grid-panel=\"right-body\"]'),\n                            \"right-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"right-body\"]'),\n                            \"bottom-aside-body\": this.$target.find('[data-ax5grid-panel=\"bottom-aside-body\"]'),\n                            \"bottom-left-body\": this.$target.find('[data-ax5grid-panel=\"bottom-left-body\"]'),\n                            \"bottom-body\": this.$target.find('[data-ax5grid-panel=\"bottom-body\"]'),\n                            \"bottom-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"bottom-body\"]'),\n                            \"bottom-right-body\": this.$target.find('[data-ax5grid-panel=\"bottom-right-body\"]')\n                        },\n                        \"livePanelKeys\": [], // 현재 사용중인 패널들 (grid-body repaint에서 수집하여 처리)\n                        \"scroller\": {\n                            \"vertical\": this.$target.find('[data-ax5grid-scroller=\"vertical\"]'),\n                            \"vertical-bar\": this.$target.find('[data-ax5grid-scroller=\"vertical-bar\"]'),\n                            \"horizontal\": this.$target.find('[data-ax5grid-scroller=\"horizontal\"]'),\n                            \"horizontal-bar\": this.$target.find('[data-ax5grid-scroller=\"horizontal-bar\"]'),\n                            \"corner\": this.$target.find('[data-ax5grid-scroller=\"corner\"]')\n                        },\n                        \"page\": {\n                            \"navigation\": this.$target.find('[data-ax5grid-page=\"navigation\"]'),\n                            \"status\": this.$target.find('[data-ax5grid-page=\"status\"]')\n                        },\n                        \"form\": {\n                            \"clipboard\": this.$target.find('[data-ax5grid-form=\"clipboard\"]')\n                        },\n                        \"resizer\": {\n                            \"vertical\": this.$target.find('[data-ax5grid-resizer=\"vertical\"]'),\n                            \"horizontal\": this.$target.find('[data-ax5grid-resizer=\"horizontal\"]')\n                        }\n                    };\n\n                    this.$[\"container\"][\"root\"].css({height: this.config.height});\n\n                    return this;\n                },\n                initColumns = function (_columns) {\n                    this.columns = U.deepCopy(_columns);\n                    this.headerTable = GRID.util.makeHeaderTable.call(this, this.columns);\n                    this.xvar.frozenColumnIndex = (cfg.frozenColumnIndex > this.columns.length) ? this.columns.length : cfg.frozenColumnIndex;\n\n                    this.bodyRowTable = GRID.util.makeBodyRowTable.call(this, this.columns);\n                    this.bodyRowMap = GRID.util.makeBodyRowMap.call(this, this.bodyRowTable);\n                    // 바디에 표현될 한줄의 높이를 계산합니다.\n                    this.xvar.bodyTrHeight = this.bodyRowTable.rows.length * this.config.body.columnHeight;\n\n                    var colGroupMap = {};\n                    for (var r = 0, rl = this.headerTable.rows.length; r < rl; r++) {\n                        var row = this.headerTable.rows[r];\n                        for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                            colGroupMap[row.cols[c].colIndex] = jQuery.extend({}, row.cols[c]);\n                        }\n                    }\n\n                    this.colGroup = [];\n                    for (var k in colGroupMap) {\n                        this.colGroup.push(colGroupMap[k]);\n                    }\n\n                    return this;\n                },\n                onResetColumns = function () {\n                    initColumns.call(this, this.config.columns);\n                    resetColGroupWidth.call(this);\n                    if (this.config.footSum) {\n                        initFootSum.call(this, this.config.footSum);\n                        this.needToPaintSum = true;\n                    }\n                    if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n                    alignGrid.call(this, true);\n                    GRID.header.repaint.call(this, true);\n                    GRID.body.repaint.call(this, true);\n                    GRID.scroller.resize.call(this);\n                },\n                resetColGroupWidth = function () {\n                    /// !! 그리드 target의 크기가 변경되면 이 함수를 호출하려 this.colGroup의 _width 값을 재 계산 하여야 함. [tom]\n                    var CT_WIDTH = this.$[\"container\"][\"root\"].width() - (function () {\n                            var width = 0;\n                            if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                            if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                            return width;\n                        })();\n                    var totalWidth = 0;\n                    var computedWidth;\n                    var autoWidthColgroupIndexs = [];\n                    var colGroup = this.colGroup;\n                    var i, l;\n\n                    for (i = 0, l = colGroup.length; i < l; i++) {\n                        if (U.isNumber(colGroup[i].width)) {\n                            totalWidth += colGroup[i]._width = colGroup[i].width;\n                        } else if (colGroup[i].width === \"*\") {\n                            autoWidthColgroupIndexs.push(i);\n                        } else if (U.right(colGroup[i].width, 1) === \"%\") {\n                            totalWidth += colGroup[i]._width = CT_WIDTH * U.left(colGroup[i].width, \"%\") / 100;\n                        }\n                    }\n                    if (autoWidthColgroupIndexs.length > 0) {\n                        computedWidth = (CT_WIDTH - totalWidth) / autoWidthColgroupIndexs.length;\n                        for (i = 0, l = autoWidthColgroupIndexs.length; i < l; i++) {\n                            colGroup[autoWidthColgroupIndexs[i]]._width = computedWidth;\n                        }\n                    }\n                },\n                initFootSum = function (_footSum) {\n                    if (U.isArray(_footSum)) {\n                        this.footSumTable = GRID.util.makeFootSumTable.call(this, this.footSumColumns = _footSum);\n                    } else {\n                        this.footSumColumns = [];\n                        this.footSumTable = {};\n                    }\n                },\n                initBodyGroup = function (_grouping) {\n                    var grouping = jQuery.extend({}, _grouping);\n                    if (\"by\" in grouping && \"columns\" in grouping) {\n\n                        this.bodyGrouping = {\n                            by: grouping.by,\n                            columns: grouping.columns\n                        };\n                        this.bodyGroupingTable = GRID.util.makeBodyGroupingTable.call(this, this.bodyGrouping.columns);\n                        this.sortInfo = (function () {\n                            var sortInfo = {};\n                            for (var k = 0, kl = this.bodyGrouping.by.length; k < kl; k++) {\n                                sortInfo[this.bodyGrouping.by[k]] = {\n                                    orderBy: \"asc\",\n                                    seq: k,\n                                    fixed: true\n                                };\n                                for (var c = 0, cl = this.colGroup.length; c < cl; c++) {\n                                    if (this.colGroup[c].key === this.bodyGrouping.by[k]) {\n                                        this.colGroup[c].sort = \"asc\";\n                                        this.colGroup[c].sortFixed = true;\n                                    }\n                                }\n                            }\n                            return sortInfo;\n                        }).call(this);\n                    } else {\n                        cfg.body.grouping = false;\n                    }\n                },\n                alignGrid = function (_isFirst) {\n                    // isFirst : 그리드 정렬 메소드가 처음 호출 되었는지 판단 하는 아규먼트\n                    var CT_WIDTH = this.$[\"container\"][\"root\"].width();\n                    var CT_HEIGHT = this.$[\"container\"][\"root\"].height();\n                    var CT_INNER_WIDTH = CT_WIDTH;\n                    var CT_INNER_HEIGHT = CT_HEIGHT;\n\n                    var asidePanelWidth = cfg.asidePanelWidth = (function () {\n                        var width = 0;\n\n                        if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                        if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                        return width;\n                    })();\n\n                    var frozenPanelWidth = cfg.frozenPanelWidth = (function (colGroup, endIndex) {\n                        var width = 0;\n                        for (var i = 0, l = endIndex; i < l; i++) {\n                            width += colGroup[i]._width;\n                        }\n                        return width;\n                    })(this.colGroup, cfg.frozenColumnIndex);\n\n                    var rightPanelWidth = 0; // todo : 우측 함계컬럼 넘비 계산\n\n                    var frozenRowHeight = (function (bodyTrHeight) {\n                        return cfg.frozenRowIndex * bodyTrHeight;\n                    })(this.xvar.bodyTrHeight);\n\n                    var footSumHeight = (function (bodyTrHeight) {\n                        return this.footSumColumns.length * bodyTrHeight;\n                    }).call(this, this.xvar.bodyTrHeight);\n\n                    var headerHeight = this.headerTable.rows.length * cfg.header.columnHeight;\n                    var pageHeight = (cfg.page.display) ? cfg.page.height : 0;\n\n                    // 데이터의 길이가 body보다 높을때. 수직 스크롤러 활성화\n                    var verticalScrollerWidth, horizontalScrollerHeight;\n\n                    (function () {\n                        verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n                        // 남은 너비가 colGroup의 너비보다 넓을때. 수평 스크롤 활성화.\n                        horizontalScrollerHeight = (function () {\n                            var totalColGroupWidth = 0;\n                            // aside 빼고 너비\n                            // 수직 스크롤이 있으면 또 빼고 비교\n                            var bodyWidth = CT_WIDTH - asidePanelWidth - verticalScrollerWidth;\n                            for (var i = 0, l = this.colGroup.length; i < l; i++) {\n                                totalColGroupWidth += this.colGroup[i]._width;\n                            }\n                            return (totalColGroupWidth > bodyWidth) ? this.config.scroller.size : 0;\n                        }).call(this);\n\n                        if (horizontalScrollerHeight > 0) {\n                            verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight - horizontalScrollerHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n                        }\n                    }).call(this);\n\n                    // 수평 너비 결정\n                    CT_INNER_WIDTH = CT_WIDTH - verticalScrollerWidth;\n                    // 수직 스크롤러의 높이 결정.\n                    CT_INNER_HEIGHT = CT_HEIGHT - pageHeight - horizontalScrollerHeight;\n\n                    var bodyHeight = CT_INNER_HEIGHT - headerHeight;\n\n                    var panelDisplayProcess = function (panel, vPosition, hPosition, containerType) {\n                        var css = {};\n                        var isHide = false;\n\n                        switch (hPosition) {\n                            case \"aside\":\n                                if (asidePanelWidth === 0) {\n                                    isHide = true;\n                                } else {\n                                    css[\"left\"] = 0;\n                                    css[\"width\"] = asidePanelWidth;\n                                }\n                                break;\n                            case \"left\":\n                                if (cfg.frozenColumnIndex === 0) {\n                                    isHide = true;\n                                } else {\n                                    css[\"left\"] = asidePanelWidth;\n                                    css[\"width\"] = frozenPanelWidth;\n                                }\n                                break;\n                            case \"right\":\n                                if (!cfg.rightSum) {\n                                    isHide = true;\n                                } else {\n\n                                }\n                                break;\n                            default:\n                                if (containerType !== \"page\") {\n                                    if (cfg.frozenColumnIndex === 0) {\n                                        css[\"left\"] = asidePanelWidth;\n                                    } else {\n                                        css[\"left\"] = frozenPanelWidth + asidePanelWidth;\n                                    }\n                                    css[\"width\"] = CT_INNER_WIDTH - asidePanelWidth - frozenPanelWidth - rightPanelWidth;\n                                }\n                                break;\n                        }\n\n                        if (isHide) {\n                            panel.hide();\n                            // 프로세스 중지\n                            return this;\n                        }\n\n                        if (containerType === \"body\") {\n                            switch (vPosition) {\n                                case \"top\":\n                                    if (cfg.frozenRowIndex == 0) {\n                                        isHide = true;\n                                    } else {\n                                        css[\"top\"] = 0;\n                                        css[\"height\"] = frozenRowHeight;\n                                    }\n                                    break;\n                                case \"bottom\":\n                                    if (!cfg.footSum) {\n                                        isHide = true;\n                                    } else {\n                                        css[\"top\"] = bodyHeight - footSumHeight;\n                                        css[\"height\"] = footSumHeight; // footSum height\n                                    }\n                                    break;\n                                default:\n\n                                    css[\"top\"] = frozenRowHeight;\n                                    css[\"height\"] = bodyHeight - frozenRowHeight - footSumHeight;\n\n                                    break;\n                            }\n                        } else if (containerType === \"header\") {\n                            css[\"height\"] = headerHeight;\n                        } else if (containerType === \"page\") {\n                            if (pageHeight == 0) {\n                                isHide = true;\n                            } else {\n                                css[\"height\"] = pageHeight;\n                            }\n                        }\n\n                        if (isHide) {\n                            panel.hide();\n                            // 프로세스 중지\n                            return this;\n                        }\n\n                        panel.css(css);\n                        return this;\n                    };\n                    var scrollerDisplayProcess = function (panel, scrollerWidth, scrollerHeight, containerType) {\n                        var css = {};\n                        var isHide = false;\n\n                        switch (containerType) {\n                            case \"vertical\":\n                                if (scrollerWidth > 0) {\n                                    css[\"width\"] = scrollerWidth;\n                                    css[\"height\"] = CT_INNER_HEIGHT;\n                                    css[\"bottom\"] = scrollerHeight + pageHeight;\n                                } else {\n                                    isHide = true;\n                                }\n                                break;\n                            case \"horizontal\":\n                                if (scrollerHeight > 0) {\n                                    css[\"width\"] = CT_INNER_WIDTH;\n                                    css[\"height\"] = scrollerHeight;\n                                    css[\"right\"] = scrollerWidth;\n                                    css[\"bottom\"] = pageHeight;\n                                } else {\n                                    isHide = true;\n                                }\n                                break;\n                            case \"corner\":\n                                if (scrollerWidth > 0 && scrollerHeight > 0) {\n                                    css[\"width\"] = scrollerWidth;\n                                    css[\"height\"] = scrollerHeight;\n                                    css[\"bottom\"] = pageHeight;\n                                } else {\n                                    isHide = true;\n                                }\n                                break;\n                        }\n\n                        if (isHide) {\n                            panel.hide();\n                            // 프로세스 중지\n                            return this;\n                        }\n\n                        panel.show().css(css);\n                    };\n\n                    this.$[\"container\"][\"header\"].css({height: headerHeight});\n                    this.$[\"container\"][\"body\"].css({height: bodyHeight});\n\n                    // 각 패널들의 크기 표시여부를 결정합니다\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-header\"], \"\", \"aside\", \"header\");\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"left-header\"], \"\", \"left\", \"header\");\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"header\"], \"\", \"\", \"header\");\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"right-header\"], \"\", \"right\", \"header\");\n\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"top-aside-body\"], \"top\", \"aside\", \"body\");\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"top-left-body\"], \"top\", \"left\", \"body\");\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"top-body\"], \"top\", \"\", \"body\");\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"top-right-body\"], \"top\", \"right\", \"body\");\n\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-body\"], \"\", \"aside\", \"body\");\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"left-body\"], \"\", \"left\", \"body\");\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"body\"], \"\", \"\", \"body\");\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"right-body\"], \"\", \"right\", \"body\");\n\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-aside-body\"], \"bottom\", \"aside\", \"body\");\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-left-body\"], \"bottom\", \"left\", \"body\");\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-body\"], \"bottom\", \"\", \"body\");\n                    panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-right-body\"], \"bottom\", \"right\", \"body\");\n\n\n                    scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"vertical\"], verticalScrollerWidth, horizontalScrollerHeight, \"vertical\");\n                    scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"horizontal\"], verticalScrollerWidth, horizontalScrollerHeight, \"horizontal\");\n                    scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"corner\"], verticalScrollerWidth, horizontalScrollerHeight, \"corner\");\n\n                    panelDisplayProcess.call(this, this.$[\"container\"][\"page\"], \"\", \"\", \"page\");\n                },\n                sortColumns = function (_sortInfo) {\n                    GRID.header.repaint.call(this);\n\n                    if (U.isFunction(this.config.remoteSort)) {\n                        var that = {sortInfo: []};\n                        for (var k in _sortInfo) {\n                            that.sortInfo.push({\n                                key: k,\n                                orderBy: _sortInfo[k].orderBy,\n                                seq: _sortInfo[k].seq\n                            });\n                        }\n                        that.sortInfo.sort(function (a, b) {\n                            return a.seq > b.seq;\n                        });\n                        this.config.remoteSort.call(that, that);\n                    } else {\n                        if (this.config.body.grouping) {\n                            this.list = GRID.data.initData.call(this,\n                                GRID.data.sort.call(this,\n                                    _sortInfo,\n                                    GRID.data.clearGroupingData.call(this,\n                                        this.list\n                                    )\n                                )\n                            );\n                        }\n                        else {\n                            this.list = GRID.data.sort.call(this, _sortInfo,\n                                GRID.data.clearGroupingData.call(this,\n                                    this.list\n                                )\n                            );\n                        }\n                        GRID.body.repaint.call(this, true);\n                        GRID.scroller.resize.call(this);\n                    }\n                };\n\n            /// private end\n\n            /**\n             * Preferences of grid UI\n             * @method ax5grid.setConfig\n             * @param {Object} _config - 클래스 속성값\n             * @param {Element} _config.target\n             * @param {Number} [_config.frozenColumnIndex=0]\n             * @param {Number} [_config.frozenRowIndex=0]\n             * @param {Boolean} [_config.showLineNumber=false]\n             * @param {Boolean} [_config.showRowSelector=false]\n             * @param {Boolean} [_config.multipleSelect=true]\n             * @param {Number} [_config.columnMinWidth=100]\n             * @param {Number} [_config.lineNumberColumnWidth=30]\n             * @param {Number} [_config.rowSelectorColumnWidth=25]\n             * @param {Boolean} [_config.sortable=false]\n             * @param {Boolean} [_config.multiSort=false]\n             * @param {Function} [_config.remoteSort=false]\n             * @param {Object} [_config.header]\n             * @param {String} [_config.header.align]\n             * @param {Number} [_config.header.columnHeight=25]\n             * @param {Number} [_config.header.columnPadding=3]\n             * @param {Number} [_config.header.columnBorderWidth=1]\n             * @param {Object} [_config.body]\n             * @param {String} [_config.body.align]\n             * @param {Number} [_config.body.columnHeight=25]\n             * @param {Number} [_config.body.columnPadding=3]\n             * @param {Number} [_config.body.columnBorderWidth=1]\n             * @param {Object} [_config.body.grouping]\n             * @param {Array} [_config.body.grouping.by] - list grouping keys\n             * @param {Array} [_config.body.grouping.columns] - list grouping columns\n             * @param {Object} [_config.page]\n             * @param {Number} [_config.page.height=25]\n             * @param {Boolean} [_config.page.display=true]\n             * @param {Number} [_config.page.navigationItemCount=5]\n             * @param {Object} [_config.scroller]\n             * @param {Number} [_config.scroller.size=15]\n             * @param {Number} [_config.scroller.barMinSize=15]\n             * @param {Number} [_config.scroller.trackPadding=4]\n             * @param {Object} [_config.columnKeys]\n             * @param {String} [_config.columnKeys.selected=\"_SELECTED\"]\n             * @param {Object[]} _config.columns\n             * @param {String} _config.columns[].key\n             * @param {String} _config.columns[].label\n             * @param {Number} _config.columns[].width\n             * @param {(String|Function)} _config.columns[].styleClass\n             * @param {Boolean} _config.columns[].enableFilter\n             * @param {Boolean} _config.columns[].sortable\n             * @param {String} _config.columns[].align\n             * @param {(String|Function)} _config.columns[].formatter\n             * @param {Object} _config.columns[].editor\n             * @param {String} _config.columns[].editor.type - text,number,money,date\n             * @param {Object} _config.columns[].editor.config\n             * @param {Array} _config.columns[].editor.updateWith\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * var firstGrid = new ax5.ui.grid();\n             *\n             * ax5.ui.grid.formatter[\"myType\"] = function () {\n             *     return \"myType\" + (this.value || \"\");\n             * };\n             * ax5.ui.grid.formatter[\"capital\"] = function(){\n             *     return (''+this.value).toUpperCase();\n             * };\n             *\n             * ax5.ui.grid.collector[\"myType\"] = function () {\n             *     return \"myType\" + (this.value || \"\");\n             * };\n             *\n             * var sampleData = [\n             *     {a: \"A\", b: \"A01\", price: 1000, amount: 12, cost: 12000, saleDt: \"2016-08-29\", customer: \"장기영\", saleType: \"A\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1100, amount: 11, cost: 12100, saleDt: \"2016-08-28\", customer: \"장서우\", saleType: \"B\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"C01\", price: 1200, amount: 10, cost: 12000, saleDt: \"2016-08-27\", customer: \"이영희\", saleType: \"A\"},\n             *     {companyJson: {\"대표자명\":\"위세라\"}, a: \"A\", b: \"A01\", price: 1300, amount: 8, cost: 10400, saleDt: \"2016-08-25\", customer: \"황인서\", saleType: \"C\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1400, amount: 5, cost: 7000, saleDt: \"2016-08-29\", customer: \"황세진\", saleType: \"D\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"A01\", price: 1500, amount: 2, cost: 3000, saleDt: \"2016-08-26\", customer: \"이서연\", saleType: \"A\"}\n             * ];\n             *\n             * var gridView = {\n             *     initView: function () {\n             *         firstGrid.setConfig({\n             *             target: $('[data-ax5grid=\"first-grid\"]'),\n             *             columns: [\n             *                 {\n             *                     key: \"companyJson['대표자명']\",\n             *                     label: \"필드A\",\n             *                     width: 80,\n             *                     styleClass: function () {\n             *                         return \"ABC\";\n             *                     },\n             *                     enableFilter: true,\n             *                     align: \"center\",\n             *                     editor: {type:\"text\"}\n             *                 },\n             *                 {key: \"b\", label: \"필드B\", align: \"center\"},\n             *                 {\n             *                     key: undefined, label: \"필드C\", columns: [\n             *                         {key: \"price\", label: \"단가\", formatter: \"money\", align: \"right\"},\n             *                         {key: \"amount\", label: \"수량\", formatter: \"money\", align: \"right\"},\n             *                         {key: \"cost\", label: \"금액\", align: \"right\", formatter: \"money\"}\n             *                     ]\n             *                 },\n             *                 {key: \"saleDt\", label: \"판매일자\", align: \"center\"},\n             *                 {key: \"customer\", label: \"고객명\"},\n             *                 {key: \"saleType\", label: \"판매타입\"}\n             *             ]\n             *         });\n             *         return this;\n             *     },\n             *     setData: function (_pageNo) {\n             *\n             *         firstGrid.setData(sampleData);\n             *\n             *         return this;\n             *     }\n             * };\n             * ```\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5grid\", \"401\", \"init\"));\n                    return this;\n                }\n\n                // 그리드의 이벤트 정의 구간\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.body.onDataChanged;\n                // todo event에 대한 추가 정의 필요\n\n                this.$target = jQuery(cfg.target);\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5grid-config\"), true));\n\n                var grid = this.config = cfg;\n\n                if (!this.config.height) {\n                    this.config.height = this.$target.height();\n                }\n\n                if (!this.id) this.id = this.$target.data(\"data-ax5grid-id\");\n                if (!this.id) {\n                    //this.id = 'ax5grid-' + ax5.getGuid();\n                    this.id = 'ax5grid-' + this.instanceId;\n                    this.$target.data(\"data-ax5grid-id\", grid.id);\n                }\n\n                ///========\n                // 그리드를 그리기 위한 가장 기초적인 작업 뼈대와 틀을 준비합니다. 이 메소드는 초기화 시 한번만 호출 되게 됩니다.\n                initGrid.call(this);\n\n                // columns데이터를 분석하여 미리 처리해야하는 데이터를 정리합니다.\n                initColumns.call(this, grid.columns);\n                resetColGroupWidth.call(this);\n\n                // footSum 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.footSum) initFootSum.call(this, grid.footSum);\n\n                // bodyGrouping 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.body.grouping) initBodyGroup.call(this, grid.body.grouping);\n\n                // 그리드의 각 요소의 크기를 맞춤니다.\n                alignGrid.call(this, true);\n\n                // columns의 데이터로 header데이터를 만들고\n                GRID.header.init.call(this);\n                // header를 출력합니다.\n                GRID.header.repaint.call(this);\n\n                // columns의 데이터로 body데이터를 만들고\n                GRID.body.init.call(this);\n                // body를 출력합니다.\n                GRID.body.repaint.call(this);\n\n                // scroller\n                GRID.scroller.init.call(this);\n                GRID.scroller.resize.call(this);\n\n                jQuery(window).bind(\"resize.ax5grid-\" + this.id, function () {\n                    alignGrid.call(this);\n                    GRID.scroller.resize.call(this);\n                }.bind(this));\n\n                jQuery(document.body).on(\"click.ax5grid-\" + this.id, (function (e) {\n                    var isPickerClick = false;\n                    var target = U.findParentNode(e.target, function (_target) {\n                        if (isPickerClick = _target.getAttribute(\"data-ax5grid-inline-edit-picker\")) {\n                            return true;\n                        }\n                        return _target.getAttribute(\"data-ax5grid-container\") === \"root\";\n                    });\n\n                    if (target && target.getAttribute(\"data-ax5grid-instance\") === this.id) {\n                        self.focused = true;\n                    } else {\n                        self.focused = false;\n                        GRID.body.blur.call(this);\n                    }\n                }).bind(this));\n\n                var ctrlKeys = {\n                    \"33\": \"KEY_PAGEUP\",\n                    \"34\": \"KEY_PAGEDOWN\",\n                    \"35\": \"KEY_END\",\n                    \"36\": \"KEY_HOME\",\n                    \"37\": \"KEY_LEFT\",\n                    \"38\": \"KEY_UP\",\n                    \"39\": \"KEY_RIGHT\",\n                    \"40\": \"KEY_DOWN\"\n                };\n                jQuery(window).on(\"keydown.ax5grid-\" + this.instanceId, function (e) {\n                    if (self.focused) {\n                        if (self.isInlineEditing) {\n\n                            if (e.which == ax5.info.eventKeys.ESC) {\n                                self.keyDown(\"ESC\", e.originalEvent);\n                            }\n                            else if (e.which == ax5.info.eventKeys.RETURN) {\n                                self.keyDown(\"RETURN\", e.originalEvent);\n                            }\n                            else if (e.which == ax5.info.eventKeys.TAB) {\n                                self.keyDown(\"TAB\", e.originalEvent);\n                                U.stopEvent(e);\n                            }\n                            else if (e.which == ax5.info.eventKeys.UP) {\n                                self.keyDown(\"RETURN\", {shiftKey: true});\n                            }\n                            else if (e.which == ax5.info.eventKeys.DOWN) {\n                                self.keyDown(\"RETURN\", {});\n                            }\n\n                        }\n                        else {\n\n                            if (e.metaKey || e.ctrlKey) {\n                                if (e.which == 67) { // c\n                                    self.copySelect();\n                                }\n                            } else {\n                                if (ctrlKeys[e.which]) {\n                                    self.keyDown(ctrlKeys[e.which], e.originalEvent);\n                                    U.stopEvent(e);\n                                } else if (e.which == ax5.info.eventKeys.ESC) {\n                                    if (self.focused) {\n                                        GRID.body.blur.call(self);\n                                    }\n                                } else if (e.which == ax5.info.eventKeys.RETURN) {\n                                    self.keyDown(\"RETURN\", e.originalEvent);\n                                } else if (e.which == ax5.info.eventKeys.TAB) {\n                                    //self.keyDown(\"RETURN\", e.originalEvent);\n                                    U.stopEvent(e);\n                                } else if (e.which != ax5.info.eventKeys.SPACE && Object.keys(self.focusedColumn).length) {\n                                    self.keyDown(\"INLINE_EDIT\", e.originalEvent);\n                                }\n                            }\n\n                        }\n                    }\n                });\n\n                // 그리드 레이아웃이 모든 준비를 마친시점에 onLoad존재 여부를 확인하고 호출하여 줍니다.\n                setTimeout((function () {\n                    if (this.onLoad) {\n                        this.onLoad.call({\n                            self: this\n                        })\n                    }\n                }).bind(this));\n                return this;\n            };\n\n            /**\n             * align grid size\n             * @method ax5grid.align\n             * @returns {ax5grid}\n             */\n            this.align = function () {\n                alignGrid.call(this);\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.keyDown\n             * @param {String} _keyName\n             * @param {Event|Object} _data\n             * @return {ax5grid}\n             */\n            this.keyDown = (function () {\n                var processor = {\n                    \"KEY_UP\": function () {\n                        GRID.body.moveFocus.call(this, \"UP\");\n                    },\n                    \"KEY_DOWN\": function () {\n                        GRID.body.moveFocus.call(this, \"DOWN\");\n                    },\n                    \"KEY_LEFT\": function () {\n                        GRID.body.moveFocus.call(this, \"LEFT\");\n                    },\n                    \"KEY_RIGHT\": function () {\n                        GRID.body.moveFocus.call(this, \"RIGHT\");\n                    },\n                    \"KEY_HOME\": function () {\n                        GRID.body.moveFocus.call(this, \"HOME\");\n                    },\n                    \"KEY_END\": function () {\n                        GRID.body.moveFocus.call(this, \"END\");\n                    },\n                    \"INLINE_EDIT\": function (_e) {\n                        GRID.body.inlineEdit.active.call(this, this.focusedColumn, _e);\n                        if (!/[0-9a-zA-Z]/.test(_e.key)) {\n                            U.stopEvent(_e);\n                        }\n                    },\n                    \"ESC\": function (_e) {\n                        GRID.body.inlineEdit.keydown.call(this, \"ESC\");\n                    },\n                    \"RETURN\": function (_e) {\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey);\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, (_e.shiftKey) ? \"UP\" : \"DOWN\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                                }\n                            }\n                        }\n                        if (activeEditLength == 0) {\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                        }\n                    },\n                    \"TAB\": function (_e) {\n\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey, {moveFocus: true});\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, (_e.shiftKey) ? \"LEFT\" : \"RIGHT\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\", undefined, {moveFocus: true});\n                                }\n                            }\n                        }\n                    }\n                };\n                return function (_act, _data) {\n                    if (_act in processor) processor[_act].call(this, _data);\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.copySelect\n             * @returns {Boolean} copysuccess\n             */\n            this.copySelect = function () {\n                var copysuccess;\n                var $clipBoard = this.$[\"form\"][\"clipboard\"];\n                var copyTextArray = [];\n                var copyText = \"\";\n\n                var _rowIndex, _colIndex, _dindex;\n                var _di = 0;\n                for (var c in this.selectedColumn) {\n                    var _column = this.selectedColumn[c];\n\n                    if (_column) {\n                        if (typeof _dindex === \"undefined\") {\n                            _dindex = _column.dindex;\n                            _rowIndex = _column.rowIndex;\n                            _colIndex = _column.rowIndex;\n                        }\n\n                        if (_dindex != _column.dindex || _rowIndex != _column.rowIndex) {\n                            _di++;\n                        }\n\n                        if (!copyTextArray[_di]) {\n                            copyTextArray[_di] = [];\n                        }\n                        var originalColumn = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                        if (originalColumn) {\n                            if (this.list[_column.dindex].__isGrouping) {\n                                copyTextArray[_di].push(this.list[_column.dindex][_column.colIndex]);\n                            } else {\n                                copyTextArray[_di].push(this.list[_column.dindex][originalColumn.key]);\n                            }\n                        } else {\n                            copyTextArray[_di].push(\"\");\n                        }\n\n                        _dindex = _column.dindex;\n                        _rowIndex = _column.rowIndex;\n                    }\n                }\n\n                copyTextArray.forEach(function (r) {\n                    copyText += r.join('\\t') + \"\\n\";\n                });\n\n                $clipBoard.get(0).innerText = copyText;\n                $clipBoard.select();\n\n                try {\n                    copysuccess = document.execCommand(\"copy\");\n                } catch (e) {\n                    copysuccess = false;\n                }\n                return copysuccess;\n            };\n\n            /**\n             * @method ax5grid.setData\n             * @param {Array} _data\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setData({\n             *  list: [],\n             *  page: {\n             *      currentPage: 0,\n             *      pageSize: 50,\n             *      totalElements: 500,\n             *      totalPages: 100\n             *  }\n             * });\n             *\n             * // onlyList\n             * ax5Grid.setData([]);\n             * ```\n             */\n            this.setData = function (_data) {\n                GRID.data.set.call(this, _data);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this);\n                GRID.scroller.resize.call(this);\n                GRID.page.navigationUpdate.call(this);\n                GRID.body.scrollTo.call(this, {top: 0});\n                return this;\n            };\n\n            /**\n             * @method ax5grid.getList\n             * @param {String} _type\n             * @returns {Array}\n             * @example\n             * ```js\n             * ax5Grid.getList();\n             * ax5Grid.getList(\"modified\");\n             * ax5Grid.getList(\"deleted\");\n             * ```\n             */\n            this.getList = function (_type) {\n                return GRID.data.getList.call(this, _type);\n            };\n\n            /**\n             * @method ax5grid.setHeight\n             * @param {Number} _height\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setHeight(height);\n             * ```\n             */\n            this.setHeight = function (_height) {\n                //console.log(this.$target);\n                if (_height == \"100%\") {\n                    _height = this.$target.offsetParent().innerHeight();\n                }\n                this.$target.css({height: _height});\n                this.$[\"container\"][\"root\"].css({height: _height});\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.addRow\n             * @param {Object} _row\n             * @param {Number|String} [_dindex=last]\n             * @param {Object} [_options] - options of addRow\n             * @param {Boolean} [_options.sort] - sortData\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.addRow($.extend({}, {...}), \"first\");\n             * ```\n             */\n            this.addRow = function (_row, _dindex, _options) {\n                GRID.data.add.call(this, _row, _dindex, _options);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.removeRow\n             * @param {Number|String} [_dindex=last]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.removeRow();\n             * ax5Grid.removeRow(\"first\");\n             * ax5Grid.removeRow(\"last\");\n             * ax5Grid.removeRow(1);\n             * ```\n             */\n            this.removeRow = function (_dindex) {\n                GRID.data.remove.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.updateRow\n             * @param {Object} _row\n             * @param {Number} _dindex\n             * @returns {ax5grid}\n             */\n            this.updateRow = function (_row, _dindex) {\n                GRID.data.update.call(this, _row, _dindex);\n                GRID.body.repaintRow.call(this, _dindex);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.deleteRow\n             * @param {Number|String} _dindex\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.deleteRow(\"first\");\n             * ax5Grid.deleteRow(\"last\");\n             * ax5Grid.deleteRow(1);\n             * ax5Grid.deleteRow(\"selected\");\n             * ```\n             */\n            this.deleteRow = function (_dindex) {\n                GRID.data.deleteRow.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                // 삭제시엔 포커스 ?\n                // GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.addColumn\n             * @param {Object} _column\n             * @param {Number|String} [_cindex=last]\n             * @returns {ax5grid}\n             */\n            this.addColumn = (function () {\n                var processor = {\n                    \"first\": function (_column) {\n                        this.config.columns = [].concat(_column).concat(this.config.columns);\n                    },\n                    \"last\": function (_column) {\n                        this.config.columns = this.config.columns.concat([].concat(_column));\n                    }\n                };\n\n                return function (_column, _cindex) {\n                    if (typeof _column === \"undefined\") throw '_column must not be null';\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _column);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        this.config.columns.splice(_cindex, [].concat(_column))\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.removeCloumn\n             * @param {Number|String} [_cindex=last]\n             * @returns {ax5grid}\n             */\n            this.removeColumn = (function () {\n                var processor = {\n                    \"first\": function (_cindex) {\n                        this.config.columns.splice(_cindex, 1);\n                    },\n                    \"last\": function () {\n                        this.config.columns.splice(this.config.columns.length - 1, 1);\n                    }\n                };\n                return function (_cindex) {\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _cindex);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        //\n                        this.config.columns.splice(_cindex, 1);\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.updateColumn\n             * @param {Object} _column\n             * @param {Number} _cindex\n             * @returns {ax5grid}\n             */\n            this.updateColumn = function (_column, _cindex) {\n                if (!U.isNumber(_cindex)) {\n                    throw 'invalid argument _cindex';\n                }\n                //\n                this.config.columns.splice(_cindex, 1, _column);\n                onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                return this;\n            };\n\n            /**\n             * @method ax5grid.setColumnWidth\n             * @param {Number} _width\n             * @param {Number} _cindex\n             * @returns {ax5grid}\n             */\n            this.setColumnWidth = function (_width, _cindex) {\n                this.colGroup[this.xvar.columnResizerIndex]._width = _width;\n                this.needToPaintSum = true;\n\n                // 컬럼너비 변경사항 적용.\n                GRID.header.repaint.call(this);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n\n                alignGrid.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.getColumnSortInfo\n             * @returns {Object} sortInfo\n             */\n            this.getColumnSortInfo = function () {\n                var that = {sortInfo: []};\n                for (var k in this.sortInfo) {\n                    that.sortInfo.push({\n                        key: k,\n                        orderBy: this.sortInfo[k].orderBy,\n                        seq: this.sortInfo[k].seq\n                    });\n                }\n                that.sortInfo.sort(function (a, b) {\n                    return a.seq > b.seq;\n                })\n                return that.sortInfo;\n            };\n\n            /**\n             * @method ax5grid.setColumnSort\n             * @param {Object} _sortInfo\n             * @param {Object} _sortInfo.key\n             * @param {Number} _sortInfo.key.seq - seq of sortOrder\n             * @param {String} _sortInfo.key.orderBy - \"desc\"|\"asc\"\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5grid.setColumnSort({a:{seq:0, orderBy:\"desc\"}, b:{seq:1, orderBy:\"asc\"}});\n             * ```\n             */\n            this.setColumnSort = function (_sortInfo) {\n                if (typeof _sortInfo !== \"undefined\") {\n                    this.sortInfo = _sortInfo;\n                    GRID.header.applySortStatus.call(this, _sortInfo);\n                }\n\n                sortColumns.call(this, _sortInfo || this.sortInfo);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.select\n             * @param {Number|Object} _selectObject\n             * @param {Number} _selectObject.index - index of row\n             * @param {Number} _selectObject.rowIndex - rowIndex of columns\n             * @param {Number} _selectObject.conIndex - colIndex of columns\n             * @param {Object} _options\n             * @param {Boolean} _options.selectedClear\n             * @param {Boolean} _options.selected\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.select(0);\n             * firstGrid.select(0, {selected: true});\n             * firstGrid.select(0, {selected: false});\n             * ```\n             */\n            this.select = function (_selectObject, _options) {\n                if (U.isNumber(_selectObject)) {\n                    var dindex = _selectObject;\n\n                    if (!this.config.multipleSelect) {\n                        this.clearSelect();\n                    } else {\n                        if (_options && _options.selectedClear) {\n                            this.clearSelect();\n                        }\n                    }\n\n                    GRID.data.select.call(this, dindex, _options && _options.selected);\n                    GRID.body.updateRowState.call(this, [\"selected\"], dindex);\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5grid.clearSelect\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.clearSelect();\n             * ```\n             */\n            this.clearSelect = function () {\n                GRID.body.updateRowState.call(this, [\"selectedClear\"]);\n                GRID.data.clearSelect.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.selectAll\n             * @param {Object} _options\n             * @param {Boolean} _options.selected\n             * @param {Function} _options.filter\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.selectAll();\n             * firstGrid.selectAll({selected: true});\n             * firstGrid.selectAll({selected: false});\n             * firstGrid.selectAll({filter: function(){\n             *      return this[\"b\"] == \"A01\";\n             * });\n             * firstGrid.selectAll({selected: true, filter: function(){\n             *      return this[\"b\"] == \"A01\";\n             * });\n             * ```\n             */\n            this.selectAll = function (_options) {\n                GRID.data.selectAll.call(this, _options && _options.selected, _options);\n                GRID.body.updateRowStateAll.call(this, [\"selected\"]);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.exportExcel\n             * @param {String} _fileName\n             * @returns {ax5grid|String}\n             * @example\n             * ```js\n             * firstGrid.exportExcel(\"grid-to-excel.xls\");\n             * console.log(firstGrid.exportExcel());\n             * ```\n             */\n            this.exportExcel = function (_fileName) {\n                var table = [];\n                table.push('<table border=\"1\">');\n                table.push(GRID.header.getExcelString.call(this));\n                table.push(GRID.body.getExcelString.call(this));\n                table.push('</table>');\n\n                if (typeof _fileName === \"undefined\") {\n                    return table.join('');\n                }\n                else {\n                    GRID.excel.export.call(this, [table.join('')], _fileName);\n                }\n\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.grid_instance = UI.grid_instance || [];\n                UI.grid_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n        return ax5grid;\n    })());\n\n    GRID = ax5.ui.grid;\n})();\n\n// todo : excel export\n// todo : merge cells\n// todo : filter\n// todo : body menu\n// todo : column reorder\n// todo : editor 필수값 속성 지정\n\n\n\n","// ax5.ui.grid.body\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var columnSelect = {\n        focusClear: function () {\n            var self = this;\n            for (var c in self.focusedColumn) {\n                var _column = self.focusedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .removeAttr('data-ax5grid-column-focused');\n                }\n            }\n            self.focusedColumn = {};\n        },\n        clear: function () {\n            var self = this;\n            for (var c in self.selectedColumn) {\n                var _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .removeAttr('data-ax5grid-column-selected');\n                }\n            }\n            self.selectedColumn = {};\n        },\n        init: function (column) {\n            var self = this;\n            if (this.isInlineEditing) {\n                for (var editKey in this.inlineEditing) {\n                    if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n                        return this;\n                    }\n                }\n            }\n\n            // focus\n            columnSelect.focusClear.call(self);\n            self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n                panelName: column.panelName,\n                dindex: column.dindex,\n                rowIndex: column.rowIndex,\n                colIndex: column.colIndex,\n                colspan: column.colspan\n            };\n\n            // select\n            columnSelect.clear.call(self);\n            self.xvar.selectedRange = {\n                start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n                end: null\n            };\n            self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\n                if (data) {\n                    return false;\n                } else {\n                    return {\n                        panelName: column.panelName,\n                        dindex: column.dindex,\n                        rowIndex: column.rowIndex,\n                        colIndex: column.colIndex,\n                        colspan: column.colspan\n                    }\n                }\n            })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n            this.$.panel[column.panelName]\n                .find('[data-ax5grid-tr-data-index=\"' + column.dindex + '\"]')\n                .find('[data-ax5grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + column.colIndex + '\"]')\n                .attr('data-ax5grid-column-focused', \"true\")\n                .attr('data-ax5grid-column-selected', \"true\");\n\n            if (this.isInlineEditing) {\n                GRID.body.inlineEdit.deActive.call(this, \"RETURN\");\n            }\n        },\n        update: function (column) {\n            var self = this;\n            var dindex, colIndex, rowIndex, trl;\n\n            self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n            columnSelect.clear.call(self);\n\n            var range = {\n                r: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n                },\n                c: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n                }\n            };\n\n            dindex = range.r.s;\n            for (; dindex <= range.r.e; dindex++) {\n\n\n                trl = this.bodyRowTable.rows.length;\n                rowIndex = 0;\n                for (; rowIndex < trl; rowIndex++) {\n                    colIndex = range.c.s;\n                    for (; colIndex <= range.c.e; colIndex++) {\n                        var _panels = [],\n                            panelName = \"\";\n\n                        if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n                        if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                        _panels.push(\"body\");\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                        panelName = _panels.join(\"-\");\n\n                        self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n                            panelName: panelName,\n                            dindex: dindex,\n                            rowIndex: rowIndex,\n                            colIndex: colIndex,\n                            colspan: column.colspan\n                        };\n\n                        _panels = null;\n                        panelName = null;\n                    }\n                }\n            }\n            dindex = null;\n            colIndex = null;\n            rowIndex = null;\n\n            for (var c in self.selectedColumn) {\n                var _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .attr('data-ax5grid-column-selected', 'true');\n                }\n            }\n\n        }\n    };\n\n    var columnSelector = {\n        \"on\": function (cell) {\n            var self = this;\n\n            if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n                return;\n            }\n\n            columnSelect.init.call(self, cell);\n\n            this.$[\"container\"][\"body\"]\n                .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax5grid-column-attr=\"default\"]', function (e) {\n                    if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                        columnSelect.update.call(self, {\n                            panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                            dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                            rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                            colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                            colspan: Number(this.getAttribute(\"colspan\"))\n                        });\n                        U.stopEvent(e);\n                    }\n                })\n                .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n                    columnSelector.off.call(self);\n                })\n                .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n                    columnSelector.off.call(self);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            this.$[\"container\"][\"body\"]\n                .off(\"mousemove.ax5grid-\" + this.instanceId)\n                .off(\"mouseup.ax5grid-\" + this.instanceId)\n                .off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    var updateRowState = function (_states, _dindex, _data) {\n        var self = this;\n        var cfg = this.config;\n\n        var processor = {\n            \"selected\": function (_dindex) {\n                var i = this.$.livePanelKeys.length;\n                while (i--) {\n                    this.$.panel[this.$.livePanelKeys[i]]\n                        .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                        .attr(\"data-ax5grid-selected\", this.list[_dindex][cfg.columnKeys.selected]);\n                }\n            },\n            \"selectedClear\": function () {\n                var si = this.selectedDataIndexs.length;\n                while (si--) {\n                    var dindex = this.selectedDataIndexs[si];\n                    var i = this.$.livePanelKeys.length;\n                    while (i--) {\n                        this.$.panel[this.$.livePanelKeys[i]]\n                            .find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]')\n                            .attr(\"data-ax5grid-selected\", false);\n                        this.list[dindex][cfg.columnKeys.selected] = false;\n                    }\n                }\n            },\n            \"cellChecked\": function (_dindex, _data) {\n                var key = _data.key;\n                var rowIndex = _data.rowIndex;\n                var colIndex = _data.colIndex;\n\n                var panelName = (function () {\n                    var _panels = [];\n                    if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n                    if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                    _panels.push(\"body\");\n                    if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                    return _panels.join(\"-\");\n                }).call(this);\n\n                this.$.panel[panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                    .find('[data-ax5grid-column-rowIndex=\"' + rowIndex + '\"][data-ax5grid-column-colIndex=\"' + colIndex + '\"]')\n                    .find('[data-ax5grid-editor=\"checkbox\"]')\n                    .attr(\"data-ax5grid-checked\", '' + _data.checked);\n            }\n        };\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _dindex, _data);\n        });\n    };\n\n    var updateRowStateAll = function (_states, _data) {\n        var self = this;\n        var cfg = this.config;\n\n        var processor = {\n            \"selected\": function (_dindex) {\n                GRID.body.repaint.call(this, true);\n            }\n        };\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _data);\n        });\n    };\n\n    var init = function () {\n        var self = this;\n\n        this.$[\"container\"][\"body\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            var panelName, attr, row, col, dindex, rowIndex, colIndex, disableSelection;\n            var targetClick = {\n                \"default\": function (_column) {\n                    var column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                    var that = {\n                        self: self,\n                        page: self.page,\n                        list: self.list,\n                        item: self.list[_column.dindex],\n                        dindex: _column.dindex,\n                        rowIndex: _column.rowIndex,\n                        colIndex: _column.colIndex,\n                        column: column,\n                        value: self.list[_column.dindex][column.key]\n                    };\n\n                    if (column.editor && column.editor.type == \"checkbox\") { // todo : GRID.inlineEditor에서 처리 할수 있도록 구문 변경 필요.\n                        var value = GRID.data.getValue.call(self, _column.dindex, column.key);\n\n                        var checked, newValue;\n                        if (column.editor.config && column.editor.config.trueValue) {\n                            if (checked = !(value == column.editor.config.trueValue)) {\n                                newValue = column.editor.config.trueValue;\n                            } else {\n                                newValue = column.editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                        }\n\n                        GRID.data.setValue.call(self, _column.dindex, column.key, newValue);\n\n                        updateRowState.call(self, [\"cellChecked\"], _column.dindex, {\n                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                            editorConfig: column.editor.config, checked: checked\n                        });\n                    } else {\n                        if (self.config.body.onClick) {\n                            self.config.body.onClick.call(that);\n                        }\n                    }\n                },\n                \"rowSelector\": function (_column) {\n                    if (self.list[_column.dindex][self.config.columnKeys.disableSelection]) {\n                        return false;\n                    }\n\n                    if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.dindex) {\n                        GRID.body.updateRowState.call(self, [\"selectedClear\"]);\n                        GRID.data.clearSelect.call(self);\n                    }\n\n                    GRID.data.select.call(self, _column.dindex, undefined, {\n                        internalCall: true\n                    });\n                    updateRowState.call(self, [\"selected\"], _column.dindex);\n                },\n                \"lineNumber\": function (_column) {\n\n                }\n            };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n\n            if (attr in targetClick) {\n                targetClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            }\n        });\n        this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax5grid-column-attr]', function (e) {\n            var panelName, attr, row, col, dindex, rowIndex, colIndex;\n            var targetClick = {\n                \"default\": function (_column) {\n\n                    if (this.isInlineEditing) {\n                        for (var columnKey in this.inlineEditing) {\n                            if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                                return this;\n                            }\n                        }\n                    }\n\n                    var column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                    var value = \"\";\n                    if (column) {\n                        if (!self.list[dindex].__isGrouping) {\n                            value = GRID.data.getValue.call(self, dindex, column.key);\n                        }\n                    }\n                    GRID.body.inlineEdit.active.call(self, self.focusedColumn, e, value);\n                },\n                \"rowSelector\": function (_column) {\n\n                },\n                \"lineNumber\": function (_column) {\n\n                }\n            };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n\n            if (attr in targetClick) {\n                targetClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            }\n        });\n        this.$[\"container\"][\"body\"].on(\"mouseover\", \"tr\", function () {\n            return;\n            var dindex = this.getAttribute(\"data-ax5grid-tr-data-index\");\n            var i = self.$.livePanelKeys.length;\n            while (i--) {\n                if (typeof self.xvar.dataHoveredIndex !== \"undefined\") self.$.panel[self.$.livePanelKeys[i]].find('[data-ax5grid-tr-data-index=\"' + self.xvar.dataHoveredIndex + '\"]').removeClass(\"hover\");\n                self.$.panel[self.$.livePanelKeys[i]].find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]').addClass(\"hover\");\n            }\n            self.xvar.dataHoveredIndex = dindex;\n        });\n        this.$[\"container\"][\"body\"]\n            .on(\"mousedown\", '[data-ax5grid-column-attr=\"default\"]', function (e) {\n                if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                    columnSelector.on.call(self, {\n                        panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                        dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                        rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                        colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                        colspan: Number(this.getAttribute(\"colspan\"))\n                    });\n                }\n            })\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        resetFrozenColumn.call(this);\n    };\n\n    var resetFrozenColumn = function () {\n        var cfg = this.config;\n        var dividedBodyRowObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n        this.asideBodyRowData = (function (dataTable) {\n            var data = {rows: []};\n            for (var i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    var col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            label: \"&nbsp;\", key: \"__d-index__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            label: \"\", key: \"__d-checkbox__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            return data;\n        }).call(this, this.bodyRowTable);\n        this.leftBodyRowData = dividedBodyRowObj.leftData;\n        this.bodyRowData = dividedBodyRowObj.rightData;\n\n        if (cfg.body.grouping) {\n            var dividedBodyGroupingObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n            this.asideBodyGroupingData = (function (dataTable) {\n                var data = {rows: []};\n                for (var i = 0, l = dataTable.rows.length; i < l; i++) {\n                    data.rows[i] = {cols: []};\n                    if (i === 0) {\n                        var col = {\n                            label: \"\",\n                            colspan: 1,\n                            rowspan: dataTable.rows.length,\n                            colIndex: null\n                        }, _col = {};\n\n                        if (cfg.showLineNumber) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.lineNumberColumnWidth,\n                                _width: cfg.lineNumberColumnWidth,\n                                columnAttr: \"lineNumber\",\n                                label: \"&nbsp;\", key: \"__d-index__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                        if (cfg.showRowSelector) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.rowSelectorColumnWidth,\n                                _width: cfg.rowSelectorColumnWidth,\n                                columnAttr: \"rowSelector\",\n                                label: \"\", key: \"__d-checkbox__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                    }\n                }\n\n                return data;\n            }).call(this, this.bodyGroupingTable);\n            this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n            this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n        }\n\n        this.leftFootSumData = {};\n        this.footSumData = {};\n        if (this.config.footSum) {\n            var dividedFootSumObj = GRID.util.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n            this.leftFootSumData = dividedFootSumObj.leftData;\n            this.footSumData = dividedFootSumObj.rightData;\n        }\n    };\n\n    var getFieldValue = function (_list, _item, _index, _col, _value) {\n        var _key = _col.key;\n        var tagsToReplace = {\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        if (_key === \"__d-index__\") {\n            return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\n        }\n        else if (_key === \"__d-checkbox__\") {\n            return '<div class=\"checkBox\"></div>';\n        }\n        else {\n            if (_col.editor && (function (_editor) {\n                    if (_editor.type in GRID.inlineEditor) {\n                        return (GRID.inlineEditor[_editor.type].editMode == \"inline\");\n                    }\n                    return false;\n                })(_col.editor)) {\n\n                _value = _value || GRID.data.getValue.call(this, _index, _key);\n\n                if (U.isFunction(_col.editor.disabled)) {\n                    if (_col.editor.disabled.call({\n                            list: _list,\n                            dindex: _index,\n                            item: _list[_index],\n                            key: _key,\n                            value: _value\n                        })) {\n                        return _value;\n                    }\n                }\n\n                // print editor\n                return GRID.inlineEditor[_col.editor.type].getHtml(this, _col.editor, _value);\n            }\n            if (_col.formatter) {\n                var that = {\n                    key: _key,\n                    value: _value || GRID.data.getValue.call(this, _index, _key),\n                    dindex: _index,\n                    item: _item,\n                    list: _list\n                };\n                if (U.isFunction(_col.formatter)) {\n                    return _col.formatter.call(that);\n                } else {\n                    return GRID.formatter[_col.formatter].call(that);\n                }\n            }\n            else {\n                var returnValue = \"\";\n\n                if (typeof _value !== \"undefined\") {\n                    returnValue = _value;\n                } else {\n                    _value = GRID.data.getValue.call(this, _index, _key);\n                    if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n                }\n\n                return (typeof returnValue === \"number\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n                    return tagsToReplace[tag] || tag;\n                });\n            }\n        }\n    };\n\n    var getGroupingValue = function (_item, _index, _col) {\n        var value, that, _key = _col.key, _label = _col.label;\n\n        if (typeof _key === \"undefined\") {\n            that = {\n                key: _key,\n                list: _item.__groupingList,\n                groupBy: _item.__groupingBy\n            };\n            if (U.isFunction(_label)) {\n                value = _label.call(that);\n            } else {\n                value = _label;\n            }\n            _item[_col.colIndex] = value;\n            return value;\n        }\n        else if (_key === \"__d-index__\") {\n            return '';\n        }\n        else if (_key === \"__d-checkbox__\") {\n            return '';\n        }\n        else {\n            if (_col.collector) {\n                that = {\n                    key: _key,\n                    list: _item.__groupingList\n                };\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n                _item[_col.colIndex] = value;\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    var getSumFieldValue = function (_list, _col) {\n        var _key = _col.key, _label = _col.label;\n        //, _collector, _formatter\n        if (typeof _key === \"undefined\") {\n            return _label;\n        }\n        else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n            return '&nbsp;';\n        }\n        else {\n            if (_col.collector) {\n                var that = {\n                    key: _key,\n                    list: _list\n                };\n                var value;\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    var repaint = function (_reset) {\n        var cfg = this.config;\n        var list = this.list;\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            this.xvar.paintStartRowIndex = undefined;\n        }\n        var paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n        if (this.xvar.dataRowCount === list.length && this.xvar.paintStartRowIndex === paintStartRowIndex) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n        var isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\");\n        var asideBodyRowData = this.asideBodyRowData;\n        var leftBodyRowData = this.leftBodyRowData;\n        var bodyRowData = this.bodyRowData;\n        var leftFootSumData = this.leftFootSumData;\n        var footSumData = this.footSumData;\n        var asideBodyGroupingData = this.asideBodyGroupingData;\n        var leftBodyGroupingData = this.leftBodyGroupingData;\n        var bodyGroupingData = this.bodyGroupingData;\n        var bodyAlign = cfg.body.align;\n        var paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1;\n        this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n        this.$.livePanelKeys = [];\n\n        // body-scroll 의 포지션에 의존적이므로..\n        var repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            var SS = [];\n            var cgi, cgl;\n            var di, dl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n            var isScrolled = (function () {\n                // 스크롤값이 변경되거나 처음 호출되었습니까?\n                if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                    _scrollConfig = {\n                        paintStartRowIndex: 0,\n                        paintRowCount: _list.length\n                    };\n                    return false;\n                } else {\n                    return true;\n                }\n            })();\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                var len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n\n                var isGroupingRow = false;\n                var rowTable;\n\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n                    SS.push('<tr class=\"tr-' + (di % 4) + '\"',\n                        (isGroupingRow) ? ' data-ax5grid-grouping-tr=\"true\"' : '',\n                        ' data-ax5grid-tr-data-index=\"' + di + '\"',\n                        ' data-ax5grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\n                        ' data-ax5grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\n                        '>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-row=\"' + tri + '\" ',\n                            'data-ax5grid-column-col=\"' + ci + '\" ',\n                            'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                var attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                var tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                                column: _col,\n                                                key: _col.key,\n                                                item: _list[di],\n                                                index: di\n                                            }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                        })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax5grid-column-row=\"null\" ',\n                        'data-ax5grid-column-col=\"null\" ',\n                        'data-ax5grid-data-index=\"' + di + '\" ',\n                        'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                    SS.push('</tr>');\n                }\n            }\n            SS.push('</table>');\n\n            if (isScrolled) {\n                _elTarget.css({paddingTop: (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight});\n            }\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n        var repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            var SS = [];\n            var cgi, cgl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n        var scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n        // aside\n        if (cfg.asidePanelWidth > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum) {\n                // 바닥 요약 (footSum에 대한 aside 사용안함)\n                //repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n            }\n        }\n\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n\n        repaintBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n\n        //todo : repaintBody 에서 footSum 데이터 예외처리\n\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        this.xvar.paintStartRowIndex = paintStartRowIndex;\n        this.xvar.paintRowCount = paintRowCount;\n        this.xvar.dataRowCount = list.length;\n        this.needToPaintSum = false;\n        GRID.page.statusUpdate.call(this);\n    };\n\n    var repaintCell = function (_panelName, _dindex, _rowIndex, _colIndex, _newValue) {\n        var self = this;\n        var cfg = this.config;\n        var list = this.list;\n\n        var updateCell = this.$[\"panel\"][_panelName]\n            .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n            .find('[data-ax5grid-column-rowindex=\"' + _rowIndex + '\"][data-ax5grid-column-colindex=\"' + _colIndex + '\"]')\n            .find('[data-ax5grid-cellholder]');\n        var colGroup = this.colGroup;\n        var col = colGroup[_colIndex];\n        updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n        if (col.editor && col.editor.updateWith) {\n            col.editor.updateWith.forEach(function (updateColumnKey) {\n                colGroup.forEach(function (col) {\n                    if (col.key == updateColumnKey) {\n                        var rowIndex = col.rowIndex;\n                        var colIndex = col.colIndex;\n                        var panelName = GRID.util.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName;\n                        var updateWithCell = self.$[\"panel\"][panelName]\n                            .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                            .find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]')\n                            .find('[data-ax5grid-cellholder]');\n                        updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n                    }\n                });\n            });\n        }\n\n        /// ~~~~~~\n\n        var paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n        var leftFootSumData = this.leftFootSumData;\n        var footSumData = this.footSumData;\n        var asideBodyGroupingData = this.asideBodyGroupingData;\n        var leftBodyGroupingData = this.leftBodyGroupingData;\n        var bodyGroupingData = this.bodyGroupingData;\n        var bodyAlign = cfg.body.align;\n        var paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1;\n        var scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n        var repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey];\n\n            var SS = [];\n            var cgi, cgl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        var replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey];\n            var SS = [];\n            var cgi, cgl;\n            var di, dl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                var len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    var rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    var attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    var tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n\n                }\n                replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    var repaintRow = function (_dindex) {\n        var self = this;\n        var cfg = this.config;\n        var list = this.list;\n        /// ~~~~~~\n\n        var paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n        var asideBodyRowData = this.asideBodyRowData;\n        var leftBodyRowData = this.leftBodyRowData;\n        var bodyRowData = this.bodyRowData;\n        var leftFootSumData = this.leftFootSumData;\n        var footSumData = this.footSumData;\n        var asideBodyGroupingData = this.asideBodyGroupingData;\n        var leftBodyGroupingData = this.leftBodyGroupingData;\n        var bodyGroupingData = this.bodyGroupingData;\n        var bodyAlign = cfg.body.align;\n        var paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1;\n        var scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n        var repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\n            var _elTarget = this.$.panel[_elTargetKey];\n\n            var SS = [];\n            var cgi, cgl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        var replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey];\n            var SS = [];\n            var cgi, cgl;\n            var di, dl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                var len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    var rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    var attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    var tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n        var replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\n            var _elTarget = this.$.panel[_elTargetKey];\n            var SS = [];\n            var cgi, cgl;\n            var di, dl;\n            var tri, trl;\n            var ci, cl;\n            var col, cellHeight, colAlign;\n            var rowTable = _bodyRow;\n            for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                    col = rowTable.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-data-index=\"' + di + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-data-index=\"' + di + '\" ',\n                    'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n            }\n\n            //_elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').html(SS.join(''));\n            _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n        };\n\n\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n\n            }\n            replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n        }\n\n        replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n\n                }\n                replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    var scrollTo = function (css, noRepaint) {\n        var cfg = this.config;\n\n        if (this.isInlineEditing) {\n            for (var key in this.inlineEditing) {\n                //if(this.inlineEditing[key].editor.type === \"select\") {}\n                // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n                GRID.body.inlineEdit.deActive.call(this, \"ESC\", key);\n            }\n        }\n\n\n        if (cfg.asidePanelWidth > 0 && \"top\" in css) {\n            this.$.panel[\"aside-body-scroll\"].css({top: css.top});\n        }\n        if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n            this.$.panel[\"left-body-scroll\"].css({top: css.top});\n        }\n        if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n            this.$.panel[\"top-body-scroll\"].css({left: css.left});\n        }\n\n        this.$.panel[\"body-scroll\"].css(css);\n\n        if (cfg.footSum && \"left\" in css) {\n            this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\n        }\n\n        if (!noRepaint && \"top\" in css) {\n            repaint.call(this);\n        }\n    };\n\n    var blur = function () {\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n        if (this.isInlineEditing) {\n            inlineEdit.deActive.call(this);\n        }\n    };\n\n    var moveFocus = function (_position) {\n        var focus = {\n            \"UD\": function (_dy) {\n                var moveResult = true;\n                var focusedColumn;\n                var originalColumn;\n                var while_i;\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dy > 0) {\n                    if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = 0;\n                        if (focusedColumn.dindex > this.list.length - 1) {\n                            focusedColumn.dindex = this.list.length - 1;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                }\n                else {\n                    if (focusedColumn.rowIndex + _dy < 0) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n                        if (focusedColumn.dindex < 0) {\n                            focusedColumn.dindex = 0;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                }\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        moveResult = false;\n                        break;\n                    }\n                    while_i++;\n                }\n\n                var nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex <= this.xvar.paintStartRowIndex) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                        else if (focusedColumn.dindex + 1 > this.xvar.paintStartRowIndex + (this.xvar.paintRowCount - 2)) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.paintRowCount + 3) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n\n            },\n            \"LR\": function (_dx) {\n                var moveResult = true;\n                var focusedColumn;\n                var originalColumn;\n                var while_i = 0;\n                var isScrollPanel = false;\n                var containerPanelName = \"\";\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dx < 0) {\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                    if (focusedColumn.colIndex < 0) {\n                        focusedColumn.colIndex = 0;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.colIndex = focusedColumn.colIndex + (originalColumn.colspan - 1) + _dx;\n                    if (focusedColumn.colIndex > this.colGroup.length - 1) {\n                        focusedColumn.colIndex = this.colGroup.length - 1;\n                        moveResult = false;\n                    }\n                }\n\n                if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    focusedColumn.rowIndex = 0;\n                }\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    focusedColumn.colIndex--;\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        moveResult = false;\n                        break;\n                    }\n                    while_i++;\n                }\n\n                var nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n                focusedColumn.panelName = nPanelInfo.panelName;\n                containerPanelName = nPanelInfo.containerPanelName;\n                isScrollPanel = nPanelInfo.isScrollPanel;\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n                var $column = this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n\n                if ($column && isScrollPanel) {// 스크롤 패널 이라면~\n                    var newLeft = (function () {\n                        if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n                            return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n                        } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n                            return $column.position().left;\n                        } else {\n                            return;\n                        }\n                    }).call(this);\n\n                    //console.log(newLeft);\n\n                    if (typeof newLeft !== \"undefined\") {\n                        GRID.header.scrollTo.call(this, {left: -newLeft});\n                        scrollTo.call(this, {left: -newLeft});\n                        GRID.scroller.resize.call(this);\n                    }\n                }\n\n                return moveResult;\n            },\n            \"INDEX\": function (_dindex) {\n                var moveResult = true;\n                var focusedColumn;\n                var originalColumn;\n                var while_i;\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) {\n                    focusedColumn = {\n                        rowIndex: 0,\n                        colIndex: 0\n                    }\n                }\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n\n                if (_dindex == \"end\") {\n                    _dindex = this.list.length - 1;\n                }\n\n                focusedColumn.dindex = _dindex;\n                focusedColumn.rowIndex = 0;\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        break;\n                    }\n                    while_i++;\n                }\n\n                var nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex < this.xvar.paintStartRowIndex) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                        else if (focusedColumn.dindex + 1 > this.xvar.paintStartRowIndex + (this.xvar.paintRowCount - 2)) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.paintRowCount + 3) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n            }\n        };\n\n        var processor = {\n            \"UP\": function () {\n                return focus[\"UD\"].call(this, -1);\n            },\n            \"DOWN\": function () {\n                return focus[\"UD\"].call(this, 1);\n            },\n            \"LEFT\": function () {\n                return focus[\"LR\"].call(this, -1);\n            },\n            \"RIGHT\": function () {\n                return focus[\"LR\"].call(this, 1);\n            },\n            \"HOME\": function () {\n                return focus[\"INDEX\"].call(this, 0);\n            },\n            \"END\": function () {\n                return focus[\"INDEX\"].call(this, \"end\");\n            },\n            \"position\": function (_position) {\n                return focus[\"INDEX\"].call(this, _position);\n            }\n        };\n\n        if (_position in processor) {\n            return processor[_position].call(this);\n        } else {\n            return processor[\"position\"].call(this, _position);\n        }\n    };\n\n    var inlineEdit = {\n        active: function (_focusedColumn, _e, _initValue) {\n            var self = this;\n            var dindex, colIndex, rowIndex, panelName, colspan;\n            var col, editor;\n\n            // this.inlineEditing = {};\n            for (var key in _focusedColumn) {\n                panelName = _focusedColumn[key].panelName;\n                dindex = _focusedColumn[key].dindex;\n                colIndex = _focusedColumn[key].colIndex;\n                rowIndex = _focusedColumn[key].rowIndex;\n                colspan = _focusedColumn[key].colspan;\n\n                // 인라인 에디팅을 멈춰야 하는 경우 조건\n                col = this.colGroup[colIndex];\n                if (!(editor = col.editor)) return this;\n\n                // editor disabled 체크\n                if (U.isFunction(editor.disabled)) {\n                    if (editor.disabled.call({\n                            list: this.list,\n                            dindex: dindex,\n                            item: this.list[dindex],\n                            key: col.key,\n                            value: _initValue\n                        })) {\n                        return this;\n                    }\n                }\n\n                // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n                if (!(function (_editor, _type) {\n                        if (_editor.type in GRID.inlineEditor) {\n                            return (GRID.inlineEditor[_editor.type].editMode == \"popup\");\n                        }\n                    })(editor)) {\n                    // 체크 박스 타입이면 값 변경 시도\n                    if (editor.type == \"checkbox\") {\n                        var checked, newValue;\n                        if (editor.config && editor.config.trueValue) {\n                            if (checked = !(_initValue == editor.config.trueValue)) {\n                                newValue = editor.config.trueValue;\n                            } else {\n                                newValue = editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\n                        }\n\n                        GRID.data.setValue.call(self, dindex, col.key, newValue);\n                        updateRowState.call(self, [\"cellChecked\"], dindex, {\n                            key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n                            editorConfig: col.editor.config, checked: checked\n                        });\n                    }\n                    return this;\n                }\n\n\n                if (this.list[dindex].__isGrouping) {\n                    return false;\n                }\n                if (key in this.inlineEditing) {\n                    return false;\n                }\n                this.inlineEditing[key] = {\n                    editor: editor,\n                    panelName: panelName,\n                    columnKey: key,\n                    column: _focusedColumn[key],\n                    useReturnToSave: GRID.inlineEditor[editor.type].useReturnToSave\n                };\n                this.isInlineEditing = true;\n            }\n            if (this.isInlineEditing) {\n\n                var originalValue = GRID.data.getValue.call(self, dindex, col.key);\n                var initValue = (function (__value, __editor) {\n                    if (U.isNothing(__value)) {\n                        __value = U.isNothing(originalValue) ? \"\" : originalValue;\n                    }\n\n                    if (__editor.type == \"money\") {\n                        return U.number(__value, {\"money\": true});\n                    }\n                    else {\n                        return __value;\n                    }\n                }).call(this, _initValue, editor);\n\n                this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]')\n                    .find('[data-ax5grid-cellholder]');\n\n                this.inlineEditing[key].$inlineEditor = GRID.inlineEditor[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n                return true;\n            }\n        },\n        deActive: function (_msg, _key, _value) {\n            // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n            if (!this.inlineEditing[_key]) return this;\n\n            var panelName = this.inlineEditing[_key].panelName;\n            var dindex = this.inlineEditing[_key].column.dindex;\n            var rowIndex = this.inlineEditing[_key].column.rowIndex;\n            var colIndex = this.inlineEditing[_key].column.colIndex;\n\n            var column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex];\n            var editorValue = (function ($inlineEditor) {\n                if (typeof _value === \"undefined\") {\n                    if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n                        return $inlineEditor.val();\n                    } else {\n                        _msg = \"CANCEL\";\n                        return false;\n                    }\n                } else {\n                    return _value;\n                }\n            })(this.inlineEditing[_key].$inlineEditor);\n\n            var newValue = (function (__value, __editor) {\n                if (__editor.type == \"money\") {\n                    return U.number(__value);\n                }\n                else {\n                    return __value;\n                }\n            }).call(this, editorValue, column.editor);\n\n            var action = {\n                \"CANCEL\": function (_dindex, _column, _newValue) {\n                    action[\"__clear\"].call(this);\n                },\n                \"RETURN\": function (_dindex, _column, _newValue) {\n                    if (GRID.data.setValue.call(this, _dindex, _column.key, _newValue)) {\n                        action[\"__clear\"].call(this);\n                        GRID.body.repaintCell.call(this, panelName, dindex, rowIndex, colIndex, _newValue);\n                    } else {\n                        action[\"__clear\"].call(this);\n                    }\n                },\n                \"__clear\": function () {\n                    this.isInlineEditing = false;\n                    var bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n                    if (bindedAx5ui == \"ax5picker\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n                    } else if (bindedAx5ui == \"ax5select\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n                    }\n\n                    this.inlineEditing[_key].$inlineEditor.remove();\n                    this.inlineEditing[_key].$inlineEditor = null;\n                    this.inlineEditing[_key].$inlineEditorCell = null;\n                    this.inlineEditing[_key] = undefined;\n                    delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n                }\n            };\n\n            if (_msg in action) {\n                action[_msg || \"RETURN\"].call(this, dindex, column, newValue);\n            } else {\n                action[\"__clear\"].call(this);\n            }\n        },\n        keydown: function (key, columnKey, _options) {\n            var processor = {\n                \"ESC\": function () {\n                    for (var columnKey in this.inlineEditing) {\n                        inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n                    }\n                },\n                \"RETURN\": function () {\n                    if (this.isInlineEditing) {\n                        if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\n                            inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n                        }\n                    } else {\n\n                        for (var k in this.focusedColumn) {\n                            var _column = this.focusedColumn[k];\n                            var column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                            var dindex = _column.dindex;\n                            var value = \"\";\n                            if (column) {\n                                if (!this.list[dindex].__isGrouping) {\n                                    value = GRID.data.getValue.call(this, dindex, column.key);\n                                }\n                            }\n\n                            var col = this.colGroup[_column.colIndex];\n\n                            if (GRID.inlineEditor[col.editor.type].editMode === \"inline\") {\n                                if (_options && _options.moveFocus) {\n\n                                }\n                                else {\n                                    if (column.editor && column.editor.type == \"checkbox\") {\n\n                                        value = GRID.data.getValue.call(this, dindex, column.key);\n\n                                        var checked, newValue;\n                                        if (column.editor.config && column.editor.config.trueValue) {\n                                            if (checked = !(value == column.editor.config.trueValue)) {\n                                                newValue = column.editor.config.trueValue;\n                                            } else {\n                                                newValue = column.editor.config.falseValue;\n                                            }\n                                        } else {\n                                            newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                                        }\n\n                                        GRID.data.setValue.call(this, _column.dindex, column.key, newValue);\n                                        updateRowState.call(this, [\"cellChecked\"], dindex, {\n                                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                            editorConfig: column.editor.config, checked: checked\n                                        });\n\n                                    }\n                                }\n                            } else {\n                                GRID.body.inlineEdit.active.call(this, this.focusedColumn, null, value);\n                            }\n                        }\n                    }\n                }\n            };\n\n            if (key in processor) {\n                processor[key].call(this, key, columnKey, _options);\n            }\n        }\n    };\n\n    var getExcelString = function () {\n        var cfg = this.config;\n        var list = this.list;\n        var bodyRowData = this.bodyRowData;\n        var footSumData = this.footSumData;\n        var bodyGroupingData = this.bodyGroupingData;\n\n        // body-scroll 의 포지션에 의존적이므로..\n        var getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\n            var SS = [];\n            var di, dl;\n            var tri, trl;\n            var ci, cl;\n            var col;\n\n            //SS.push('<table border=\"1\">');\n            for (di = 0, dl = _list.length; di < dl; di++) {\n                var isGroupingRow = false;\n                var rowTable;\n\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    SS.push('<tr>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n\n                        SS.push('<td ',\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</td>');\n                    }\n                    SS.push('</tr>');\n                }\n            }\n            //SS.push('</table>');\n            return SS.join('');\n        };\n        var getSum = function (_colGroup, _bodyRow, _list) {\n            var SS = [];\n            var tri, trl;\n            var ci, cl;\n            var col;\n\n            //SS.push('<table border=\"1\">');\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr>');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    SS.push('<td ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        '>', getSumFieldValue.call(this, _list, col), '</td>');\n                }\n                SS.push('</tr>');\n            }\n\n            //SS.push('</table>');\n\n            return SS.join('');\n        };\n\n        var po = [];\n        po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n        if (cfg.footSum) {\n            // 바닥 요약\n            po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n        }\n\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        return po.join('');\n    };\n\n    GRID.body = {\n        init: init,\n        repaint: repaint,\n        repaintCell: repaintCell,\n        repaintRow: repaintRow,\n        updateRowState: updateRowState,\n        updateRowStateAll: updateRowStateAll,\n        scrollTo: scrollTo,\n        blur: blur,\n        moveFocus: moveFocus,\n        inlineEdit: inlineEdit,\n        getExcelString: getExcelString\n    };\n})();\n","// ax5.ui.grid.collector\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n    var sum = function () {\n        var value = 0;\n        var i = this.list.length;\n        while (i--) {\n            if(!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n            }\n        }\n        return value;\n    };\n    var avg = function () {\n        var value = 0;\n        var i = this.list.length, listLength = 0;\n        while (i--) {\n            if(!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n                listLength++;\n            }\n        }\n        return U.number(value / (listLength || 1), {\"round\": 2});\n    };\n\n    GRID.collector = {\n        sum: sum,\n        avg: avg\n    };\n\n})();","// ax5.ui.grid.layout\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var init = function () {\n\n    };\n\n    var clearGroupingData = function (_list) {\n        var i = 0, l = _list.length;\n        var returnList = [];\n        for (; i < l; i++) {\n            if (_list[i] && !_list[i][\"__isGrouping\"]) {\n                if (_list[i][this.config.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(i);\n                }\n                returnList.push(jQuery.extend({}, _list[i]));\n            }\n        }\n        return returnList;\n    };\n\n    var initData = function (_list) {\n        this.selectedDataIndexs = [];\n        var i = 0, l = _list.length;\n        var returnList = [];\n        var appendIndex = 0;\n        var dataRealRowCount;\n\n        if (this.config.body.grouping) {\n            var groupingKeys = U.map(this.bodyGrouping.by, function () {\n                return {\n                    key: this,\n                    compareString: \"\",\n                    grouping: false,\n                    list: []\n                }\n            });\n            var gi = 0, gl = groupingKeys.length, compareString, appendRow = [], ari;\n            for (; i < l + 1; i++) {\n                gi = 0;\n                if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                } else {\n                    compareString = \"\";\n                    appendRow = [];\n                    for (; gi < gl; gi++) {\n                        if (_list[i]) {\n                            compareString += \"$|$\" + _list[i][groupingKeys[gi].key];\n                        }\n                        if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {\n                            var appendRowItem = {keys: [], labels: [], list: groupingKeys[gi].list};\n                            for (var ki = 0; ki < gi + 1; ki++) {\n                                appendRowItem.keys.push(groupingKeys[ki].key);\n                                appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);\n                            }\n                            appendRow.push(appendRowItem);\n                            groupingKeys[gi].list = [];\n                        }\n                        groupingKeys[gi].list.push(_list[i]);\n                        groupingKeys[gi].compareString = compareString;\n                    }\n\n                    ari = appendRow.length;\n                    while (ari--) {\n                        returnList.push({__isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: {keys: appendRow[ari].keys, labels: appendRow[ari].labels}});\n                    }\n\n                    if (_list[i]) {\n                        if (_list[i][this.config.columnKeys.selected]) {\n                            this.selectedDataIndexs.push(i);\n                        }\n                        dataRealRowCount = _list[i][\"__index\"] = i;\n                        returnList.push(_list[i]);\n                        appendIndex++;\n                    }\n                }\n            }\n        }\n        else {\n            for (; i < l; i++) {\n                if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                } else if (_list[i]) {\n\n                    if (_list[i][this.config.columnKeys.selected]) {\n                        this.selectedDataIndexs.push(i);\n                    }\n                    // __index변수를 추가하여 lineNumber 에 출력합니다. (body getFieldValue 에서 출력함)\n                    dataRealRowCount = _list[i][\"__index\"] = i;\n                    returnList.push(_list[i]);\n                }\n            }\n        }\n\n        // 원본 데이터의 갯수\n        // grouping은 제외하고 수집됨.\n        this.xvar.dataRealRowCount = dataRealRowCount + 1;\n        return returnList;\n    };\n\n    var set = function (data) {\n        var self = this;\n\n        if (U.isArray(data)) {\n            this.page = null;\n            this.list = initData.call(this,\n                (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, data) : data\n            );\n            this.deletedList = [];\n        } else if (\"page\" in data) {\n            this.page = jQuery.extend({}, data.page);\n            this.list = initData.call(this,\n                (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, data.list) : data.list\n            );\n            this.deletedList = [];\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n\n        if (this.config.body.grouping) {\n\n        }\n        return this;\n    };\n\n    var get = function (_type) {\n        return {\n            list: this.list,\n            page: this.page\n        };\n    };\n\n    var getList = function (_type) {\n        var returnList = [];\n        var i = 0, l = this.list.length;\n        switch (_type) {\n            case \"modified\":\n                for (; i < l; i++) {\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.modified]) {\n                        returnList.push(jQuery.extend({}, this.list[i]));\n                    }\n                }\n                break;\n            case \"selected\":\n                for (; i < l; i++) {\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.selected]) {\n                        returnList.push(jQuery.extend({}, this.list[i]));\n                    }\n                }\n                break;\n            case \"deleted\":\n                //_list = GRID.data.clearGroupingData(this.list);\n                returnList = [].concat(this.deletedList);\n                break;\n            default:\n                returnList = GRID.data.clearGroupingData.call(this, this.list);\n        }\n        return returnList;\n    };\n\n    var add = function (_row, _dindex, _options) {\n        var list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        var processor = {\n            \"first\": function () {\n                list = [].concat(_row).concat(list);\n            },\n            \"last\": function () {\n                list = list.concat([].concat(_row));\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            _row[this.config.columnKeys.modified] = true;\n            processor[_dindex].call(this, _row);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            //\n            list = list.splice(_dindex, [].concat(_row));\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else if (_options && _options.sort && Object.keys(this.sortInfo).length) {\n            list = sort.call(this,\n                this.sortInfo,\n                list\n            );\n        }\n\n        this.list = list;\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    /**\n     * list에서 완전 제거 하는 경우 사용.\n     * ax5grid.data.remove\n     */\n    var remove = function (_dindex) {\n        var list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        var processor = {\n            \"first\": function () {\n                list.splice(_dindex, 1);\n            },\n            \"last\": function () {\n                var lastIndex = list.length - 1;\n                list.splice(lastIndex, 1);\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            //\n            list.splice(_dindex, 1);\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else if (Object.keys(this.sortInfo).length) {\n            list = sort.call(this,\n                this.sortInfo,\n                list\n            );\n        }\n\n        this.list = list;\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    /**\n     * list에서 deleted 처리 repaint\n     * ax5grid.data.deleteRow\n     */\n    var deleteRow = function (_dindex) {\n        var list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n\n        var processor = {\n            \"first\": function () {\n                list[0][this.config.columnKeys.deleted] = true;\n            },\n            \"last\": function () {\n                list[list.length - 1][this.config.columnKeys.deleted] = true;\n            },\n            \"selected\": function () {\n                var i = list.length;\n                while (i--) {\n                    if (list[i][this.config.columnKeys.selected]) {\n                        list[i][this.config.columnKeys.deleted] = true;\n                    }\n                }\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            list[_dindex][this.config.columnKeys.deleted] = true;\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else if (Object.keys(this.sortInfo).length) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else {\n            list = initData.call(this, list);\n        }\n\n        this.list = list;\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    var update = function (_row, _dindex) {\n        if (!U.isNumber(_dindex)) {\n            throw 'invalid argument _dindex';\n        }\n        //\n        this.needToPaintSum = true;\n        this.list.splice(_dindex, 1, _row);\n\n        if (this.config.body.grouping) {\n            this.list = initData.call(this, clearGroupingData.call(this, this.list));\n        }\n    };\n\n    var setValue = function (_dindex, _key, _value) {\n        var originalValue = getValue.call(this, _dindex, _key);\n        this.needToPaintSum = true;\n\n        if (originalValue !== _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    this.list[_dindex][this.config.columnKeys.modified] = true;\n                    (Function(\"val\", \"this\" + GRID.util.getRealPathForDataItem(_key) + \" = val;\")).call(this.list[_dindex], _value);\n                } catch (e) {\n\n                }\n            } else {\n                this.list[_dindex][this.config.columnKeys.modified] = true;\n                this.list[_dindex][_key] = _value;\n            }\n\n            if (this.onDataChanged) {\n                this.onDataChanged.call({\n                    self: this,\n                    list: this.list,\n                    dindex: _dindex,\n                    item: this.list[_dindex],\n                    key: _key,\n                    value: _value\n                });\n            }\n        }\n\n        return true;\n    };\n\n    var getValue = function (_dindex, _key, _value) {\n        if (/[\\.\\[\\]]/.test(_key)) {\n            try {\n                _value = (Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\")).call(this.list[_dindex]);\n            } catch (e) {\n\n            }\n        } else {\n            _value = this.list[_dindex][_key];\n        }\n        return _value;\n    };\n\n    var clearSelect = function () {\n        this.selectedDataIndexs = [];\n    };\n\n    var select = function (_dindex, _selected, _options) {\n        var cfg = this.config;\n\n        if (this.list[_dindex].__isGrouping) return false;\n        if (this.list[_dindex][cfg.columnKeys.disableSelection]) return false;\n\n        if (typeof _selected === \"undefined\") {\n            if (this.list[_dindex][cfg.columnKeys.selected] = !this.list[_dindex][cfg.columnKeys.selected]) {\n                this.selectedDataIndexs.push(_dindex);\n            }\n        } else {\n            if (this.list[_dindex][cfg.columnKeys.selected] = _selected) {\n                this.selectedDataIndexs.push(_dindex);\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list,\n                dindex: _dindex,\n                item: this.list[_dindex],\n                key: cfg.columnKeys.selected,\n                value: this.list[_dindex][cfg.columnKeys.selected]\n            });\n        }\n\n        return this.list[_dindex][cfg.columnKeys.selected];\n    };\n\n    var selectAll = function (_selected, _options) {\n        var cfg = this.config;\n\n        var dindex = this.list.length;\n        if (typeof _selected === \"undefined\") {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        } else {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = _selected) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list\n            });\n        }\n\n        return this.list;\n    };\n\n    var sort = function (_sortInfo, _list) {\n        var self = this;\n        var list = _list || this.list;\n        var sortInfoArray = [];\n        var getKeyValue = function (_item, _key, _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    _value = (Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\")).call(_item);\n                } catch (e) {\n\n                }\n            } else {\n                _value = _item[_key];\n            }\n            return _value;\n        };\n\n        for (var k in _sortInfo) {\n            sortInfoArray[_sortInfo[k].seq] = {key: k, order: _sortInfo[k].orderBy};\n        }\n        sortInfoArray = U.filter(sortInfoArray, function () {\n            return typeof this !== \"undefined\";\n        });\n\n        var i = 0, l = sortInfoArray.length, _a_val, _b_val;\n\n        list.sort(function (_a, _b) {\n            for (i = 0; i < l; i++) {\n                _a_val = getKeyValue(_a, sortInfoArray[i].key);\n                _b_val = getKeyValue(_b, sortInfoArray[i].key);\n\n                if (typeof _a_val !== typeof _b_val) {\n                    _a_val = '' + _a_val;\n                    _b_val = '' + _b_val;\n                }\n                if (_a_val < _b_val) {\n                    return (sortInfoArray[i].order === \"asc\") ? -1 : 1;\n                } else if (_a_val > _b_val) {\n                    return (sortInfoArray[i].order === \"asc\") ? 1 : -1;\n                }\n            }\n        });\n\n        if (_list) {\n            return list;\n        } else {\n            this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n            this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n            GRID.page.navigationUpdate.call(this);\n            return this;\n        }\n\n    };\n\n    GRID.data = {\n        init: init,\n        set: set,\n        get: get,\n        getList: getList,\n        setValue: setValue,\n        getValue: getValue,\n        clearSelect: clearSelect,\n        select: select,\n        selectAll: selectAll,\n        add: add,\n        remove: remove,\n        deleteRow: deleteRow,\n        update: update,\n        sort: sort,\n        initData: initData,\n        clearGroupingData: clearGroupingData\n    };\n\n})();","/*\n * Copyright (c) 2016. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n// ax5.ui.grid.excel\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var base64 = function (s) {\n        return window.btoa(unescape(encodeURIComponent(s)));\n    };\n    var uri = \"data:application/vnd.ms-excel;base64,\";\n\n    var getExcelTmpl = function () {\n        return `\\ufeff\n{{#tables}}{{{body}}}{{/tables}}\n`;\n    };\n\n    var tableToExcel = function (table, fileName) {\n        var link, a, output;\n        var tables = [].concat(table);\n\n        output = ax5.mustache.render(getExcelTmpl(), {\n            worksheet: (function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({name: \"Sheet\" + (ti + 1)});\n                });\n                return arr;\n            })(),\n            tables: (function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({body: t});\n                });\n                return arr;\n            })()\n        });\n\n        var isChrome = navigator.userAgent.indexOf(\"Chrome\") > -1;\n        var isSafari = !isChrome && navigator.userAgent.indexOf(\"Safari\") > -1;\n\n        var isIE = /*@cc_on!@*/false || !!document.documentMode; // this works with IE10 and IE11 both :)\n        if (navigator.msSaveOrOpenBlob) {\n            var blob1 = new Blob([output], {type: \"text/html\"});\n            window.navigator.msSaveOrOpenBlob(blob1, fileName);\n        }\n        else if (isSafari) {\n            // 사파리는 지원이 안되므로 그냥 테이블을 클립보드에 복사처리\n            //tables\n            var blankWindow = window.open('about:blank', this.id + '-excel-export', 'width=600,height=400');\n            blankWindow.document.write(output);\n            blankWindow = null;\n        }\n        else {\n            if (isIE && typeof Blob === \"undefined\") {\n\n                //otherwise use the iframe and save\n                //requires a blank iframe on page called txtArea1\n                var $iframe = jQuery('<iframe id=\"' + this.id + '-excel-export\" style=\"display:none\"></iframe>');\n                jQuery(document.body).append($iframe);\n                var iframe = window[this.id + '-excel-export'];\n                iframe.document.open(\"text/html\", \"replace\");\n                iframe.document.write(output);\n                iframe.document.close();\n                iframe.focus();\n                iframe.document.execCommand(\"SaveAs\", true, fileName);\n                $iframe.remove();\n            } else {\n                // Attempt to use an alternative method\n                var anchor = document.body.appendChild(\n                    document.createElement(\"a\")\n                );\n\n                // If the [download] attribute is supported, try to use it\n                if (\"download\" in anchor) {\n                    anchor.download = fileName;\n                    //anchor.href = URL.createObjectURL( blob );\n                    anchor.href = uri + base64(output);\n                    anchor.click();\n                    document.body.removeChild(anchor);\n                }\n            }\n        }\n\n        return true;\n    };\n\n    GRID.excel = {\n        export: tableToExcel\n    };\n})();","// ax5.ui.grid.formatter\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n    var money = function () {\n        return U.number(this.value, {\"money\":true});\n    };\n\n    GRID.formatter = {\n        money: money\n    };\n\n})();","// ax5.ui.grid.header\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var columnResizerEvent = {\n        \"on\": function (_columnResizer, _colIndex) {\n            var self = this;\n            var $columnResizer = $(_columnResizer);\n            var columnResizerPositionLeft = $columnResizer.offset().left;\n            var gridTargetOffsetLeft = self.$[\"container\"][\"root\"].offset().left;\n            self.xvar.columnResizerIndex = _colIndex;\n            var resizeRange = {\n                min: -self.colGroup[_colIndex]._width + 2,\n                max: (self.colGroup[_colIndex + 1]) ? self.colGroup[_colIndex + 1]._width : self.$[\"container\"][\"root\"].width() - 2,\n            };\n            //console.log(resizeRange);\n\n            jQuery(document.body)\n                .bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n\n                    if (resizeRange.min > self.xvar.__da) {\n                        self.xvar.__da = resizeRange.min;\n                    } else if (resizeRange.max < self.xvar.__da) {\n                        self.xvar.__da = resizeRange.max;\n                    }\n\n                    if (!self.xvar.columnResizerLived) {\n                        self.$[\"resizer\"][\"horizontal\"].addClass(\"live\");\n                    }\n                    self.xvar.columnResizerLived = true;\n                    self.$[\"resizer\"][\"horizontal\"].css({\n                        left: columnResizerPositionLeft + self.xvar.__da - gridTargetOffsetLeft\n                    });\n                })\n                .bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    columnResizerEvent.off.call(self);\n                    U.stopEvent(e);\n                })\n                .bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                    columnResizerEvent.off.call(self);\n                    U.stopEvent(e);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n            this.$[\"resizer\"][\"horizontal\"].removeClass(\"live\");\n            this.xvar.columnResizerLived = false;\n\n            if (typeof this.xvar.__da === \"undefined\") {\n\n            }\n            else {\n                this.setColumnWidth(this.colGroup[this.xvar.columnResizerIndex]._width + this.xvar.__da, this.xvar.columnResizerIndex);\n            }\n\n            jQuery(document.body)\n                .unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    var init = function () {\n        // 헤더 초기화\n        var self = this;\n\n        this.$[\"container\"][\"header\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            var key = this.getAttribute(\"data-ax5grid-column-key\");\n            var colIndex = this.getAttribute(\"data-ax5grid-column-colindex\");\n            var rowIndex = this.getAttribute(\"data-ax5grid-column-rowindex\");\n            var col = self.colGroup[colIndex];\n\n            if(key === \"__checkbox_header__\"){\n                var selected = this.getAttribute(\"data-ax5grid-selected\");\n                    selected = (U.isNothing(selected)) ? true : (selected === \"true\") ? false: true;\n\n                $(this).attr(\"data-ax5grid-selected\", selected);\n                self.selectAll({selected: selected});\n            }\n            else{\n                if (key && col) {\n                    if ((col.sortable === true || self.config.sortable === true) && col.sortable !== false) {\n                        if (!col.sortFixed) toggleSort.call(self, col.key);\n                    }\n                }\n            }\n\n            GRID.body.blur.call(self);\n        });\n        this.$[\"container\"][\"header\"]\n            .on(\"mousedown\", '[data-ax5grid-column-resizer]', function (e) {\n                var colIndex = this.getAttribute(\"data-ax5grid-column-resizer\");\n                self.xvar.mousePosition = GRID.util.getMousePosition(e);\n                columnResizerEvent.on.call(self, this, Number(colIndex));\n                U.stopEvent(e);\n            })\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        resetFrozenColumn.call(this);\n    };\n\n    var resetFrozenColumn = function () {\n        var cfg = this.config;\n        var dividedHeaderObj = GRID.util.divideTableByFrozenColumnIndex(this.headerTable, this.config.frozenColumnIndex);\n        this.asideHeaderData = (function (dataTable) {\n            var colGroup = [];\n            var data = {rows: []};\n            for (var i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    var col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            key: \"__index_header__\", label: \"&nbsp;\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            key: \"__checkbox_header__\", label: \"\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            this.asideColGroup = colGroup;\n            return data;\n        }).call(this, this.headerTable);\n        this.leftHeaderData = dividedHeaderObj.leftData;\n        this.headerData = dividedHeaderObj.rightData;\n    };\n\n    var getFieldValue = function (_col) {\n        var cfg = this.config;\n        var colGroup = this.colGroup;\n        var _key = _col.key;\n        var tagsToReplace = {\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        if (_key === \"__checkbox_header__\") {\n            return '<div class=\"checkBox\"></div>';\n\n        } else {\n            return (_col.label || \"&nbsp;\");\n        }\n    };\n\n    var repaint = function (_reset) {\n        var cfg = this.config;\n        var colGroup = this.colGroup;\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            this.xvar.paintStartRowIndex = undefined;\n        }\n        var asideHeaderData = this.asideHeaderData;\n        var leftHeaderData = this.leftHeaderData;\n        var headerData = this.headerData;\n        var headerAlign = cfg.header.align;\n\n        // this.asideColGroup : asideHeaderData에서 처리 함.\n        this.leftHeaderColGroup = colGroup.slice(0, this.config.frozenColumnIndex);\n        this.headerColGroup = colGroup.slice(this.config.frozenColumnIndex);\n\n        var repaintHeader = function (_elTarget, _colGroup, _bodyRow) {\n            var tableWidth = 0;\n            var SS = [];\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n                tableWidth += _colGroup[cgi]._width;\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                var trCSS_class = \"\";\n                SS.push('<tr class=\"' + trCSS_class + '\">');\n                for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    var col = _bodyRow.rows[tri].cols[ci];\n                    var cellHeight = cfg.header.columnHeight * col.rowspan - cfg.header.columnBorderWidth;\n                    var colAlign = headerAlign || col.align;\n                    SS.push('<td ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        (function () {\n                            return (typeof col.key !== \"undefined\") ? 'data-ax5grid-column-key=\"' + col.key + '\" ' : '';\n                        })(),\n                        'data-ax5grid-column-colindex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-rowindex=\"' + col.rowIndex + '\" ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.header.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function () {\n                        var lineHeight = (cfg.header.columnHeight - cfg.header.columnPadding * 2 - cfg.header.columnBorderWidth);\n                        return '<span data-ax5grid-cellHolder=\"\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            ' style=\"height: ' + (cfg.header.columnHeight - cfg.header.columnBorderWidth) + 'px;line-height: ' + lineHeight + 'px;\">';\n                    })(), (function () {\n                        var _SS = \"\";\n\n                        if (!U.isNothing(col.key) && !U.isNothing(col.colIndex) && (cfg.sortable === true || col.sortable === true) && col.sortable !== false) {\n                            _SS += '<span data-ax5grid-column-sort=\"' + col.colIndex + '\" data-ax5grid-column-sort-order=\"' + (colGroup[col.colIndex].sort || \"\") + '\" />';\n                        }\n                        return _SS;\n                    })(), getFieldValue.call(this, col), '</span>');\n\n                    if (!U.isNothing(col.colIndex)) {\n                        if (cfg.enableFilter) {\n                            SS.push('<span data-ax5grid-column-filter=\"' + col.colIndex + '\" data-ax5grid-column-filter-value=\"\"  />');\n                        }\n                    }\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'style=\"height: ' + (cfg.header.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n            SS.push('</table>');\n            _elTarget.html(SS.join(''));\n\n            /// append column-resizer\n            (function () {\n                var resizerHeight = cfg.header.columnHeight * _bodyRow.rows.length - cfg.header.columnBorderWidth;\n                var resizerLeft = 0;\n                var AS = [];\n                for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                    var col = _colGroup[cgi];\n                    if (!U.isNothing(col.colIndex)) {\n                        //_colGroup[cgi]._width\n                        resizerLeft += col._width;\n                        AS.push('<div data-ax5grid-column-resizer=\"' + col.colIndex + '\" style=\"height:' + resizerHeight + 'px;left: ' + (resizerLeft - 4) + 'px;\"  />');\n                    }\n                }\n                _elTarget.append(AS);\n            }).call(this);\n\n\n            return tableWidth;\n        };\n\n        if (cfg.asidePanelWidth > 0) {\n            repaintHeader.call(this, this.$.panel[\"aside-header\"], this.asideColGroup, asideHeaderData);\n        }\n        if (cfg.frozenColumnIndex > 0) {\n            repaintHeader.call(this, this.$.panel[\"left-header\"], this.leftHeaderColGroup, leftHeaderData);\n        }\n        this.xvar.scrollContentWidth = repaintHeader.call(this, this.$.panel[\"header-scroll\"], this.headerColGroup, headerData);\n\n        if (cfg.rightSum) {\n\n        }\n    };\n\n    var scrollTo = function (css) {\n        this.$.panel[\"header-scroll\"].css(css);\n        return this;\n    };\n\n    var toggleSort = function (_key) {\n        var sortOrder = \"\";\n        var sortInfo = {};\n        var seq = 0;\n\n        for (var k in this.sortInfo) {\n            if (this.sortInfo[k].fixed) {\n                sortInfo[k] = this.sortInfo[k];\n                seq++;\n            }\n        }\n\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            if (this.colGroup[i].key == _key) {\n                if (sortOrder == \"\") {\n                    if (typeof this.colGroup[i].sort === \"undefined\") {\n                        sortOrder = \"desc\";\n                    }\n                    else if (this.colGroup[i].sort === \"desc\") {\n                        sortOrder = \"asc\";\n                    }\n                    else {\n                        sortOrder = undefined;\n                    }\n                }\n                this.colGroup[i].sort = sortOrder;\n            } else if (!this.config.multiSort) {\n                this.colGroup[i].sort = undefined;\n            }\n\n            if (typeof this.colGroup[i].sort !== \"undefined\") {\n                if (!sortInfo[this.colGroup[i].key]) {\n                    sortInfo[this.colGroup[i].key] = {\n                        seq: seq++,\n                        orderBy: this.colGroup[i].sort\n                    };\n                }\n            }\n        }\n\n        this.setColumnSort(sortInfo);\n        return this;\n    };\n\n    var applySortStatus = function (_sortInfo) {\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            for (var _key in _sortInfo) {\n                if (this.colGroup[i].key == _key) {\n                    this.colGroup[i].sort = _sortInfo[_key].orderBy;\n                }\n            }\n        }\n        return this;\n    };\n\n    var select = function(_options){\n        GRID.data.select.call(this, dindex, _options && _options.selected);\n        GRID.body.updateRowState.call(this, [\"selected\"], dindex);\n    };\n\n    var getExcelString = function () {\n        var cfg = this.config;\n        var colGroup = this.colGroup;\n        var headerData = this.headerData;\n\n        var getHeader = function (_colGroup, _bodyRow) {\n            var SS = [];\n            //SS.push('<table border=\"1\">');\n            for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr>');\n                for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    var col = _bodyRow.rows[tri].cols[ci];\n                    SS.push('<td ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        '>', getFieldValue.call(this, col), '</td>');\n                }\n                SS.push('</tr>');\n            }\n            //SS.push('</table>');\n\n            return SS.join('');\n        };\n\n        return getHeader.call(this, colGroup, headerData);\n    };\n\n    GRID.header = {\n        init: init,\n        repaint: repaint,\n        scrollTo: scrollTo,\n        toggleSort: toggleSort,\n        applySortStatus: applySortStatus,\n        getExcelString: getExcelString\n    };\n\n})();","// ax5.ui.grid.inlineEditor\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var edit_text = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"text\" value=\"'+ _value +'\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.focus().select();\n        }\n    };\n\n    var edit_money = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"money\" value=\"'+ _value +'\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"money\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_number = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"number\" value=\"'+ _value +'\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"number\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_date = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"calendar\" value=\"'+ _value +'\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5picker\");\n            _$el.ax5picker({\n                direction: \"auto\",\n                content: {\n                    type: 'date',\n                    formatter: {\n                        pattern: 'date'\n                    }\n                },\n                onStateChanged: function () {\n                    if (this.state == \"open\") {\n                        this.self.activePicker.attr(\"data-ax5grid-inline-edit-picker\", \"date\");\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey);\n                    }\n                }\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_select = {\n        useReturnToSave: false,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            var po = [];\n            po.push('<div data-ax5select=\"ax5grid-editor\" data-ax5select-config=\"{}\">');\n            po.push('</div>');\n\n            return po.join('');\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var eConfig = {\n                columnKeys: {\n                    optionValue: \"value\",\n                    optionText: \"text\",\n                    optionSelected: \"selected\"\n                }\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n\n            eConfig.options.forEach(function(n){\n               if(n[eConfig.columnKeys.optionValue] == _value) n[eConfig.columnKeys.optionSelected] = true;\n            });\n\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5select\");\n            _$el.ax5select({\n                direction: \"auto\",\n                columnKeys: eConfig.columnKeys,\n                options: eConfig.options,\n                onStateChanged: function () {\n                    if (this.state == \"open\") {\n                        this.self.activeSelectOptionGroup.attr(\"data-ax5grid-inline-edit-picker\", \"select\");\n                    } else if (this.state == \"changeValue\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"ESC\", _columnKey);\n                    }\n                }\n            });\n            _$el.ax5select(\"open\");\n            _$el.ax5select(\"setValue\", _value);\n            _$el.find(\"a\").focus();\n        }\n    };\n\n    var edit_checkbox = {\n        editMode: \"inline\",\n        getHtml: function (_root, _editor, _value) {\n\n            var lineHeight = (_root.config.body.columnHeight - _root.config.body.columnPadding * 2 - _root.config.body.columnBorderWidth);\n            var checked;\n            if (_editor.config && _editor.config.trueValue) {\n                checked = (_value == _editor.config.trueValue) ? \"true\" : \"false\";\n            } else {\n                checked = (_value == false || _value == \"false\" || _value < \"1\") ? \"false\" : \"true\";\n            }\n\n            var eConfig = {\n                marginTop: 2,\n                height: lineHeight - 4\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n            eConfig.marginTop = (lineHeight - eConfig.height) / 2;\n\n            return '<div data-ax5grid-editor=\"checkbox\" data-ax5grid-checked=\"' + checked + '\" style=\"height:' + eConfig.height + 'px;width:' + eConfig.height + 'px;margin-top:' + eConfig.marginTop + 'px;\"></div>';\n        }\n    };\n\n    GRID.inlineEditor = {\n        \"text\": edit_text,\n        \"money\": edit_money,\n        \"number\": edit_number,\n        \"date\": edit_date,\n        \"select\": edit_select,\n        \"checkbox\": edit_checkbox\n    };\n\n})();","// ax5.ui.grid.page\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var onclickPageMove = function (_act) {\n        var callback = function (_pageNo) {\n            if (this.page.currentPage != _pageNo) {\n                this.page.selectPage = _pageNo;\n                if (this.config.page.onChange) {\n                    this.config.page.onChange.call({\n                        self: this,\n                        page: this.page,\n                        data: this.data\n                    });\n                }\n            }\n        };\n        var processor = {\n            \"first\": function () {\n                callback.call(this, 0);\n            },\n            \"prev\": function () {\n                var pageNo = this.page.currentPage - 1;\n                if (pageNo < 0) pageNo = 0;\n                callback.call(this, pageNo);\n            },\n            \"next\": function () {\n                var pageNo = this.page.currentPage + 1;\n                if (pageNo > this.page.totalPages - 1) pageNo = this.page.totalPages - 1;\n                callback.call(this, pageNo);\n            },\n            \"last\": function () {\n                callback.call(this, this.page.totalPages - 1);\n            }\n        };\n\n        if (_act in processor) {\n            processor[_act].call(this);\n        }\n        else {\n            callback.call(this, _act-1);\n        }\n    };\n\n    var navigationUpdate = function () {\n        var self = this;\n        if (this.page) {\n            var page = {\n                hasPage: false,\n                currentPage: this.page.currentPage,\n                pageSize: this.page.pageSize,\n                totalElements: this.page.totalElements,\n                totalPages: this.page.totalPages,\n                firstIcon: this.config.page.firstIcon,\n                prevIcon: this.config.page.prevIcon || \"«\",\n                nextIcon: this.config.page.nextIcon || \"»\",\n                lastIcon: this.config.page.lastIcon,\n            };\n            var navigationItemCount = this.config.page.navigationItemCount;\n\n\n            page[\"@paging\"] = (function () {\n                var returns = [];\n\n                var startI = page.currentPage - Math.floor(navigationItemCount / 2);\n                if (startI < 0) startI = 0;\n                var endI = page.currentPage + navigationItemCount;\n                if (endI > page.totalPages) endI = page.totalPages;\n\n                if (endI - startI > navigationItemCount) {\n                    endI = startI + navigationItemCount;\n                }\n\n                if(endI - startI < navigationItemCount){\n                    startI = endI - navigationItemCount;\n                }\n                if (startI < 0) startI = 0;\n\n                for (var p = startI, l = endI; p < l; p++) {\n                    returns.push({'pageNo': (p + 1), 'selected': page.currentPage == p});\n                }\n                return returns;\n            })();\n\n            if(page[\"@paging\"].length > 0){\n                page.hasPage = true;\n            }\n\n            this.$[\"page\"][\"navigation\"].html(GRID.tmpl.get(\"page_navigation\", page));\n            this.$[\"page\"][\"navigation\"].find(\"[data-ax5grid-page-move]\").on(\"click\", function () {\n                var act = this.getAttribute(\"data-ax5grid-page-move\");\n                onclickPageMove.call(self, act);\n            });\n        } else {\n            this.$[\"page\"][\"navigation\"].empty();\n        }\n    };\n\n    var statusUpdate = function () {\n        var fromRowIndex = this.xvar.paintStartRowIndex;\n        var toRowIndex = this.xvar.paintStartRowIndex + this.xvar.paintRowCount - 1;\n        //var totalElements = (this.page && this.page.totalElements) ? this.page.totalElements : this.xvar.dataRowCount;\n        var totalElements = this.xvar.dataRowCount;\n        if (toRowIndex > totalElements) {\n            toRowIndex = totalElements;\n        }\n\n        this.$[\"page\"][\"status\"].html(GRID.tmpl.get(\"page_status\", {\n            fromRowIndex: U.number(fromRowIndex + 1, {\"money\": true}),\n            toRowIndex: U.number(toRowIndex, {\"money\": true}),\n            totalElements: U.number(totalElements, {\"money\": true}),\n            dataRowCount: (totalElements !== this.xvar.dataRealRowCount) ? U.number(this.xvar.dataRealRowCount, {\"money\": true}) : false\n        }));\n    };\n\n    GRID.page = {\n        navigationUpdate: navigationUpdate,\n        statusUpdate: statusUpdate\n    };\n\n})();","// ax5.ui.grid.scroller\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var convertScrollPosition = {\n        \"vertical\": function (css, _var) {\n            var _content_height = _var._content_height - _var._panel_height;\n            var _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight;\n            var top = (_content_height * css.top) / _scroller_height;\n            if (top < 0) top = 0;\n            else if (_content_height < top) {\n                top = _content_height;\n            }\n            return {\n                top: -top\n            }\n        },\n        \"horizontal\": function (css, _var) {\n            var _content_width = _var._content_width - _var._panel_width;\n            var _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth;\n            var left = (_content_width * css.left) / _scroller_width;\n            if (left < 0) left = 0;\n            else if (_content_width < left) {\n                left = _content_width;\n            }\n            return {\n                left: -left\n            }\n        }\n    };\n    var convertScrollBarPosition = {\n        \"vertical\": function (_top, _var) {\n\n            var type = \"vertical\";\n            var _content_height = _var._content_height - _var._panel_height;\n            var _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight;\n            var top = (_scroller_height * _top) / _content_height;\n\n            if (-top > _scroller_height) {\n                top = -_scroller_height;\n\n                var scrollPositon = convertScrollPosition[type].call(this, {top: -top}, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.body.scrollTo.call(this, scrollPositon);\n            }\n\n            return -top\n        },\n        \"horizontal\": function (_left, _var) {\n            var type = \"horizontal\";\n            var _content_width = _var._content_width - _var._panel_width;\n            var _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth;\n            var left = (_scroller_width * _left) / _content_width;\n\n            if (-left > _scroller_width) {\n                left = -_scroller_width;\n                var scrollPositon = convertScrollPosition[type].call(this, {left: -left}, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.header.scrollTo.call(this, scrollPositon);\n                GRID.body.scrollTo.call(this, scrollPositon);\n            }\n\n            return -left\n        }\n    };\n    var scrollBarMover = {\n        \"click\": function (track, bar, type, e) {\n\n            // 마우스 무브 완료 타임과 클릭타임 차이가 20 보다 작으면 클릭이벤트 막기.\n            if ((new Date()).getTime() - GRID.scroller.moveout_timer < 20) {\n                return false;\n            }\n\n            var self = this,\n                trackOffset = track.offset(),\n                barBox = {\n                    width: bar.outerWidth(), height: bar.outerHeight()\n                },\n                trackBox = {\n                    width: track.innerWidth(), height: track.innerHeight()\n                },\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n                getScrollerPosition = {\n                    \"vertical\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newTop = mouseObj.clientY - trackOffset.top;\n                        if (newTop < 0) {\n                            newTop = 0;\n                        }\n                        else if ((newTop + barBox.height) > trackBox.height) {\n                            newTop = trackBox.height - barBox.height;\n                        }\n                        return {top: newTop};\n                    },\n                    \"horizontal\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newLeft = mouseObj.clientX - trackOffset.left;\n                        if (newLeft < 0) {\n                            newLeft = 0;\n                        }\n                        else if ((newLeft + barBox.width) > trackBox.width) {\n                            newLeft = trackBox.width - barBox.width;\n                        }\n                        return {left: newLeft};\n                    }\n                };\n\n            var css = getScrollerPosition[type](e);\n            bar.css(css);\n\n            var scrollPositon = convertScrollPosition[type].call(self, css, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            });\n            if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n            GRID.body.scrollTo.call(self, scrollPositon);\n        },\n        \"on\": function (track, bar, type, e) {\n            var self = this,\n                barOffset = bar.position(),\n                barBox = {\n                    width: bar.outerWidth(), height: bar.outerHeight()\n                },\n                trackBox = {\n                    width: track.innerWidth(), height: track.innerHeight()\n                },\n\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n\n                getScrollerPosition = {\n                    \"vertical\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newTop = barOffset.top + self.xvar.__da;\n                        if (newTop < 0) {\n                            newTop = 0;\n                        }\n                        else if ((newTop + barBox.height) > trackBox.height) {\n                            newTop = trackBox.height - barBox.height;\n                        }\n                        return {top: newTop};\n                    },\n                    \"horizontal\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newLeft = barOffset.left + self.xvar.__da;\n                        if (newLeft < 0) {\n                            newLeft = 0;\n                        }\n                        else if ((newLeft + barBox.width) > trackBox.width) {\n                            newLeft = trackBox.width - barBox.width;\n                        }\n                        return {left: newLeft};\n                    }\n                };\n\n            self.xvar.__da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n\n            jQuery(document.body)\n                .bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    var css = getScrollerPosition[type](e);\n                    bar.css(css);\n\n                    var scrollPositon = convertScrollPosition[type].call(self, css, {\n                        _content_width: _content_width,\n                        _content_height: _content_height,\n                        _panel_width: _panel_width,\n                        _panel_height: _panel_height,\n                        _horizontal_scroller_width: _horizontal_scroller_width,\n                        _vertical_scroller_height: _vertical_scroller_height,\n                        verticalScrollBarHeight: verticalScrollBarHeight,\n                        horizontalScrollBarWidth: horizontalScrollBarWidth\n                    });\n\n                    if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n                    GRID.body.scrollTo.call(self, scrollPositon);\n                })\n                .bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    scrollBarMover.off.call(self);\n                })\n                .bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                    scrollBarMover.off.call(self);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            GRID.scroller.moveout_timer = (new Date()).getTime();\n\n            jQuery(document.body)\n                .unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n    var scrollContentMover = {\n        \"wheel\": function (delta) {\n            var self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth;\n\n            if (isNaN(_content_height) || isNaN(_content_width)) {\n                return false;\n            }\n\n            var newLeft, newTop;\n            var _top_is_end = false;\n            var _left_is_end = false;\n\n            newLeft = _body_scroll_position.left - delta.x;\n            newTop = _body_scroll_position.top - delta.y;\n\n            // newTop이 범위를 넘었는지 체크\n            if (newTop >= 0) {\n                newTop = 0;\n                _top_is_end = true;\n            } else if (newTop <= _panel_height - _content_height) {\n                newTop = _panel_height - _content_height;\n                if (newTop >= 0) newTop = 0;\n                _top_is_end = true;\n            } else {\n                if (delta.y == 0) _top_is_end = true;\n            }\n\n\n            // newLeft이 범위를 넘었는지 체크\n            if (newLeft >= 0) {\n                newLeft = 0;\n                _left_is_end = true;\n            } else if (newLeft <= _panel_width - _content_width) {\n                newLeft = _panel_width - _content_width;\n                if (newLeft >= 0) newLeft = 0;\n                _left_is_end = true;\n            } else {\n                if (delta.x == 0) _left_is_end = true;\n            }\n\n            //self.$[\"panel\"][\"body-scroll\"].css({left: newLeft, top: newTop});\n            GRID.header.scrollTo.call(this, {left: newLeft});\n            GRID.body.scrollTo.call(this, {left: newLeft, top: newTop});\n            resize.call(this);\n\n            return !_top_is_end || !_left_is_end;\n        },\n        \"on\": function () {\n            var self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                getContentPosition = function (e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    var newLeft, newTop;\n\n                    self.xvar.__x_da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                    self.xvar.__y_da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n\n                    newLeft = _body_scroll_position.left + self.xvar.__x_da;\n                    newTop = _body_scroll_position.top + self.xvar.__y_da;\n\n                    // newTop이 범위를 넘었는지 체크\n                    if (newTop >= 0) {\n                        newTop = 0;\n                    } else if (newTop <= _panel_height - _content_height) {\n                        newTop = _panel_height - _content_height;\n                        if (newTop >= 0) newTop = 0;\n                    }\n\n                    // newLeft이 범위를 넘었는지 체크\n                    if (newLeft >= 0) {\n                        newLeft = 0;\n                    } else if (newLeft <= _panel_width - _content_width) {\n                        newLeft = _panel_width - _content_width;\n                        if (newLeft >= 0) newLeft = 0;\n                    }\n\n                    return {\n                        left: newLeft, top: newTop\n                    }\n                };\n\n            this.xvar.__x_da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n            this.xvar.__y_da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n\n            jQuery(document.body)\n                .bind(\"touchmove\" + \".ax5grid-\" + this.instanceId, function (e) {\n                    var css = getContentPosition(e);\n                    GRID.header.scrollTo.call(self, {left: css.left});\n                    GRID.body.scrollTo.call(self, css, \"noRepaint\");\n                    resize.call(self);\n                    U.stopEvent(e);\n                })\n                .bind(\"touchend\" + \".ax5grid-\" + this.instanceId, function (e) {\n                    var css = getContentPosition(e);\n                    GRID.header.scrollTo.call(self, {left: css.left});\n                    GRID.body.scrollTo.call(self, css);\n                    resize.call(self);\n                    U.stopEvent(e);\n                    scrollContentMover.off.call(self);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            jQuery(document.body)\n                .unbind(\"touchmove\" + \".ax5grid-\" + this.instanceId)\n                .unbind(\"touchend\" + \".ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    var init = function () {\n        var self = this;\n        //this.config.scroller.size\n        var margin = this.config.scroller.trackPadding;\n\n        this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size - (margin + 1), left: margin / 2});\n        this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size - (margin + 1), top: margin / 2});\n\n        this.$[\"scroller\"][\"vertical-bar\"]\n            .on(GRID.util.ENM[\"mousedown\"], (function (e) {\n                this.xvar.mousePosition = GRID.util.getMousePosition(e);\n                scrollBarMover.on.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n            }).bind(this))\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        this.$[\"scroller\"][\"vertical\"]\n            .on(\"click\", (function (e) {\n                if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"vertical\") {\n                    scrollBarMover.click.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n                }\n            }).bind(this));\n\n        this.$[\"scroller\"][\"horizontal-bar\"]\n            .on(GRID.util.ENM[\"mousedown\"], (function (e) {\n                this.xvar.mousePosition = GRID.util.getMousePosition(e);\n                scrollBarMover.on.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n            }).bind(this))\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        this.$[\"scroller\"][\"horizontal\"]\n            .on(\"click\", (function (e) {\n                if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"horizontal\") {\n                    scrollBarMover.click.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n                }\n            }).bind(this));\n\n        this.$[\"container\"][\"body\"].on('mousewheel DOMMouseScroll', (function (e) {\n            var E = e.originalEvent;\n            var delta = {x: 0, y: 0};\n            if (E.detail) {\n                delta.y = E.detail * 10;\n            } else {\n                if (typeof E.deltaY === \"undefined\") {\n                    delta.y = -E.wheelDelta;\n                    delta.x = 0;\n                } else {\n                    delta.y = E.deltaY;\n                    delta.x = E.deltaX;\n                }\n            }\n\n            if (scrollContentMover.wheel.call(this, delta)) {\n                U.stopEvent(e);\n            }\n        }).bind(this));\n\n        if (document.addEventListener && ax5.info.supportTouch) {\n            this.$[\"container\"][\"body\"]\n                .on(\"touchstart\", '[data-ax5grid-panel]', function (e) {\n                    self.xvar.mousePosition = GRID.util.getMousePosition(e);\n                    scrollContentMover.on.call(self);\n                });\n        }\n    };\n\n    var resize = function () {\n        var _vertical_scroller_height = this.$[\"scroller\"][\"vertical\"].height(),\n            _horizontal_scroller_width = this.$[\"scroller\"][\"horizontal\"].width(),\n            _panel_height = this.$[\"panel\"][\"body\"].height(),\n            _panel_width = this.$[\"panel\"][\"body\"].width(),\n            _content_height = this.xvar.scrollContentHeight,\n            _content_width = this.xvar.scrollContentWidth,\n            verticalScrollBarHeight = _panel_height * _vertical_scroller_height / _content_height,\n            horizontalScrollBarWidth = _panel_width * _horizontal_scroller_width / _content_width;\n\n\n        if (verticalScrollBarHeight < this.config.scroller.barMinSize) verticalScrollBarHeight = this.config.scroller.barMinSize;\n        if (horizontalScrollBarWidth < this.config.scroller.barMinSize) horizontalScrollBarWidth = this.config.scroller.barMinSize;\n\n        this.$[\"scroller\"][\"vertical-bar\"].css({\n            top: convertScrollBarPosition.vertical.call(this, this.$.panel[\"body-scroll\"].position().top, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            height: verticalScrollBarHeight\n        });\n\n        //console.log(horizontalScrollBarWidth);\n\n        this.$[\"scroller\"][\"horizontal-bar\"].css({\n            left: convertScrollBarPosition.horizontal.call(this, this.$.panel[\"body-scroll\"].position().left, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            width: horizontalScrollBarWidth\n        });\n\n        _vertical_scroller_height = null;\n        _horizontal_scroller_width = null;\n        _panel_height = null;\n        _panel_width = null;\n        _content_height = null;\n        _content_width = null;\n        verticalScrollBarHeight = null;\n        horizontalScrollBarWidth = null;\n    };\n\n    GRID.scroller = {\n        // 타이머\n        moveout_timer: (new Date()).getTime(),\n        init: init,\n        resize: resize\n    };\n\n})();","// ax5.ui.grid.tmpl\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var main = function () {\n        return `<div data-ax5grid-container=\"root\" data-ax5grid-instance=\"{{instanceId}}\">\n            <div data-ax5grid-container=\"hidden\">\n                <textarea data-ax5grid-form=\"clipboard\"></textarea>\n            </div>\n            <div data-ax5grid-container=\"header\">\n                <div data-ax5grid-panel=\"aside-header\"></div>\n                <div data-ax5grid-panel=\"left-header\"></div>\n                <div data-ax5grid-panel=\"header\">\n                    <div data-ax5grid-panel-scroll=\"header\"></div>\n                </div>\n                <div data-ax5grid-panel=\"right-header\"></div>\n            </div>\n            <div data-ax5grid-container=\"body\">\n                <div data-ax5grid-panel=\"top-aside-body\"></div>\n                <div data-ax5grid-panel=\"top-left-body\"></div>\n                <div data-ax5grid-panel=\"top-body\">\n                    <div data-ax5grid-panel-scroll=\"top-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"top-right-body\"></div>\n                <div data-ax5grid-panel=\"aside-body\">\n                    <div data-ax5grid-panel-scroll=\"aside-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"left-body\">\n                    <div data-ax5grid-panel-scroll=\"left-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"body\">\n                    <div data-ax5grid-panel-scroll=\"body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"right-body\">\n                  <div data-ax5grid-panel-scroll=\"right-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"bottom-aside-body\"></div>\n                <div data-ax5grid-panel=\"bottom-left-body\"></div>\n                <div data-ax5grid-panel=\"bottom-body\">\n                    <div data-ax5grid-panel-scroll=\"bottom-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"bottom-right-body\"></div>\n            </div>\n            <div data-ax5grid-container=\"page\">\n                <div data-ax5grid-page=\"holder\">\n                    <div data-ax5grid-page=\"navigation\"></div>\n                    <div data-ax5grid-page=\"status\"></div>\n                </div>\n            </div>\n            <div data-ax5grid-container=\"scroller\">\n                <div data-ax5grid-scroller=\"vertical\">\n                    <div data-ax5grid-scroller=\"vertical-bar\"></div>    \n                </div>\n                <div data-ax5grid-scroller=\"horizontal\">\n                    <div data-ax5grid-scroller=\"horizontal-bar\"></div>\n                </div>\n                <div data-ax5grid-scroller=\"corner\"></div>\n            </div>\n            <div data-ax5grid-resizer=\"vertical\"></div>\n            <div data-ax5grid-resizer=\"horizontal\"></div>\n        </div>`;\n    };\n\n\n    var page_navigation = function(){\n        return `<div data-ax5grid-page-navigation=\"holder\">\n            {{#hasPage}}\n            <div data-ax5grid-page-navigation=\"cell\">    \n                {{#firstIcon}}<button data-ax5grid-page-move=\"first\">{{{firstIcon}}}</button>{{/firstIcon}}\n                <button data-ax5grid-page-move=\"prev\">{{{prevIcon}}}</button>\n            </div>\n            <div data-ax5grid-page-navigation=\"cell-paging\">\n                {{#@paging}}\n                <button data-ax5grid-page-move=\"{{pageNo}}\" data-ax5grid-page-selected=\"{{selected}}\">{{pageNo}}</button>\n                {{/@paging}}\n            </div>\n            <div data-ax5grid-page-navigation=\"cell\">\n                <button data-ax5grid-page-move=\"next\">{{{nextIcon}}}</button>\n                {{#lastIcon}}<button data-ax5grid-page-move=\"last\">{{{lastIcon}}}</button>{{/lastIcon}}\n            </div>\n            {{/hasPage}}\n        </div>`;\n    };\n\n\n    var page_status = function(){\n        return `<span>{{fromRowIndex}} - {{toRowIndex}} of {{totalElements}}{{#dataRowCount}} ({{dataRowCount}}){{/dataRowCount}}</span>`;\n    };\n\n\n    GRID.tmpl = {\n        \"main\": main,\n        \"page_navigation\": page_navigation,\n        \"page_status\": page_status,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(GRID.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();","// ax5.ui.grid.util\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n\n\n    /**\n     * @method ax5grid.util.divideTableByFrozenColumnIndex\n     * @param _table\n     * @param _frozenColumnIndex\n     * @returns {{leftHeaderData: {rows: Array}, headerData: {rows: Array}}}\n     */\n\n    var divideTableByFrozenColumnIndex = function (_table, _frozenColumnIndex) {\n        var tempTable_l = {rows: []};\n        var tempTable_r = {rows: []};\n        for (var r = 0, rl = _table.rows.length; r < rl; r++) {\n            var row = _table.rows[r];\n\n            tempTable_l.rows[r] = {cols: []};\n            tempTable_r.rows[r] = {cols: []};\n\n            for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                var col = jQuery.extend({}, row.cols[c]);\n                var colStartIndex = col.colIndex, colEndIndex = col.colIndex + col.colspan;\n\n                if (colStartIndex < _frozenColumnIndex) {\n                    if (colEndIndex <= _frozenColumnIndex) {\n                        // 좌측편에 변형없이 추가\n                        tempTable_l.rows[r].cols.push(col);\n                    } else {\n                        var leftCol = jQuery.extend({}, col);\n                        var rightCol = jQuery.extend({}, leftCol);\n                        leftCol.colspan = _frozenColumnIndex - leftCol.colIndex;\n                        rightCol.colIndex = _frozenColumnIndex;\n                        rightCol.colspan = col.colspan - leftCol.colspan;\n\n                        tempTable_l.rows[r].cols.push(leftCol);\n                        tempTable_r.rows[r].cols.push(rightCol);\n                    }\n                }\n                else {\n                    // 오른편\n                    tempTable_r.rows[r].cols.push(col);\n                }\n            }\n        }\n\n        return {\n            leftData: tempTable_l,\n            rightData: tempTable_r\n        }\n    };\n\n    var getMousePosition = function (e) {\n        var mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n        mouseObj = ('changedTouches' in originalEvent) ? originalEvent.changedTouches[0] : originalEvent;\n        // clientX, Y 쓰면 스크롤에서 문제 발생\n        return {\n            clientX: mouseObj.pageX,\n            clientY: mouseObj.pageY\n        }\n    };\n\n    var ENM = {\n        \"mousedown\": (ax5.info.supportTouch) ? \"touchstart\" : \"mousedown\",\n        \"mousemove\": (ax5.info.supportTouch) ? \"touchmove\" : \"mousemove\",\n        \"mouseup\": (ax5.info.supportTouch) ? \"touchend\" : \"mouseup\"\n    };\n\n    var makeHeaderTable = function (_columns) {\n        var columns = U.deepCopy(_columns);\n        var cfg = this.config;\n        var table = {\n            rows: []\n        };\n        var colIndex = 0;\n        var maekRows = function (_columns, depth, parentField) {\n            var row = {cols: []};\n            var i = 0, l = _columns.length;\n\n            for (; i < l; i++) {\n                var field = _columns[i];\n                var colspan = 1;\n\n                if (!field.hidden) {\n                    field.colspan = 1;\n                    field.rowspan = 1;\n\n                    field.rowIndex = depth;\n                    field.colIndex = (function () {\n                        if (!parentField) {\n                            return colIndex++;\n                        } else {\n                            colIndex = parentField.colIndex + i + 1;\n                            return parentField.colIndex + i;\n                        }\n                    })();\n\n                    row.cols.push(field);\n\n                    if ('columns' in field) {\n                        colspan = maekRows(field.columns, depth + 1, field);\n                    } else {\n                        field.width = ('width' in field) ? field.width : cfg.columnMinWidth;\n                    }\n                    field.colspan = colspan;\n                } else {\n\n                }\n            }\n\n            if (row.cols.length > 0) {\n                if (!table.rows[depth]) {\n                    table.rows[depth] = {cols: []};\n                }\n                table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                return (row.cols.length - 1) + colspan;\n            } else {\n                return colspan;\n            }\n\n        };\n        maekRows(columns, 0);\n\n        // set rowspan\n        for (var r = 0, rl = table.rows.length; r < rl; r++) {\n            for (var c = 0, cl = table.rows[r].cols.length; c < cl; c++) {\n                if (!('columns' in table.rows[r].cols[c])) {\n                    table.rows[r].cols[c].rowspan = rl - r;\n                }\n            }\n        }\n\n        return table;\n    };\n\n    var makeBodyRowTable = function (_columns) {\n        var columns = U.deepCopy(_columns);\n        var table = {\n            rows: []\n        };\n        var colIndex = 0;\n        var maekRows = function (_columns, depth, parentField) {\n            var row = {cols: []};\n            var i = 0, l = _columns.length;\n\n            var selfMakeRow = function (__columns) {\n                var i = 0, l = __columns.length;\n                for (; i < l; i++) {\n                    var field = __columns[i];\n                    var colspan = 1;\n\n                    if (!field.hidden) {\n\n                        if ('key' in field) {\n                            field.colspan = 1;\n                            field.rowspan = 1;\n\n                            field.rowIndex = depth;\n                            field.colIndex = (function () {\n                                if (!parentField) {\n                                    return colIndex++;\n                                } else {\n                                    colIndex = parentField.colIndex + i + 1;\n                                    return parentField.colIndex + i;\n                                }\n                            })();\n\n                            row.cols.push(field);\n                            if ('columns' in field) {\n                                colspan = maekRows(field.columns, depth + 1, field);\n                            }\n                            field.colspan = colspan;\n                        }\n                        else {\n                            if ('columns' in field) {\n                                selfMakeRow(field.columns, depth);\n                            }\n                        }\n                    } else {\n\n                    }\n                }\n            };\n\n            for (; i < l; i++) {\n                var field = _columns[i];\n                var colspan = 1;\n\n                if (!field.hidden) {\n\n                    if ('key' in field) {\n                        field.colspan = 1;\n                        field.rowspan = 1;\n\n                        field.rowIndex = depth;\n                        field.colIndex = (function () {\n                            if (!parentField) {\n                                return colIndex++;\n                            } else {\n                                colIndex = parentField.colIndex + i + 1;\n                                return parentField.colIndex + i;\n                            }\n                        })();\n\n                        row.cols.push(field);\n                        if ('columns' in field) {\n                            colspan = maekRows(field.columns, depth + 1, field);\n                        }\n                        field.colspan = colspan;\n                    }\n                    else {\n                        if ('columns' in field) {\n                            selfMakeRow(field.columns, depth);\n                        }\n                    }\n                } else {\n\n                }\n            }\n\n            if (row.cols.length > 0) {\n                if (!table.rows[depth]) {\n                    table.rows[depth] = {cols: []};\n                }\n                table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                return (row.cols.length - 1) + colspan;\n            } else {\n                return colspan;\n            }\n\n        };\n        maekRows(columns, 0);\n\n        (function (table) {\n            // set rowspan\n            for (var r = 0, rl = table.rows.length; r < rl; r++) {\n                var row = table.rows[r];\n                for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                    var col = row.cols[c];\n                    if (!('columns' in col)) {\n                        col.rowspan = rl - r;\n                    }\n                }\n            }\n        })(table);\n\n        return table;\n    };\n\n    var makeBodyRowMap = function (_table) {\n        var map = {};\n        _table.rows.forEach(function (row) {\n            row.cols.forEach(function (col) {\n                map[col.rowIndex + \"_\" + col.colIndex] = jQuery.extend({}, col);\n            });\n        });\n        return map;\n    };\n\n    var makeFootSumTable = function (_footSumColumns) {\n        var table = {\n            rows: []\n        };\n\n        for (var r = 0, rl = _footSumColumns.length; r < rl; r++) {\n            var footSumRow = _footSumColumns[r];\n            table.rows[r] = {cols: []};\n            var addC = 0;\n            for (var c = 0, cl = footSumRow.length; c < cl; c++) {\n                if (addC > this.columns.length) break;\n                var colspan = footSumRow[c].colspan || 1;\n                if (footSumRow[c].label || footSumRow[c].key) {\n                    table.rows[r].cols.push({\n                        colspan: colspan,\n                        rowspan: 1,\n                        colIndex: addC,\n                        columnAttr: \"sum\",\n                        align: footSumRow[c].align,\n                        label: footSumRow[c].label,\n                        key: footSumRow[c].key,\n                        collector: footSumRow[c].collector,\n                        formatter: footSumRow[c].formatter\n                    });\n                } else {\n                    table.rows[r].cols.push({\n                        colIndex: addC,\n                        colspan: colspan,\n                        rowspan: 1,\n                        label: \"&nbsp;\",\n                    });\n                }\n                addC += colspan;\n            }\n            addC -= 1;\n            if (addC < this.columns.length + 1) {\n                for (var c = addC; c < this.columns.length + 1; c++) {\n                    table.rows[r].cols.push({\n                        colIndex: (c + 1),\n                        colspan: 1,\n                        rowspan: 1,\n                        label: \"&nbsp;\",\n                    });\n                }\n            }\n        }\n        return table;\n    };\n\n    var makeBodyGroupingTable = function (_bodyGroupingColumns) {\n        var table = {\n            rows: []\n        };\n\n        var r = 0;\n        table.rows[r] = {cols: []};\n        var addC = 0;\n        for (var c = 0, cl = _bodyGroupingColumns.length; c < cl; c++) {\n            if (addC > this.columns.length) break;\n            var colspan = _bodyGroupingColumns[c].colspan || 1;\n            if (_bodyGroupingColumns[c].label || _bodyGroupingColumns[c].key) {\n                table.rows[r].cols.push({\n                    colspan: colspan,\n                    rowspan: 1,\n                    rowIndex: 0,\n                    colIndex: addC,\n                    columnAttr: \"default\",\n                    align: _bodyGroupingColumns[c].align,\n                    label: _bodyGroupingColumns[c].label,\n                    key: _bodyGroupingColumns[c].key,\n                    collector: _bodyGroupingColumns[c].collector,\n                    formatter: _bodyGroupingColumns[c].formatter\n                });\n            } else {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: addC,\n                    colspan: colspan,\n                    rowspan: 1,\n                    label: \"&nbsp;\"\n                });\n            }\n            addC += colspan;\n        }\n\n        if (addC < this.colGroup.length) {\n            for (var c = addC; c < this.colGroup.length; c++) {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: (c + 1),\n                    colspan: 1,\n                    rowspan: 1,\n                    label: \"&nbsp;\",\n                });\n            }\n        }\n\n        return table;\n    };\n\n    var findPanelByColumnIndex = function (_dindex, _colIndex, _rowIndex) {\n        var _containerPanelName;\n        var _isScrollPanel = false;\n        var _panels = [];\n\n        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n        if (this.xvar.frozenColumnIndex > _colIndex) _panels.push(\"left\");\n        _panels.push(\"body\");\n\n        if (this.xvar.frozenColumnIndex <= _colIndex || this.xvar.frozenRowIndex <= _dindex) {\n            _containerPanelName = _panels.join(\"-\");\n            _panels.push(\"scroll\");\n            _isScrollPanel = true;\n        }\n\n        return {\n            panelName: _panels.join(\"-\"),\n            containerPanelName : _containerPanelName,\n            isScrollPanel: _isScrollPanel\n        }\n    };\n\n    var getRealPathForDataItem = function (_dataPath) {\n        var path = [];\n        var _path = [].concat(_dataPath.split(/[\\.\\[\\]]/g));\n        _path.forEach(function (n) {\n            if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n        });\n        _path = null;\n        return path.join(\"\");\n    };\n\n\n    GRID.util = {\n        divideTableByFrozenColumnIndex: divideTableByFrozenColumnIndex,\n        getMousePosition: getMousePosition,\n        ENM: ENM,\n        makeHeaderTable: makeHeaderTable,\n        makeBodyRowTable: makeBodyRowTable,\n        makeBodyRowMap: makeBodyRowMap,\n        makeFootSumTable: makeFootSumTable,\n        makeBodyGroupingTable: makeBodyGroupingTable,\n        findPanelByColumnIndex: findPanelByColumnIndex,\n        getRealPathForDataItem: getRealPathForDataItem\n    };\n\n})();"]}